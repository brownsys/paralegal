searchState.loadedDescShard("flowistry_pdg", 0, "This mutation is a non-function assign\nA location within the global call-graph.\nThe end of the body, after all possible return statements.\nA <code>RichLocation</code> within a specific point in a codebase.\nThe point <em>after</em> a location in a body.\nA mutable argument was modified by a function call\nA function returned, assigning to it’s return destination\nExtends a MIR body’s <code>Location</code> with <code>Start</code> (before the …\nA wrapper that guarantees to be the same size as <code>T</code> and …\nAdditional information about the source of data.\nThe start of the body.\nAdditional information about this mutation.\nA function that is fit to be handed to …\nA function fit to be handed to <code>#[allocative(visit = &quot;...&quot;)]</code>…\nThe function containing the location.\nThe location of an instruction in the function, or the …\nThe representation of the PDG.\nExports either rustc identifiers or their proxies …\nProxies for Rustc types used within the PDG.\nThis mutation is a non-function assign\nA location within the global call-graph.\nThe end of the body, after all possible return statements.\nA <code>RichLocation</code> within a specific point in a codebase.\nThe point <em>after</em> a location in a body.\nA mutable argument was modified by a function call\nA function returned, assigning to it’s return destination\nExtends a MIR body’s <code>Location</code> with <code>Start</code> (before the …\nA wrapper that guarantees to be the same size as <code>T</code> and …\nAdditional information about the source of data.\nThe start of the body.\nAdditional information about this mutation.\nA function that is fit to be handed to …\nA function fit to be handed to <code>#[allocative(visit = &quot;...&quot;)]</code>…\nReturns the <code>Location</code> in <code>self</code>, returning <code>None</code> otherwise.\nReturns the call string minus the leaf. Returns <code>None</code> if …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe function containing the location.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the enum is SourceUse::Argument otherwise …\nReturns true if the enum is TargetUse::Assign otherwise …\nReturns true if this is an <code>End</code> location.\nReturns true if the enum is TargetUse::MutArg otherwise …\nReturns true if the enum is SourceUse::Operand otherwise …\nReturns true if the enum is TargetUse::Return otherwise …\nReturns true if this is a <code>Start</code> location.\nReturns an iterator over the locations in the call string, …\nReturns an iterator over the locations in the call string, …\nReturns the leaf of the call string (the currently-called …\nThe location of an instruction in the function, or the …\nCreate a new call string from a list of global locations.\nSplit the leaf (the current instruction) from the caller …\nAdds a new call site to the end of the call string.\nCreate an initial call string for the single location <code>loc</code>.\nReturns the <code>Location</code> in <code>self</code>, panicking otherwise.\nMIR datatypes and passes. See the rustc dev guide for more …\nThe crate root is always assigned index 0 by the AST Map …\nA <code>DefId</code> identifies a particular <em>definition</em>, by combining a …\nA DefIndex is an index into the hir-map for a crate, …\nA <code>DefPathHash</code> is a fixed-size representation of a <code>DefPath</code> …\nItem definitions in the currently-compiled crate would …\nA <code>LocalDefId</code> is equivalent to a <code>DefId</code> with …\nAn occupied entry.\nAn occupied entry.\nA <code>StableCrateId</code> is a 64-bit hash of a crate name, together …\nA vacant entry.\nA vacant entry.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwinding is just not possible given the ABI of this …\nThe <code>+</code> operator (addition)\nLike <code>Add</code>, but with UB on overflow.  (Integers only.)\nLike <code>Add</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nThe second field is the variant index. It’s equal to 0 …\nWe just finished dumping the control flow graph. This is …\nWe just dumped the given statement or terminator.\nWe just dumped the terminator for a block but not the …\nCreates an aggregate value, like a tuple or struct.\nA temporary created during the creation of an aggregate …\nReturns the minimum alignment of a type\nThe MIR used for most analysis.\nSee <code>MirPhase::Analysis</code>.\nFunction argument.\nThe type is of the element\nThe coercion was manually written by the user with an <code>as</code> …\nEncodes a user’s type ascription. These need to be …\nThe <code>asm!</code> macro\nEvaluates the operand, which must have type <code>bool</code>. If it is …\nInformation about an assertion failure.\nType for MIR <code>Assert</code> terminator error messages.\nAssign statements roughly correspond to an assignment in …\nSpecial action for <code>Yield</code>, <code>Call</code> and <code>InlineAsm</code> terminators.\nDenotes a call to the intrinsic function <code>assume</code>.\nMarker statement indicating where <code>place</code> would be dropped. …\nA node in the MIR control-flow graph.\nData for a basic block, including a list of its statements.\nWe are about to start dumping the given basic block.\nWe have not started dumping the control flow graph, but we …\nWe are just about to dump the given statement or …\n<code>Offset</code> has the same semantics as <code>offset</code>, except that the …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\n<code>BlockTailInfo</code> is attached to the <code>LocalDecl</code> for temporaries …\nA temporary created for evaluation of some subexpression …\nThe lowered representation of a single function.\nA “boring” constraint (caused by the given location) …\nA local without anything interesting about it.\nThe MIR that is generated by MIR building.\nRoughly speaking, evaluates the <code>func</code> operand and the …\nContains the function type if available.\nList of places that are written to after a successful …\nRepresents how a <code>TerminatorKind::Call</code> was constructed. …\nPerforms essentially all of the casts that can be …\nCleanups to be done.\nA closure that is coerced to a function pointer.\nA constraint that came from checking the body of a closure.\nData must be immutable but not aliasable. This kind of …\nIndicates an outlives-constraint between a type or between …\nThe subject of a <code>ClosureOutlivesRequirement</code> – that is, …\nRepresents a <code>ty::Ty</code> for use in <code>ClosureOutlivesSubject</code>.\nAfter we borrow check a closure, we are left with various …\nThe <code>&lt;=&gt;</code> operator (three-way comparison, like <code>Ord::cmp</code>)\nRepresents how a <code>CastKind::PointerCoercion</code> was constructed.\nConstants\nEvaluated Constants Represents the result of const …\nInstructs the const eval interpreter to increment a …\nThe result of the <code>mir_const_qualif</code> query.\nA temporary created that references the const with the …\nRepresents a constant value in Rust. <code>Scalar</code> and <code>Slice</code> are …\nConstants are already semantically values, and remain …\nThese indices are generated by slice patterns. Easiest to …\nThese indices are generated by slice patterns. Easiest to …\nThese indices are generated by slice patterns. Easiest to …\nOutlives-constraints can be categorized to determine …\nNo action is to be taken. Continue unwinding.\nCreates a value by loading the given place.\nA CopyForDeref is equivalent to a read from a place at the …\nDenotes a call to the intrinsic function …\nIndicates the end of dropping a coroutine.\nAdditional information carried by a MIR body when it is …\nThe layout of coroutine state.\nCarries control-flow-sensitive information injected by …\nA shared (deep) borrow. Data must be immutable and is …\n<code>DefLocation</code> represents the location of a definition - …\nA “normal” retag.\nDeinitializes the place.\nA temporary created during the pass <code>Derefer</code> to avoid it’…\nThe constituent parts of a mir constant of kind ADT or …\nComputes the discriminant of the place, returning it as an …\nThe <code>/</code> operator (division)\nFor terminators that two successors, <code>assert</code> with cleanup …\n“Downcast” to a variant of an enum or a coroutine.\n“Downcast” to a variant of an enum or a coroutine.\n“Downcast” to a variant of an enum or a coroutine.\nThe behavior of this statement differs significantly …\nA type that has its drop shim called.\nThe <code>==</code> operator (equality)\nAn immutable, aliasable borrow that is discarded after …\nA temporary created for borrow checking.\nThis represents all the reading that a pattern match may …\nThe <code>FakeReadCause</code> describes the type of pattern why a …\nA block where control flow only ever takes one real path, …\nA terminator for blocks that only take one path in …\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA field (e.g., <code>f</code> in <code>_1.f</code>) is one variant of <code>ProjectionElem</code>…\nA function that gets called. We don’t necessarily know …\nThe initial retag of arguments when entering a function.\nA fake read of the RefWithinGuard version of a …\nIf we have an index expression like\nOfficially, the semantics of\nInject a fake read of the borrowed input at the end of …\n<code>let x: !; match x {}</code> doesn’t generate any read of x so …\nThe <code>&gt;=</code> operator (greater than or equal to)\nBlock has one successor; we continue execution there.\nThe <code>&gt;</code> operator (greater than)\nA temporary created during evaluating <code>if</code> predicate, …\nAn internal constraint derived from an illegal universe …\nThe coercion was automatically inserted by the compiler.\nBinding for a <code>self</code>/<code>&amp;self</code>/<code>&amp;mut self</code> binding where the type …\nWe were already cleaning up for an ongoing unwind, and a …\nIndex into a slice/array.\nIndex into a slice/array.\nIndex into a slice/array.\nA value not representable by the other variants; needs to …\nIn addition to the semantic changes, beginning with this …\nBlock ends with an inline assembly block. This is a …\nThe macro that an inline assembly block was created by\nA constraint that doesn’t correspond to anything the …\nDenotes a call to an intrinsic that does not require an …\nThe <code>&lt;=</code> operator (less than or equal to)\nYields the length of the place, as a <code>usize</code>.\nA MIR local.\nTypes for locals\nExtra information about a some locals that’s used for …\nClassifies locals into categories. See <code>Body::local_kind</code>.\n<code>Location</code> represents the position of the start of the …\nThe <code>&lt;</code> operator (less than)\nThis was from comparison generated by a match, used by …\nSome item that needs to monomorphize successfully for a …\nRepresents the “flavors” of MIR.\nWhere a specific <code>mir::Body</code> comes from.\nOther types of desugaring that did not come from the HIR, …\nCreates a value by performing loading the place, just like …\nThe <code>*</code> operator (multiplication)\nLike <code>Mul</code>, but with UB on overflow.  (Integers only.)\nLike <code>Mul</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nData is mutable and not aliasable.\nThe <code>naked_asm!</code> macro\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\nFor terminators that have no successor, like <code>return</code>.\nNo-op. Useful for deleting instructions without affecting …\nNormal function call, no special source\nThe <code>!</code> operator for logical inversion\nComputes a value as described by the operation.\nThe <code>ptr.offset</code> operator\nReturns the offset of a field\nLike an explicit cast from an opaque type to a concrete …\nLike an explicit cast from an opaque type to a concrete …\nLike an explicit cast from an opaque type to a concrete …\nAn operand in MIR represents a “value” in Rust, the …\nThis came from something such as <code>a &gt; b</code> or <code>a + b</code>. In THIR, …\nAn indication of where we are in the control flow graph. …\nPlaces roughly correspond to a “location in memory.” …\nThis <code>Place</code> only contains projection which satisfy …\nAlias for projections as they appear in places, where the …\nThis statement exists to preserve a trace of a scrutinee …\nPointer related casts that are done by coercions. Note …\nAn exposing pointer to address cast. A cast between a …\nAn address-to-pointer cast that picks up an exposed …\nBeginning in this phase, the following variants are …\nBeginning with this phase, the following variant is …\nA constraint from a user-written predicate with the …\nAlias for projections as they appear in <code>UserTypeProjection</code>…\nGets the metadata <code>M</code> from a <code>*const</code>/<code>*mut</code>/<code>&amp;</code>/<code>&amp;mut</code> to …\nRetagging raw pointers.\nCreates a raw pointer with the indicated mutability to the …\nConstruct a raw pointer from the data pointer and metadata.\nCreates a reference of the indicated kind to the place.\nReference used in a guard expression to ensure …\nSubject is a free region from the closure. Indicates a …\nThe <code>%</code> operator (modulus)\nCreates an array where each element is the value of the …\nRetag references in the given place, ensuring they got …\nDescribes what kind of retag is to be performed.\nReturns from the function.\nLocation of function’s return value.\nThe MIR used for CTFE, optimizations, and codegen.\nSee <code>MirPhase::Runtime</code>.\nThe various kinds of rvalues that can appear in MIR.\nUsed for types with <code>layout::abi::Scalar</code> ABI.\nWrite the discriminant for a variant to the enum Place.\nA shared shallow borrow. The immediately borrowed place …\nTransmutes a <code>*mut u8</code> into shallow-initialized <code>Box&lt;T&gt;</code>.\nData must be immutable and is aliasable.\nThe <code>&lt;&lt;</code> operator (shift left)\nLike <code>Shl</code>, but is UB if the RHS &gt;= LHS::BITS or RHS &lt; 0\nThe <code>&gt;&gt;</code> operator (shift right)\nLike <code>Shl</code>, but is UB if the RHS &gt;= LHS::BITS or RHS &lt; 0\nFor terminators that a single successor, like <code>goto</code>, and …\nReturns the size of a value of that type\nUsed for references to unsized types with slice tail.\nGrouped information about the source code origin of a MIR …\nA statement in a basic block, including information about …\nThe various kinds of statements that can appear in MIR.\nA temporary created that references the static with the …\nSee <code>StorageLive</code> above.\n<code>StorageLive</code> and <code>StorageDead</code> statements mark the live range …\nThe <code>-</code> operator (subtraction)\nLike <code>Sub</code>, but with UB on overflow.  (Integers only.)\nLike <code>Sub</code>, but returns <code>(T, bool)</code> of both the wrapped result …\nThese indices are generated by slice patterns.\nThese indices are generated by slice patterns.\nThese indices are generated by slice patterns.\nA <code>Subtype(T)</code> projection is applied to any …\nA <code>Subtype(T)</code> projection is applied to any …\nA <code>Subtype(T)</code> projection is applied to any …\nSwitches based on the computed value.\nSpecial edge for <code>SwitchInt</code>.\nTail call.\nUser-declared variable binding or compiler-introduced …\nTerminates the execution if unwind happens.\nThe various kinds of terminators, representing ways of …\nCreates a pointer/reference to the given thread local.\nReinterpret the bits of the input as a different type.\nRetag preparing for a two-phase borrow.\nThis borrow arose from method-call auto-ref. (i.e., …\nThis constant came from the type system.\nSubject is a type, typically a type parameter, but could …\nReturns whether we should perform some UB-checking at …\nExactly like <code>BinaryOp</code>, but less operands.\nAn unevaluated mir constant which is not part of the type …\nAn unevaluated (potentially generic) constant used in MIR.\nIndicates a terminator that can never be reached.\nTriggers undefined behavior if unwind happens.\nUnsizing casts might require vtables, so we have to record …\nAction to be taken when a stack unwind happens.\nIndicates that the landing pad is finished and that the …\nIndicates that the landing pad is finished and that the …\nThe reason we are terminating the process during unwinding.\nA constraint that came from a usage of a variable (e.g. in …\nYields the operand unchanged\nA user-defined local variable or function parameter\nEncodes the effect of a user-supplied type annotation on …\nA collection of projections into user types.\nThis constant cannot go back into the type system, as it …\nThis is a binding for a non-<code>self</code> binding, or a <code>self</code> that …\nDebug information pertaining to a user variable.\nMarks a suspend point.\nOnly for ZSTs.\nThe value lives here, at offset 0, and that allocation …\nThe number of arguments this function takes.\nWhen present, indicates what argument number this variable …\nA list of basic blocks. References to basic block use a …\nIs variable bound via <code>x</code>, <code>mut x</code>, <code>ref x</code>, <code>ref mut x</code>, <code>mut ref x</code>…\nThe block that the location is within.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe user variable’s data is split across several …\nAll the opaque types that are restricted to concrete types …\nAdditional information carried by a MIR body when it is …\nCoroutine drop glue. This field is populated after the …\nIf this is a coroutine then record the type of source …\nThe layout of a coroutine. This field is populated after …\nNumber of elements to copy from src to dest, not bytes.\nMetadata from source code coverage analysis and …\nCoverage information collected from THIR/MIR during MIR …\nAttempts to open a file where we should dump a given MIR …\nDumps the size and metadata and content of an allocation …\nIf the session is properly configured, dumps a …\nThe name for debuginfo.\nThe type of every local stored inside the coroutine.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPer-function coverage information added by the …\nWhether the local should be ignored for trait bound …\nThe phase at which this MIR should be “injected” into …\nWhether this scope is the root of a scope tree of another …\nNearest (transitive) parent scope (if any) which is …\nAn interpreter for MIR used in CTFE and by miri.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this block lies on an unwind path. This is used …\nDoes this body use generic parameters. This is used for …\nAn <code>HirId</code> with lint levels equivalent to this scope’s …\nCrate-local information for this source scope, that can’…\nDeclarations of locals.\nFurther items that were mentioned in this function and …\nWhether this is a mutable binding (i.e., <code>let x</code> or <code>let mut x</code>…\nThe number of external regions defined on the closure. In …\nPlace of the RHS of the =, or the subject of the <code>match</code> …\nIf an explicit type was provided for this variable binding,\nRequirements between the various free regions defined in …\nHow many passses we have executed since starting the …\nThe span of the pattern in which this variable was bound.\nRecords how far through the “desugaring and optimization…\nprojection out of a place (access a field, deref a …\nWhere in the composite user variable this fragment is, …\nIf <code>Some</code>, this is a promoted rvalue within the parent …\nConstants that are required to evaluate successfully for …\nThe resume type of the function. This field is removed …\nThe source scope, keeping track of which bindings can be …\nSource info corresponding to the local in the original MIR …\nThe <em>syntactic</em> (i.e., not visibility) source scope the …\nSource info of the user variable, including the scope …\nA list of source scopes; these are referenced by statements\nA span representing this MIR, for error reporting.\nThe source span for the AST pertaining to this MIR entity.\n<code>Span</code> of the tail expression.\nMark an argument local (which must be a tuple) as getting …\nList of statements in this block.\nWhich saved locals are storage-live at the same time. …\nIf <code>true</code>, then the value resulting from evaluating this tail\nMethods for the various MIR types. These are intended for …\nTerminator for this block.\nThe type of this local.\nType of the original user variable. This cannot contain a …\nOptional user-given type: for something like …\nIf the user manually ascribed a type to this variable, …\nUser type annotations.\nWhere the data for this user variable is to be found.\nDebug information pertaining to user variables, including …\nWhich of the above fields are in each variant. Note that …\nThe source that led to each variant being created …\nThe MIR Visitor\nWrite a graphviz DOT graph of a list of MIRs.\nWrite out a human-readable textual representation for the …\nThe yield type of the function. This field is removed …\nThe backing memory of the value. May contain more memory …\nThe allocation storing the slice contents. This always …\nThe metadata field of the reference. This is a “target …\nOffset into <code>alloc</code>\nWhether this cast is a coercion that was automatically …\nWhether this is an unsizing coercion and if yes, this …\nThis represents the index into the <code>targets</code> array in …\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nCounting backwards from end? This is always false when …\nWhether <code>to</code> counts from the start or end of the array/slice.\nThe thing being indexed must be at least this long – …\nindex or -index (in Python terms), depending on from_end\nPlace to drop\nReason for backward incompatibility\nThe cleanup block, if it exists.\nArguments the function is called with. These are owned by …\nArguments the function is called with. These are owned by …\nMacro used to create this inline asm: one of <code>asm!</code> or …\nWhere this call came from in HIR/THIR.\nWhere the returned value will be written\nThe discriminant value being tested.\nCleanup to be done if the coroutine is dropped at this …\nThis <code>Span</code> is the span of the function, without the dot and …\nThis <code>Span</code> is the span of the function, without the dot and …\nThe function that’s being called.\nThe function that’s being called.\nA block control flow could conceptually jump to, but won’…\nSource spans for each line of the inline assembly code. …\nThe operands for the inline assembly, as <code>Operand</code>s or <code>Place</code>…\nMiscellaneous options for the inline assembly.\nThe target normal control flow will take.\nThe target normal control flow will take.\nWhere to resume to.\nThe place to store the resume argument in.\nWhere to go after this call returns. If none, the call …\nValid targets for the inline assembly. The first element …\nThe template for the inline assembly, with placeholders.\nAction to be taken if the call unwinds.\nThe imaginary cleanup block link. This particular path …\nAction to be taken if the inline assembly unwinds. This is …\nThe value to return.\nMarks its enclosing basic block with an ID that can be …\nUsed by <code>CoverageKind::BlockMarker</code> to mark blocks during …\nAssociates a branch region with separate counters for true …\nAssociates a normal region of code with a …\nMarks the point in MIR control flow represented by a …\nID of a mcdc condition. Used by llvm to check mcdc …\nID of a coverage counter. Values ascend from 0.\nMarks the point in MIR control flow represented by a …\nEnum that can hold a constant zero value, the ID of an …\nSummarizes coverage IDs inserted by the <code>InstrumentCoverage</code> …\nCoverage information for a function, recorded during MIR …\nID of a coverage-counter expression. Values ascend from 0.\nMarks the point in MIR control-flow represented by a …\nStores per-function coverage information attached to a …\nAssociates a branch region with separate counters for true …\nAssociates a decision region with a bitmap and number of …\nMarks a span that might otherwise not be represented in …\nMarks the point in MIR control flow represented by a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBranch spans generated by mcdc. Because of some limits …\nThe depth of the deepest decision is used to know how many …\n1 more than the highest-numbered <code>CoverageKind::BlockMarker</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrite a graphviz DOT graph of the MIR.\nWrite a graphviz DOT graph of a list of MIRs.\nABI-incompatible argument types.\nABI-incompatible return types.\nThe accessed pointer did not have proper alignment.\nThe address space (of the target) is full.\nUsed a pointer with bad alignment.\nFunctionality required for the bytes of an <code>Allocation</code>.\nWe have our own error type that does not know about the …\nThe information that makes up a memory access: offset and …\nThis type represents an Allocation in the Miri/CTFE core …\nAbort in case errors are already reported.\nOverflow in arithmetic that may not overflow.\nDetails of an access to uninitialized bytes / bad pointer …\nThe access occurred with a place that was based on a …\nA slice/array index projection went out-of-bounds.\nDetails of which pointer is not aligned.\nDetails of why a pointer had to be in-bounds.\nInterned types generally have an <code>Outer</code> type and an <code>Inner</code> …\nThe type of provenance in the compile-time interpreter. …\nA custom (free-form) fluent-translated error, created by …\nUsing an integer as a pointer in the wrong way.\nWorking with a local that is not currently live.\nTrying to access the data behind a function pointer.\nTrying to access the data behind a vtable pointer.\nSomething was divided by 0 (x / 0).\nSigned division overflowed (INT_MIN / -1).\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\n<code>Ok(Err(ty))</code> indicates the constant was fine, but the …\nAccessing an unsupported extern static.\nExtern type field with an indeterminate offset.\nAn error occurred during FnAbi computation: the passed –…\nThe alloc ID is used as a function pointer.\nAn allocation in the global (tcx-managed) memory can be …\nUniquely identifies one of the following:\nNone of the above – generic/unspecific inbounds test.\nA contiguous chunk of initialized or uninitialized memory.\nYields <code>InitChunk</code>s. See <code>InitMask::range_as_init_chunks</code>.\nThe raw bytes of a simple value.\nPackages the kind of error we got from the const code …\nThe compiler got an interrupt signal (a user ran out of …\nUsing a non-boolean <code>u8</code> as bool.\nUsing a non-character <code>u32</code> as character.\nUsing a pointer-not-to-a-function as function pointer.\nInvalid metadata in a wide pointer\nTrying to set discriminant to the niched variant, but the …\nThe program was invalid (ill-typed, bad MIR, not …\nError information for when the program we executed turned …\nUsing a string that is not valid UTF-8,\nThe tag of an enum does not encode an actual discriminant.\nUsing uninitialized data where it is not allowed.\nUsing uninitialized data where it is not allowed.\nUsing a pointer-not-to-a-vtable as vtable pointer.\nUsing a vtable for the wrong trait.\nAn error occurred during layout computation.\nError type for <code>tcx.lit_to_const</code>.\nInput argument for <code>tcx.lit_to_const</code>.\nStop execution for a machine-controlled reason. This is …\nA trait for machine-specific errors (or other “machine …\nThe alloc ID points to memory.\nWe are access memory.\nThere is not enough memory (on the host) to perform an …\nInformation about a misaligned pointer.\nSays whether the <code>offset</code> field of <code>Pointer</code>s with this …\nWe are doing pointer offset_from.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nOverwriting parts of a pointer; without knowing absolute …\nPartially overwriting a pointer.\nRepresents a pointer in the Miri engine.\nOverflowing inbounds pointer arithmetic.\nWe are doing pointer arithmetic.\nUsed a pointer outside the bounds it is valid for.\nUsing a pointer after it got freed.\nThis trait abstracts over the kind of provenance that is …\nA pointer.\nAttempting to read or copy parts of a pointer to somewhere …\nPartially copying a pointer.\nEncountered a pointer where we needed an integer.\nEncountered a pointer where we needed raw bytes.\nSomething was “remainded” by 0 (x % 0).\nSigned remainder overflowed (INT_MIN % -1).\nAlready reported an error for this evaluation, and the …\nThe program exhausted the interpreter’s resources …\nError information for when the program exhausted the …\nA <code>Scalar</code> represents an immediate, primitive value existing …\nInformation about a size mismatch.\nData size is not equal to target size.\nA scalar had the wrong size.\nShift by too much.\nSize of a <code>[T]</code> is too big\nThe stack grew too big.\nThe alloc ID points to a “lazy” static variable that …\nAccessing thread local statics\nSize of a DST is too big\nDon’t emit an error, the evaluation failed because the …\nResolution can fail if we are in a too generic context.\nThe literal’s inferred type did not match the expected <code>ty</code>…\nFree-form case. Only for errors that are never caught! …\nThe program caused undefined behavior.\nError information for when the program caused Undefined …\nAn uninhabited enum variant is projected.\nA discriminant of an uninhabited enum variant is written.\nUnreachable code was executed.\nUnsized local variables.\nFree-form case. Only for errors that are never caught! …\nThe program did something the interpreter does not support …\nError information for when the program did something that …\nReading a C string that does not end within its allocation.\nThis alloc ID points to a symbolic (not-reified) vtable. …\nValidation error.\nIf wildcard provenance is implemented, contains the …\nWriting to read-only memory.\nRange of the original memory access.\nAdd diagnostic arguments by passing name and value pairs …\nThe alignment of the allocation to detect unaligned reads. …\nFree-starting constructor for less syntactic overhead.\nGives direct access to the raw underlying storage.\nGives direct access to the raw underlying storage.\nRange of the bad memory that was encountered. (Might not …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe diagnostic message for this error\nExtra state for the machine.\nDetermines how a pointer should be printed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>AllocBytes</code> from a slice of <code>u8</code>.\nIf <code>OFFSET_IS_ADDR == false</code>, provenance must always be able …\nFor a constant or static, the <code>Instance</code> of the item itself. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the ‘join’ of provenance: what happens when …\nThe absolute value of the resultant constant.\n<code>true</code> if the allocation is mutable. Also used by codegen to …\nIf the constant is negative.\nThe index for promoted globals within their function’s …\nThe type of the constant.\nCreate a zeroed <code>AllocBytes</code> of the specified size and …\nThe vtable that was expected at the point in MIR that it …\nThe size of the memory range that was expected to be …\nThe size of the memory range that was expected to be …\nThe vtable that was actually referenced by the wide …\nThe vtable that was expected at the point in MIR that it …\nThe vtable that was actually referenced by the wide …\nSee module-level docs of <code>rustc_monomorphize::collector</code> on …\nExport the symbol from the DSO and apply overrides of the …\nThere will be exactly one instance of the given MonoItem. …\nHide the symbol outside of the defining DSO even when …\nDescribes how a monomorphization will be instantiated in …\nSpecifies the linkage type for a <code>MonoItem</code>.\nEach codegen unit containing a reference to the given …\nCollect items that are mentioned. The goal of this mode is …\nAuxiliary info about a <code>MonoItem</code>.\nExport the symbol from the DSO, but don’t apply …\nCollect items that are used, i.e., actually needed for …\nSpecifies the symbol visibility with regards to dynamic …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA cached copy of the result of <code>MonoItem::instantiation_mode</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA cached copy of the result of <code>MonoItem::size_estimate</code>.\nIn some compilation scenarios we may decide to take …\nThis struct represents a patch to MIR, which can add new …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWe just finished dumping the control flow graph. This is …\nWe just dumped the given statement or terminator.\nWe just dumped the terminator for a block but not the …\nWe are about to start dumping the given basic block.\nWe have not started dumping the control flow graph, but we …\nWe are just about to dump the given statement or …\nAn indication of where we are in the control flow graph. …\nCosmetic options for pretty-printing the MIR contents, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAttempts to open a file where we should dump a given MIR …\nDumps the size and metadata and content of an allocation …\nIf the session is properly configured, dumps a …\nIf the session is properly configured, dumps a …\nReturns the argument unchanged.\nWhether to include extra comments, like span info. From …\nCalls <code>U::from(self)</code>.\nThe <code>prefix</code> argument allows callers to add an arbitrary …\nFind all <code>AllocId</code>s mentioned (recursively) in the MIR body …\nWrite out a human-readable textual representation for the …\nWrite out a human-readable textual representation for the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDowncast to a particular variant of an enum or a …\nLets us plug in some additional logic and data into a …\nPostorder traversal of a graph.\nPreorder traversal of a graph.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTraversal of a <code>Body</code> that tries to avoid unreachable blocks …\n<code>MonoReachable</code> internally accumulates a <code>BitSet</code> of visited …\nPostorder traversal of a graph.\nPreorder traversal of a graph.\nReturns an iterator over all basic blocks reachable from …\nReturns a <code>BitSet</code> containing all basic blocks reachable …\nReverse postorder traversal of a graph.\nUser type annotation assertions for NLL.\nOutput operand of an inline assembly block.\nMutable borrow.\nDestination of a call.\nConsumed as part of an operand.\nAppears on <code>Deinit</code>\nBeing dropped.\nA fake borrow. FIXME: do we need to distinguish shallow …\nBeing inspected in some way, like loading a len.\nA type found at some location.\nConsumed as part of an operand.\nPlaceMention statement.\nUsed as base for another place, e.g., <code>x</code> in <code>x.y</code>. Will not …\nUsed as base for another place, e.g., <code>x</code> in <code>x.y</code>. Could …\n<code>&amp;raw const</code>.\n<code>&amp;raw mut</code>.\nRetagging, a “Stacked Borrows” shadow state operation\nThe return type of the function.\nAppears on <code>SetDiscriminant</code>\nShared borrow.\nEnding a storage live range.\nStarting a storage live range.\nAppears as LHS of an assignment.\nExtra information passed to <code>visit_ty</code> and friends to give …\nThe inferred type of a user type annotation.\nThe data of a user variable, for debug info.\nDestination of a yield.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is called for every constant in the MIR body and …\nThis is called for every constant in the MIR body and …\nThe index of the local variable we are visiting.\nThe source location where this local variable was declared.\nThe block that the location is within.\nprojection out of a place (access a field, deref a …\nProxy for <code>mir::BasicBlock</code>\nProxy for <code>hir::BodyId</code>\nProxy for <code>hir::def_id::CrateNum</code>\nProxy for <code>def_id::DefId</code>\nProxy for <code>def_id::DefIndex</code>\nProxy for <code>hir::HirId</code>\nProxy for <code>hir::ItemLocalId</code>\nProxy for <code>def_id::LocalDefId</code>\nProxy for <code>mir::Location</code>\nProxy for <code>hir_id::OwnerHid</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a struct that is a proxy for a Rustc index type.\nGenerates a struct that is a proxy for a Rustc type.")