searchState.loadedDescShard("brownstone", 0, "<code>brownstone</code> is a library for building fixed-size arrays. It …\nBuild an array with an expression.\nA low level builder type for creating fixed size arrays. …\nA misuse-immune array builder. See <code>ArrayBuilder</code> for …\nLow-level builder type for <code>[T; N]</code> arrays. Uses a <code>push</code> + …\nError type returned from <code>ArrayBuilder::try_push</code>, …\nResult type returned from <code>ArrayBuilder::push</code>, indicating …\nReturn the fully initialized array.\nReturn the fully initialized array without checking that it…\nGet the slice of the array that has already been …\nGet the mutable slice of the array that has already been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if no elements in the array are initialized.\nReturns true if every element in the array is initialized. …\nReturns the number of initialized elements in the array.\nCreate a new, empty <code>ArrayBuilder</code>.\nAdd an initialized element to the array. Returns a …\nAdd an initialized element to the array, without …\nTry to return the fully initialized array. Returns the …\nTry to add an initialized element to the array. Returns an …\nMisuse-immune array builder\nThe result of pushing to an <code>ArrayBuilder</code>. If the push …\nGet the slice of the array that has already been …\nGet the mutable slice of the array that has already been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no initialized elements in the …\nReturns the number of initialized elements in the array. …\nAdd a new initialized element to the array. If this causes …\nCreate a new <code>ArrayBuilder</code>. If <code>N == 0</code>, immediately return …")