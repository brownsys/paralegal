searchState.loadedDescShard("paralegal_flow", 0, "Ties together the crate and defines command line options.\nTop level argument structure. This is only used for …\nAdditional configuration for the build process/rustc\nDependency specific configuration\nA struct so we can implement <code>rustc_plugin::RustcPlugin</code>\nCollection of the <code>DumpOption</code>s a user has set.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nAn interned string.\nThis argument doesn’t do anything, but when cargo …\nAbort the compilation after finishing the analysis\nData-and control flow analyzer and inliner.\nAdditional arguments that control the flow analysis …\nTarget this function as analysis target. Command line …\nCommand line arguments and parsing.\nThe actual arguments\nMake the compiler attach to a debugger\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nAdditional configuration for the build process/rustc\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nAdditional options for cargo\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nHelpers for debugging\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nDependency specific configuration\nVisits the values representing the difference, i.e., the …\nMIR visitor (<code>CollectingVisitor</code>) that populates the […\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements as an iterator. …\nAdditional arguments that control debug output specifically\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nA JSON file from which to load additional annotations. …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if a …\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nAlso adds and additional features required by the …\nA select list of non-workspace crates which should be …\nReturns a reference to the value corresponding to the …\nDisables all recursive analysis (both paralegal_flow’s …\nInserts a key-value pair into the map.\nAdds a value to the set.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nAdditional arguments on marker assignment and discovery\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nEmit warnings instead of aborting the analysis on sanity …\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nWhere to write the resulting forge code to (defaults to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nAdditional rust features to enable\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nConveniently create a vector of <code>Symbol</code>s. This way you can …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTarget a specific package\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nUtility functions, general purpose structs and extension …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nPrint additional logging output (up to the “info” …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nThe interpretation of marker placement as it pertains to …\nRead-only database of information the analysis needs.\nMain analysis driver. Essentially just calls …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreate an <code>InstructionInfo</code> record for each <code>GlobalLocation</code> …\nCreate a <code>TypeDescription</code> record for each marked type that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerform the analysis for one <code>#[paralegal_flow::analyze]</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven the PDGs and a record of all <code>DefId</code>s we’ve seen, …\nChecks the invariant that <code>SPDGGenerator::collect_type_info</code> …\nA higher order function that increases the logging level …\nStructure responsible for converting one <code>DepGraph</code> into an …\nResolution of <code>CallString</code>s to [<code>FnResolution</code>]s.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreate an initial flowistry graph for the function …\nSame as the ID stored in self.target, but as a local def id\nThe flowistry graph we are converting\nDetermine the set if nodes corresponding to the inputs to …\nReconstruct the type for the data this node represents.\nTry to find the node corresponding to the values returned …\nIs the top-level function (entrypoint) an <code>async fn</code>\nFind the statement at this location or fail.\nReturns the argument unchanged.\nThe parent generator\nIf <code>did</code> is a method of an <code>impl</code> of a trait, then return the …\nCheck if this node is of a marked type and register that …\nMapping from old node indices to new node indices. Use …\nCalls <code>U::from(self)</code>.\nWhere we write every <code>DefId</code> we encounter into.\nConsume the generator and compile the <code>SPDG</code>.\nThis initializes the fields <code>spdg</code> and <code>index_map</code> and should …\nGet the id of the new node that was registered for this …\nInitialize a new converter by creating an initial PDG …\nFind direct annotations on this node and register them in …\nFetch annotations item identified by this <code>id</code>.\nInsert this node into the converted graph, return it’s …\nThe converted graph we are creating\nInformation about the function this PDG belongs to\nSimilar to <code>CallString::is_at_root</code>, but takes into account …\nReturn the (sub)types of this type that are marked.\nA map of which nodes are of which (marked) type. We build …\nCached resolution of <code>CallString</code>s to <code>Instance</code>s.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTries to resolve to the monomophized function in which …\nThis resolves the monomorphized function <em>being called at</em> …\nAbstract the call via type signature\nConstruct a graph for the called function and merge it\nThe interpretation of marker placement as it pertains to …\nDescribes the type of inlining to perform\nA check for the abstraction safety of a given instance.\nUse a stub instead of the call\nMain entry point for the check\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEmit errors if <code>true</code>, otherwise emit warnings\nEmit an error or a warning with some preformatted …\nEmit an error that mentions the <code>markers</code> found\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhy a call we check wasn’t inlined\nInstance under scrutiny\nShould we perform inlining on this function?\nTypes of annotations we support.\nA marker annotation and its refinements.\nRefinements in the marker targeting. The default (no …\nDisaggregated version of <code>MarkerRefinement</code>. Can be added to …\nThese are pseudo-constants that are used to match …\nIf this is an <code>Annotation::Exception</code>, returns the …\nIf this is an <code>Annotation::Marker</code>, returns the underlying …\nIf this is an <code>Annotation::OType</code>, returns the underlying …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCentral repository for information about markers (and …\nA visit over the HIR that collects all the marker …\nThe default, empty aggregate refinement …\nThis will match the annotation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the enum is Annotation::Exception …\nReturns true if the enum is Annotation::Marker otherwise …\nReturns true if the enum is Annotation::OType otherwise …\nThis will match the annotation …\nThe (unchanged) name of the marker as provided by the user\nThis will match the annotation …\nMerge the aggregate refinement with another discovered …\nGet the refinements on arguments\nIs this refinement targeting the return value?\nTrue if this refinement is empty, i.e. the annotation is …\nThis will match the annotation …\n<code>nom</code>-based parser-combinators for parsing the token stream …\nThe value of the verification hash we found in the …\nThe marker context is a database which can be queried as …\nThe structure inside of <code>MarkerCtx</code>.\nEither we have an <code>Instance</code> or a <code>DefId</code> if we weren’t able …\nIterate over all discovered annotations, whether local or …\nAll markers placed on this function, directly or through …\nAll the markers applied to this type and its subtypes.\nCache for parsed local annotations. They are created with […\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAll markers reachable for this item (local and external).\nIf the transitive marker cache did not contain the answer, …\nConfiguration options\nFor async handling. If this id corresponds to an async …\nDirect access to the loaded database of external markers.\nRetrieves any external markers on this item. If there are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueries the transitive marker cache.\nConstruct a new database, loading external markers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAre there any external markers on this item?\nAre there any local markers on this item?\nAre there any markers (local or external) on this item?\nAre there markers reachable from this (function)?\nCache whether markers are reachable transitively.\nGiven the TOML of external annotations we have parsed, …\nRetrieves the local annotations for this item. If no such …\nReturn a complete set of local annotations that were …\nDoes this terminator carry a marker?\nContains the error value\nJust a newtype-wrapper for <code>CursorRef</code> so we can implement …\nContains the success value\nParser for a [<code>LabelAnnotation</code>]\nThe symbol <code>arguments</code> which we use for refinement in a …\nParse the <code>arguments</code> refinement.\nExpect the next token to be an identifier with the value <code>s</code>\nExpect the next token to have the token kind <code>k</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nParse a <code>TokenTree::Delimited</code> with the delimiter character …\nThis only exists so we can use the standard <code>nom::Err</code>. A …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCanonical constructor for <code>I</code>\nParse an identifier. Identifiers in annotations are …\nParse an integer literal and return the integer.\nParse bracket-delimited, comma-separated integers, e.g. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a <code>TokenKind::Literal</code> if it has a specific <code>LitKind</code> …\nParser for an <code>ExceptionAnnotation</code>\nParse any one token, returning the token.\nParse a single token that is not a subtree and return the …\nParser for the payload of the …\nA parser for annotation refinements.\nThe symbol <code>return</code> which we use for refinement in a …\nThe symbol <code>verification_hash</code> which we use for refinement …\nInline so long as markers are reachable + k steps\nDump everything we know of\nAdditional configuration for the build process/rustc\nArguments that control the flow analysis\nArguments as exposed on the command line.\nThe CodeLLDB debugger. Learn more at …\nDependency specific configuration\nLogging for this level is not directly enabled\nCollection of the <code>DumpOption</code>s a user has set.\nA simple PDG rendering per controller provided by flowistry\nPerform inlining until depth k\nHow a specific logging level was configured. (currently …\nDump the MIR (<code>.mir</code>) of each called controller\nA PDG rendering that includes markers and is grouped by …\nReplaces the result of a call to a higher-order function …\nReplaces the result of a higher-order future by an input …\nLogging for this level is only enabled for a specific …\nInline to arbitrary depth\nAbort the compilation after finishing the analysis\nAbort the compilation after finishing the analysis\nAccess the argument controlling the analysis\nAdditional arguments that control the flow analysis …\nAdditional arguments that control the flow analysis …\nTarget this function as analysis entrypoint. Command line …\nTarget this function as analysis target. Command line …\nPerforms the effects of this model on the provided …\nMake the compiler attach to a debugger\nAttach to a debugger before running the analyses\nAdditional configuration for the build process/rustc\nAdditional options for cargo\nPass through for additional cargo arguments (like –…\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nAccess the debug arguments\nPrint additional logging output (up to the “debug” …\nDependency specific configuration\nReturns the configuration specified for the <code>--debug</code> option\nAdditional arguments that control debug output specifically\nAdditional arguments that control debug args specifically\nGenerate intermediate of various formats and at various …\nA thin wrapper around <code>std::env::var</code> that returns <code>None</code> if …\nA JSON file from which to load additional annotations. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLimit the set of crates to analyze. Beware that if those …\nA select list of non-workspace crates which should be …\nDisables all recursive analysis (both paralegal_flow’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the enum is InliningDepth::Adaptive …\nReturns true if the enum is InliningDepth::K otherwise …\nReturns true if the enum is InliningDepth::Unconstrained …\nAdd an additional k inlining steps on top of what the …\nAdditional arguments on marker assignment and discovery\nAdditional arguments which control marker assignment and …\nDo not decide whether to represent a function in the PDG …\nLimits the PDG to a single function. This is intended for …\nWarn instead of crashing the program in case of non-fatal …\nEmit warnings instead of aborting the analysis on sanity …\nEmit warnings instead of aborting the analysis on sanity …\nthe file to write results to\nWhere to write the resulting forge code to (defaults to …\nWhere to write the resulting GraphLocation (defaults to …\nAdditional rust features to enable\nExternally (via command line) selected analysis targets\nEmit errors instead of warnings for potential soundness …\nTarget a specific package\nRun paralegal only on this crate\nAre we recursing into (unmarked) called functions with the …\nPrint additional logging output (up to the “info” …\nShould we output additional log messages (level <code>info</code>)\nPrint additional logging output (up to the “info” …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmit an errror or a warning if relaxed.\nAll locations that a body has (helper)\nValues of this type can be matched against Rust attributes\nThis visitor traverses the items in the analyzed crate to …\nA function we will be targeting to analyze with […\nThis will match the annotation <code>#[paralegal_flow::analyze]</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunctions that are annotated with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAfter running the discovery with …\nGive me a name that describes this function.\nCommand line arguments.\nDriver function. Performs the data collection via visit, …\nDoes the function named by this id have the …\nReference to rust compiler queries.\nFinds the functions that have been marked as targets.\nHow long it took to convert the flowistry graph to a …\nHow long the flowistry PDG cosntruction took in total.\nHow long it took to collect and dump the MIR\nHow long the rust compiler ran before our plugin got …\nHow long it took to serialize the SPDG\nStatsistics that are counted as durations\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtension trait for function calls (e.g. …\nThis exists to distinguish different types of functions, …\nBrother to <code>IntoLocalDefId</code>, converts the id type to a <code>DefId</code> …\nA trait for types that can be converted into a […\nThis is meant as an extension trait for <code>ast::Attribute</code>. …\nExtension trait for <code>hir::Node</code>. This lets up implement …\nExtension trait for <code>Place</code>s so we can implement methods on …\nA struct that can be used to apply a <code>FnMut</code> to every <code>Place</code> …\nCreate a hash for this object that is no longer than six …\nA simplified version of the argument list that is stored …\nA bit-set implemented with a <code>u16</code>, supporting domains up to …\nExtension trait for <code>ty::Ty</code>. This lets us implement methods …\nTry and unwrap this <code>node</code> as some sort of function.\nGeneric arguments can reference non-type things (in …\nThis function exists to deal with <code>#[tracing::instrument]</code>. …\nUnsets the <code>index</code>th bit.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns if the <code>index</code>th bit is set.\nHow many bits are set to <code>true</code>?\nExtract a <code>DefId</code> if this type references an object that has …\nCreate a struct with a pretty <code>Display</code> implementation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reasonable, but not guaranteed unique name for this …\nA new bit set that contains elements that are both in <code>self</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all set indices that are within the domain …\nIs the set empty?\nSimilar to <code>Self::contains</code> but in the case of an <code>index</code> …\nReturns whether this method is expected to have a body we …\nIf the provided symbol path matches the path segments in …\nCheck that this attribute matches the provided path. All …\nNon-panicking version of <code>mir::Body::stmt_at</code> with …\nConstructor\nCreates a new, empty bitset.\nSets the <code>index</code>th bit.\nSets the <code>i</code>th to <code>j</code>th bits.\nGet the most precise type signature we can for this …\nSame as <code>mir::Body::stmt_at</code> but throws descriptive errors.\nTry and normalize the provided generics.\nReturns the domain size of the bitset.\nWrite all elements from <code>it</code> into the formatter <code>fmt</code> using <code>f</code>, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrite all elements from <code>it</code> into the formatter <code>fmt</code> using <code>f</code>, …\nContains the error value\nContains the success value\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nMain algorithm lifted from <code>clippy_utils</code>. I’ve made …\nA small helper wrapper around <code>def_path_res</code> that represents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")