searchState.loadedDescShard("paralegal_spdg", 0, "This crate defines the program dependence graph (PDG) …\nStatistics about a single run of paralegal-flow\nThis mutation is a non-function assign\nA location within the global call-graph.\nThe function corresponding to a closure\nThe source controls the execution of the target\nEndpoints with their SPDGs\nAn enum constructor that was called via a higher-order …\nThe target can read data created by the source\nExported information from rustc about what sort of object …\nSimilar to <code>DefKind</code> in rustc but <em>not the same</em>!\nA structure with a <code>Display</code> implementation that shows …\nProvides a way to format rust paths\nMetadata for an edge in the <code>SPDGImpl</code>\nThe type of an edge\nThe end of the body, after all possible return statements.\nThe types of identifiers that identify an entrypoint\nName of the file used for emitting the serialized …\nA regular function object\nIdentifiers for functions\nA function call\nMetadata on a function call.\nThe function corresponding to a generator\nThe global version of an edge that is tied to some …\nA <code>RichLocation</code> within a specific point in a codebase.\nA globally identified node in an SPDG\nReturn type of <code>IntoIterGlobalNodes::iter_global_nodes</code>.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nAn identifier for any kind of object (functions, markers, …\nInformation about an instruction represented in the PDG\nThe type of instructions we may encounter\nThis lets us be agnostic whether a primitive (such as …\nThe iterator returned by <code>Self::iter_nodes</code>\nThe point <em>after</em> a location in a body.\nA marker annotation and its refinements.\nA mutable argument was modified by a function call\nLocal nodes in an <code>SPDGImpl</code>\nNode metadata in the <code>SPDGImpl</code>\nThe annotated program dependence graph.\nA function returned, assigning to it’s return destination\nThe merged exit points of a function\nExtends a MIR body’s <code>Location</code> with <code>Start</code> (before the …\nA semantic PDG, e.g. a graph plus marker annotations\nThe graph portion of an <code>SPDG</code>\nStatistics about the code that produced an SPDG\nExtension for output files containing statistics of the …\nCreate a hash for this object that is no longer than six …\nA wrapper that guarantees to be the same size as <code>T</code> and …\nAn interned <code>SourceFileInfo</code>\nInformation about a source file\nAdditional information about the source of data.\nEncodes a source code location\nA “point” within a source file. Used to compose and …\nThe start of the body.\nThe beginning of a function\nSome type of statement\nAdditional information about this mutation.\nA basic block terminator, usually switchInt\nA bit-set implemented with a <code>u16</code>, supporting domains up to …\nA type\nMetadata about a type\nIdentifiers for types\ninformation about each encountered type.\nHolds <code>TypeId</code>s that were assigned to a node.\nAbsolute path to source code file\nGather all <code>CallString</code>s that are mentioned in this program …\nGather all data sources that are mentioned in this program …\nGather all <code>Node</code>s that are mentioned in this controller …\nA function that is fit to be handed to …\nA function fit to be handed to <code>#[allocative(visit = &quot;...&quot;)]</code>…\nNumber of functions that correspond to […\nThe number of lines we ran through the PDG construction. …\nThe arguments of this spdg. The same as the <code>arguments</code> …\nThe nodes that represent arguments to the entrypoint\nIf this identifies a function call, return the information …\nReturns the <code>Location</code> in <code>self</code>, returning <code>None</code> otherwise.\nReturns the underlying string from an identifier.\nLocation of the node in the call stack\nWhere in the program this edge arises from\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the call string minus the leaf. Returns <code>None</code> if …\nRead <code>self</code> using the configured serialization format\nRead the stats from a file using the default encoding …\nWrite <code>self</code> using the configured serialization format\nWrite the stats to a file using the default encoding (json)\nReturns the number of elements the map can hold without …\nReturns the number of elements the set can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nColumn of the line\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nHow long it took to create this PDG\nIs <code>other</code> completely contained within <code>self</code>\nReturns <code>true</code> if the set contains a value.\nReturns <code>true</code> if the map contains a value for the specified …\nThe controller id all of these nodes are located in.\nThe identifier for the SPDG this node is contained in\nThe id of the controller that this edge is located in\nEntry points we analyzed and their PDGs\nHow long it took to calculate markers and otherwise set up …\nReturns an iterator over all the data sinks in the …\nMetadata about the <code>DefId</code>s\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nHow long we spent on dependencies\nTextual rendering of the MIR\nThe debug print of the <code>mir::Place</code> that this node represents\nVisits the values representing the difference, i.e., the …\nDisplay SPDGs as dot graphs\nClears the map, returning all key-value pairs as an …\nClears the set, returning all elements as an iterator. …\nDump this graph in dot format.\nTime spent dumping MIR\nAn iterator over all edges in this graph.\nEnding coordinates of the span,\nGets the given key’s corresponding entry in the map for …\nGets the given value’s corresponding entry in the set …\nA convenience method for gathering multiple node(cluster)s …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which uses a closure to determine if a …\nPrintable location of the source code file - either an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new globally identified node by pairing a node …\nThe function containing the location.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value in the set, if any, that …\nReturns the key-value pair corresponding to the supplied …\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nThe PDG\nCalculate a hash for this object\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the set’s <code>BuildHasher</code>.\nWhat is the ID of the item that was called here.\nThe id\nReturns a reference to the value corresponding to the …\nHow many times we inlined functions. This will be higher …\nInserts a key-value pair into the map.\nAdds a value to the set.\nMetadata about the instructions that are executed at all …\nIntern the source file\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator, that is, one that moves each …\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nReturns true if the enum is SourceUse::Argument otherwise …\nReturns true if the enum is TargetUse::Assign otherwise …\nReturns true if the enum is DefKind::Closure otherwise …\nSame as <code>self.kind.is_control()</code>\nReturns true if the enum is EdgeKind::Control otherwise …\nReturns true if the enum is DefKind::Ctor otherwise false\nSame as <code>self.kind.is_data()</code>\nReturns true if the enum is EdgeKind::Data otherwise false\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the map contains no elements.\nReturns <code>true</code> if the set contains no elements.\nReturns true if this is an <code>End</code> location.\nReturns true if the enum is DefKind::Fn otherwise false\nReturns true if the enum is InstructionKind::FunctionCall …\nReturns true if the enum is DefKind::Generator otherwise …\nHas this call been inlined\nReturns true if the enum is TargetUse::MutArg otherwise …\nReturns true if the enum is SourceUse::Operand otherwise …\nReturns true if the enum is TargetUse::Return otherwise …\nReturns true if the enum is InstructionKind::Return …\nReturns true if this is a <code>Start</code> location.\nReturns true if the enum is InstructionKind::Start …\nReturns true if the enum is InstructionKind::Statement …\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns true if the enum is InstructionKind::Terminator …\nReturns true if the enum is DefKind::Type otherwise false\nReturns an iterator over the locations in the call string, …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order. The …\nReturns an iterator over the locations in the call string, …\nIterate all nodes as globally identified one’s.\nAn iterator visiting all key-value pairs in arbitrary …\niterate over the local nodes\nAn iterator visiting all keys in arbitrary order. The …\nKind of object\nClassification of the instruction\nWhat type of edge it is\nReturns the leaf of the call string (the currently-called …\nReturns the number of elements in the map.\nReturns the number of elements in the set.\nLine in the source file\nHow many lines this span spans\nThe local node in the SPDG\nThe location of an instruction in the function, or the …\nThe (unchanged) name of the marker as provided by the user\nHow many marker annotations were found\nMarker annotations on this item\nAttached markers. Guaranteed not to be empty.\nNodes to which markers are assigned.\nName of the object. Usually the one that a user assigned, …\nThe identifier of the entry point to this computation\nCreate a new call string from a list of global locations.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nIntern a new identifier from a rustc <code>rustc::span::Symbol</code>\nConstructor\nInterns the input string into an identifier.\nCollections of nodes in a single controller\nRetrieve metadata for this node\nAll types (if any) assigned to this node\nGet the refinements on arguments\nThe annotation should apply to these arguments\nIs this refinement targeting the return value?\nThe annotation should apply to the return value\nTrue if this refinement is empty, i.e. the annotation is …\nGet a node from this cluster. No guarantees are made as to …\nAliases\nDef path to the object\nThe module path to this controller function\nThe number of functions we produced a PDG for\nThe lines of code corresponding to the functions from …\nSplit the leaf (the current instruction) from the caller …\nRender the node in extended format\nAdds a new call site to the end of the call string.\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nRemoves a value from the set. Returns whether the value was\nRemoves a key from the map, returning the stored key and …\nHow rustc would debug print this type\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nIf the return is <code>()</code> or <code>!</code> then this is <code>None</code>\nExports either rustc identifiers or their proxies …\nProxies for Rustc types used within the PDG.\nHow long rustc ran before out plugin executed\nThe number of functions we produced PDGs for or we …\nThe lines of code corresponding to the functions from …\nTotal time used for the last analzyer run\nCanonical serialziation to use. This is so that …\nHow long did it take to serialize the graphs\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nShrinks the capacity of the set as much as possible. It …\nRender the node in simple format\nCreate an initial call string for the single location <code>loc</code>.\nWhich file this comes from\nWhy the source of this edge is read\nThe source code span\nSpan information for this node\nInformation about the span\nStarting coordinates of the span\nStatistics\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nWhy the target of this edge is written\nSerialization that is readable. Serializes the set as a …\nCollect the iterator into a cluster\nUtilities for traversing an SPDG\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nhow long the rust typechecker took\nStores the assignment of relevant (e.g. marked) types to …\nMetadata about types\nVisits the values representing the union, i.e., all the …\nThe number of unique functions that became part of the …\nThe number of unique lines of code we generated a PDG for. …\nCreate a new node with no guarantee that it exists in the …\nReturns the <code>Location</code> in <code>self</code>, panicking otherwise.\nUtility functions and structs\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nCreates a new empty hash set which will use the given …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDump all SPDGs in a single dot expression\nDump the SPDG for one select controller in dot format\nDump a selection of controllers into a dot expression.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOwned iterator of a <code>NodeCluster</code>\nIterate over a node cluster but yielding <code>GlobalNode</code>s\nA globally identified set of nodes that are all located in …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nController that these nodes belong to\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate nodes borrowing <code>self</code>\nCreate a new cluster. This for internal use.\nNodes in this cluster\nAttempt to collect an iterator of nodes into a cluster\nThe block that the location is within.\nprojection out of a place (access a field, deref a …\nProxy for <code>mir::BasicBlock</code>\nProxy for <code>hir::BodyId</code>\nProxy for <code>hir::def_id::CrateNum</code>\nProxy for <code>def_id::DefId</code>\nProxy for <code>def_id::DefIndex</code>\nProxy for <code>hir::HirId</code>\nProxy for <code>hir::ItemLocalId</code>\nProxy for <code>def_id::LocalDefId</code>\nProxy for <code>mir::Location</code>\nProxy for <code>hir_id::OwnerHid</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA magic hash number used to verify version compatibility …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA bit-set implemented with a <code>u16</code>, supporting domains up to …\nUnsets the <code>index</code>th bit.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns if the <code>index</code>th bit is set.\nHow many bits are set to <code>true</code>?\nCreate a struct with a pretty <code>Display</code> implementation for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nA new bit set that contains elements that are both in <code>self</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all set indices that are within the domain …\nIs the set empty?\nSimilar to <code>Self::contains</code> but in the case of an <code>index</code> …\nCreates a new, empty bitset.\nSerialization that is readable. Serializes the set as a …\nSets the <code>index</code>th bit.\nSets the <code>i</code>th to <code>j</code>th bits.\nReturns the domain size of the bitset.\nSee module level documentation\nSee module level documentation\nSee module level documentation\nSee module level documentation\nConsider both data and control flow edges in any …\nConsider only edges with <code>crate::EdgeKind::Control</code>\nConsider only edges with <code>crate::EdgeKind::Data</code>\nWhich type of edges should be considered for a given …\nThe current policy for this iterator is that it does not …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nIs this edge kind admissible?\nCreate a graph adaptor that implements this edge selection.\nReturns the argument unchanged.\nA primitive that queries whether we can reach from one set …\nBase function for implementing influencees\nBase function for implementing influencers\nCalls <code>U::from(self)</code>.\nReturns true if the enum is EdgeSelection::Both otherwise …\nReturns true if the enum is EdgeSelection::Control …\nReturns true if the enum is EdgeSelection::Data otherwise …\nDoes this selection admit edges of type …\nDoes this selection admit edges of type …\nHas a <code>Display</code> implementation if the elements of the …\nA struct with a <code>Display</code> implementation taht renders a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDisplay this iterator as a list\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize a <code>HashMap</code> by converting it to a <code>Vec</code>, lifting …\nWrite all elements from <code>it</code> into the formatter <code>fmt</code> using <code>f</code>, …\nDeserialize a <code>HashMap</code> by first deserializing a <code>Vec</code> of …\nSerialize a <code>HashMap</code> by first converting to a <code>Vec</code> of tuples …")