searchState.loadedDescShard("serde_bare", 0, "serde_bare\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns Error::AnyUnsupported.\nBARE type: bool\nBARE type: data\nBARE type: data\nBARE type: u32\nBARE type: f32\nBARE type: f64\nBARE type: data&lt;16&gt;\nBARE type: i16\nBARE type: i32\nBARE type: i64\nBARE type: i8\nDeserialize the enum discriminant as a BARE Uint\nReturns Error::AnyUnsupported.\nBARE type: map[T]U\nBARE type: void\nBARE type: optional\nBARE type: []T\nBARE type: string\nBARE type: string\nBARE type: struct\nBARE type: [len]T Deserializing fewer elements than <code>len</code> is …\nBARE type: struct <code>name</code> is ignored. Deserializing fewer …\nBARE type: data&lt;16&gt;\nBARE type: u16\nBARE type: u32\nBARE type: u64\nBARE type: u8\nBARE type: void\nBARE type: void\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns false.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the category is <code>Data</code>.\nReturns <code>true</code> if the category is <code>Eof</code>.\nReturns <code>true</code> if the category is <code>Io</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns false.\nBARE type: bool\nBARE type: data\nBARE type: u32\nBARE type: f32\nBARE type: f64\nBARE type: data&lt;16&gt;\nBARE type: i16\nBARE type: i32\nBARE type: i64\nBARE type: i8\nBARE type: map[T]U Error::MapLengthRequired if len is None\nBARE type: T <code>name</code> is ignored.\nBARE type: { uint, T } or (… | T | …) <code>name</code> and <code>variant</code> …\nBARE type: optional&lt;type&gt;\nBARE type if len is Some: []type BARE type [len]type is …\nBARE type: optional&lt;type&gt;\nBARE type: string\nBARE type: struct\nBARE type: { uint, T } or (… | T | …)\nBARE type: [len]type <code>len</code> is ignored.\nBARE type: struct <code>name</code> and <code>len</code> are ignored.\nBARE type: { uint, T } or (… | T | …) <code>name</code>, <code>variant</code>, …\nBARE type: data&lt;16&gt;\nBARE type: u16\nBARE type: u32\nBARE type: u64\nBARE type: u8\nBARE type: void\nBARE type: void\nBARE type: uint or (… | void | …) <code>name</code> and <code>variant</code> are …")