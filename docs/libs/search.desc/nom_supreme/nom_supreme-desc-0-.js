searchState.loadedDescShard("nom_supreme", 0, "A collection of excellent utilities for nom, including:\nEnhanced context combinator for nom.\nAn error type, <code>ErrorTree</code>, designed to retain much more …\nEntry point layer into nom parsers. See <code>final_parser</code> for …\nPerfected looping parsers designed to behave more reliably …\nExtensions to the nom <code>Parser</code> trait which add postfix …\nEnhanced tag parser for nom.\nUpdated version of <code>nom::error::ContextError</code>. Allows for …\nCreate a new error from an input position, a context, and …\nAn ASCII letter (<code>[a-zA-Z]</code>) was expected.\nAn alphanumeric character (<code>[0-9a-zA-Z]</code>) was expected.\nA series of parsers were tried at the same location (for …\nA series of parsers were tried at the same location (for …\nA specific error event at a specific location. Often this …\nA specific error event at a specific location. Often this …\nThese are the different specific things that can go wrong …\nA specific character was expected.\nThe <code>context</code> combinator attached a message as context for a …\n<code>&quot;\\r\\n&quot;</code> was expected.\nA decimal digit (<code>[0-9]</code>) was expected.\nEof was expected.\nA comprehensive tree of nom errors describing a parse …\nEnum for generic things that can be expected by nom parsers\nSomething specific was expected, such as a specific …\nAn error outside of nom occurred during parsing; for …\nGeneric version of <code>ErrorTree</code>, which allows for arbitrary …\nA hexadecimal digit (<code>[0-9a-fA-F]</code>) was expected.\nA nom parser failed.\nA nom combinator attached an <code>ErrorKind</code> as context for a …\nA space, tab, newline, or carriage return was expected.\nAn octal digit (<code>[0-7]</code>) was expected.\nExpected something; ie, not Eof.\nA space or tab was expected.\nA stack indicates a chain of error contexts was provided. …\nA stack indicates a chain of error contexts was provided. …\nContext that can appear in a stack, above a base <code>ErrorTree</code>…\nA tag was expected.\nCombine an existing error with a new one. This is how …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an error indicating an expected character at a …\nCreate a new error at the given position. Interpret <code>kind</code> …\nCreate an error from a given external error, such as from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert all of the locations in this error using some kind …\nCombine two errors from branches of alt. If either or both …\nThe original error\nThe stack of contexts attached to that error\nThe specific error that occurred\nThe location of this error in the input\nThe original error\nThe stack of contexts attached to that error\nThe specific error that occurred\nThe location of this error in the input\nA byte offset into the input where an error may have …\nTrait for recombining error information with the original …\nA location in a string where an error may have occurred. …\nTrait for types which represent an absolute location of a …\nThe column of the line in the original input where the …\nGiven the context attached to a nom error, and given the …\nBootstrapping layer for a nom parser.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line number in the original input where the error …\nGiven the <em>original</em> input string, as well as the context …\nGiven the <em>original</em> input, as well as the context reported …\nParse a series of 1 or more things, separated by <code>separator</code>…\nParse a series of 1 or more things, separated by <code>separator</code>…\nParse a series of 1 or more things, separated by some …\nParser which returns an error if the subparser didn’t …\nParser which parses an array by running a subparser in a …\nParser which returns an error if the subparser returned …\nParser which attaches additional context to any errors …\nParser which returns a <code>Failure</code> if the subparser returned …\nParser which gets and discards a delimiting value both …\nParser which parses something via <code>FromStr</code>, using a …\nParser which parses something via <code>FromStr</code>, using a …\nParser which runs a fallible mapping function on the …\nParser which runs a fallible mapping function on the …\nParser which returns failure if the subparser succeeds, …\nParser which wraps the subparser output in an <code>Option</code>, and …\nParser which gets an optional output from a prefix …\nAdditional postfix parser combinators, as a complement to …\nParser which runs a subparser but doesn’t consume any …\nParser which gets and discards an output from a prefix …\nParser which, when successful, discards the output of the …\nParser wrapping a mutable reference to a subparser.\nParser which replaces errors coming from the inner parser.\nParser which parses an array by running a subparser in a …\nParser which gets and discards an output from a second …\nParser which, when successful, discards the output of the …\nParser which checks the output of its subparser against a …\nParser which, when successful, returns the result of the …\nCreate a parser that must consume all of the input, or …\nCreate a parser that parses a fixed-size array by running …\nBorrow a parser. This allows building parser combinators …\nCreate a parser that transforms <code>Incomplete</code> into <code>Error</code>.\nAdd some context to the parser. This context will be added …\nCreate a parser that transforms <code>Error</code> into <code>Failure</code>. This …\nMake this parser delimited, requiring a <code>delimiter</code> as both …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a parser that applies a mapping function <code>func</code> to …\nCreate a parser that applies a mapping function <code>func</code> to …\nMake this parser a negative lookahead: it will succeed if …\nMake this parser optional; if it fails to parse, instead …\nMake this parser optionally preceded by another one. The …\nMake this parser optionally precede by another one. <code>self</code> …\nCreate a parser that parses something via <code>FromStr</code>, using …\nCreate a parser that parses something via <code>FromStr</code>, using …\nMake this parser peeking: it runs normally but consumes no …\nMake this parser preceded by another one. The <code>prefix</code> will …\nMake this parser precede another one. The successor parser …\nReplace this parser’s output with the entire input that …\nCreate a parser that parses a fixed-size array by running …\nAdd a terminator parser. The terminator will run after …\nReplace this parser’s output with a clone of <code>value</code> every …\nRequire the output of this parser to pass a verifier …\nReturn the parsed value, but also return the entire input …\nSimilar to <code>FromExternalError</code> and <code>ContextError</code>, this trait …\nComplete input version of enhanced <code>tag</code> parsers\nCreate an error from an expected tag at a location.\nAs above, but for a case insensitive tag. By default this …\nStreaming version of enhanced <code>tag</code> parsers.\nParser recognizing a fixed pattern, called a tag. If the …\nParser recognizing a fixed pattern, called a tag. If the …\nParser recognizing a fixed pattern, called a tag. If the …\nParser recognizing a fixed pattern, called a tag. If the …")