searchState.loadedDescShard("indent_write", 0, "Simple indentation adapters for <code>io::Write</code>, <code>fmt::Write</code>, and …\nAdapter for writers to indent each line\nReturns the argument unchanged.\nGet a reference to the wrapped writer\nGet the string being used as an indent for each line\nCalls <code>U::from(self)</code>.\nExtract the writer from the <code>IndentWriter</code>, discarding any …\nCreate a new <code>IndentWriter</code>.\nCreate a new <code>IndentWriter</code> which will not add an indent to …\nMethods for adapting <code>Display</code> objects to indent themselves …\nWrapper struct that indents the <code>Display</code> representation of …\nWrapper struct that indents the <code>Display</code> representation of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe indentation to insert before each non-empty line.\nThe indentation to insert before each non-empty line.\nWrap this object so that its <code>Display</code> representation is …\nWrap this object so that its <code>Display</code> representation is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe item to indent.\nThe item to indent.\nAdapter for writers to indent each line\nReturns the argument unchanged.\nGet a reference to the wrapped writer\nGet the string being used as an indent for each line\nCalls <code>U::from(self)</code>.\nExtract the writer from the <code>IndentWriter</code>, discarding any …\nCreate a new <code>IndentWriter</code>.\nCreate a new <code>IndentWriter</code> which will not add an indent to …")