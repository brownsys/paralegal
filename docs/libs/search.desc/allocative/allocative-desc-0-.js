searchState.loadedDescShard("allocative", 0, "Allocative\nThis trait allows traversal of object graph.\nNode in flamegraph tree.\nBuild a flamegraph from given root objects.\nHashed string, which is a key while descending into a tree …\nAdd another flamegraph to this one.\nAdd a child node to the flamegraph, merging if it already …\nAdd size to this node.\nThis function is typically called as first function of an …\nThis function is typically called as the first function of …\nEnter a field containing a shared pointer.\nFinish building the flamegraph.\nFinish building the flamegraph and return the flamegraph …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>const</code> of type <code>Key</code> with the provided <code>ident</code> as the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute hash.\nRegister global root which can be later traversed by …\nSize of a piece of data and data allocated in unique …\nSize of data allocated in unique pointers in the struct.\nSimilar to <code>visit_field</code> but instead of calling …\nCollect data from global roots registered with …\nCollect tree sizes starting from given root.\nVisit simple sized field (e.g. <code>u32</code>) without descending …\nVisit simple sized field (e.g. <code>u32</code>) without descending …\nWrite flamegraph in format suitable for [<code>flamegraph.pl</code>] or …")