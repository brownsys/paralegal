searchState.loadedDescShard("joinery", 0, "Joinery provides generic joining of iterables with …\nJoinery iterator and related types and traits\nCore join type and related traits\nThe joinery prelude\n0-size types for common separators\nSpecialized helper struct to allow adapting any <code>Iterator</code> …\nAn element from the underlying iterator\nEnum representing the elements of a <code>JoinIter</code>.\nAn iterator for a <code>Join</code>.\nA trait for converting <code>Iterator</code>s into <code>Join</code> instances or …\nA separator between two elements\nGet a mutable reference to a common type <code>R</code> from a <code>JoinItem</code>…\nGet a reference to a common type <code>R</code> from a <code>JoinItem</code>, in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>JoinItem</code> into a common type <code>R</code>, in the case where …\nCreate a referential iterator by cloning the underlying …\nConvert the adapter back into the underlying iterator.\nCheck if the next iteration of this iterator will (try to) …\nCreate an iterator which interspeses the elements of this …\nConvert a cloneable iterator into a <code>Join</code> instance with no …\nConvert a cloneable iterator into a <code>Join</code> instance. …\nAdvance to the next item in the Join. This will either be …\nPeek at what the next item in the iterator will be without …\nPeek at what the next non-separator item in the iterator …\nGet a reference to the separator.\nThe primary data structure for representing a joined …\nA trait for converting collections into <code>Join</code> instances.\nA trait for using a separator to produce a <code>Join</code>.\nGet a reference to the underlying collection.\nGet a mutable reference to the underlying collection\nFormat the joined collection, by writing out each element …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume the join, and return the underlying collection.\nCreate a consuming iterator from a <code>Join</code>. This iterator …\nCreate a referential iterator over the join. This iterator …\nConsume <code>self</code> and return underlying collection and …\nJoin this object with an empty separator. When rendered …\nCombine this object with a separator to create a new <code>Join</code> …\nGet a reference to the separator.\nZero size type representing the <code>,</code> separator.\nZero size type representing the comma followed by space …\nZero size type representing the <code>-</code> separator.\nZero size type representing the <code>.</code> separator.\nZero size type representing the newline separator.\nZero-size type representing the empty separator.\nZero size type representing the <code>/</code> separator.\nZero size type representing the space separator.\nZero size type representing the tab separator.\nZero size type representing the <code>_</code> separator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")