(function() {
    var type_impls = Object.fromEntries([["miri",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-StoreBufferAlloc\" class=\"impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#104\">Source</a><a href=\"#impl-Clone-for-StoreBufferAlloc\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html\" title=\"struct miri::concurrency::weak_memory::StoreBufferAlloc\">StoreBufferAlloc</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#104\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html\" title=\"struct miri::concurrency::weak_memory::StoreBufferAlloc\">StoreBufferAlloc</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","miri::concurrency::weak_memory::AllocState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-StoreBufferAlloc\" class=\"impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#104\">Source</a><a href=\"#impl-Debug-for-StoreBufferAlloc\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html\" title=\"struct miri::concurrency::weak_memory::StoreBufferAlloc\">StoreBufferAlloc</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#104\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","miri::concurrency::weak_memory::AllocState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StoreBufferAlloc\" class=\"impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#166-236\">Source</a><a href=\"#impl-StoreBufferAlloc\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html\" title=\"struct miri::concurrency::weak_memory::StoreBufferAlloc\">StoreBufferAlloc</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.new_allocation\" class=\"method\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#167-169\">Source</a><h4 class=\"code-header\">pub fn <a href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html#tymethod.new_allocation\" class=\"fn\">new_allocation</a>() -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.memory_accessed\" class=\"method\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#175-193\">Source</a><h4 class=\"code-header\">pub fn <a href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html#tymethod.memory_accessed\" class=\"fn\">memory_accessed</a>(&amp;self, range: <a class=\"struct\" href=\"rustc_middle/mir/interpret/allocation/struct.AllocRange.html\" title=\"struct rustc_middle::mir::interpret::allocation::AllocRange\">AllocRange</a>, global: &amp;<a class=\"struct\" href=\"miri/concurrency/data_race/struct.GlobalState.html\" title=\"struct miri::concurrency::data_race::GlobalState\">DataRaceState</a>)</h4></section></summary><div class=\"docblock\"><p>When a non-atomic access happens on a location that has been atomically accessed\nbefore without data race, we can determine that the non-atomic access fully happens\nafter all the prior atomic writes so the location no longer needs to exhibit\nany weak memory behaviours until further atomic accesses.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_store_buffer\" class=\"method\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#197-210\">Source</a><h4 class=\"code-header\">fn <a href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html#tymethod.get_store_buffer\" class=\"fn\">get_store_buffer</a>&lt;'tcx&gt;(\n    &amp;self,\n    range: <a class=\"struct\" href=\"rustc_middle/mir/interpret/allocation/struct.AllocRange.html\" title=\"struct rustc_middle::mir::interpret::allocation::AllocRange\">AllocRange</a>,\n) -&gt; <a class=\"type\" href=\"rustc_middle/mir/interpret/error/type.InterpResult.html\" title=\"type rustc_middle::mir::interpret::error::InterpResult\">InterpResult</a>&lt;'tcx, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBuffer.html\" title=\"struct miri::concurrency::weak_memory::StoreBuffer\">StoreBuffer</a>&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a store buffer associated with an atomic object in this allocation.\nReturns <code>None</code> if there is no store buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_create_store_buffer_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#214-235\">Source</a><h4 class=\"code-header\">fn <a href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html#tymethod.get_or_create_store_buffer_mut\" class=\"fn\">get_or_create_store_buffer_mut</a>&lt;'tcx&gt;(\n    &amp;mut self,\n    range: <a class=\"struct\" href=\"rustc_middle/mir/interpret/allocation/struct.AllocRange.html\" title=\"struct rustc_middle::mir::interpret::allocation::AllocRange\">AllocRange</a>,\n    init: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"miri/type.Scalar.html\" title=\"type miri::Scalar\">Scalar</a>&gt;,\n) -&gt; <a class=\"type\" href=\"rustc_middle/mir/interpret/error/type.InterpResult.html\" title=\"type rustc_middle::mir::interpret::error::InterpResult\">InterpResult</a>&lt;'tcx, &amp;mut <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBuffer.html\" title=\"struct miri::concurrency::weak_memory::StoreBuffer\">StoreBuffer</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a mutable store buffer associated with an atomic object in this allocation,\nor creates one with the specified initial value if no atomic object exists yet.</p>\n</div></details></div></details>",0,"miri::concurrency::weak_memory::AllocState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VisitProvenance-for-StoreBufferAlloc\" class=\"impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#111-122\">Source</a><a href=\"#impl-VisitProvenance-for-StoreBufferAlloc\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"miri/provenance_gc/trait.VisitProvenance.html\" title=\"trait miri::provenance_gc::VisitProvenance\">VisitProvenance</a> for <a class=\"struct\" href=\"miri/concurrency/weak_memory/struct.StoreBufferAlloc.html\" title=\"struct miri::concurrency::weak_memory::StoreBufferAlloc\">StoreBufferAlloc</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.visit_provenance\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/miri/concurrency/weak_memory.rs.html#112-121\">Source</a><a href=\"#method.visit_provenance\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"miri/provenance_gc/trait.VisitProvenance.html#tymethod.visit_provenance\" class=\"fn\">visit_provenance</a>(&amp;self, visit: &amp;mut <a class=\"type\" href=\"miri/provenance_gc/type.VisitWith.html\" title=\"type miri::provenance_gc::VisitWith\">VisitWith</a>&lt;'_&gt;)</h4></section></div></details>","VisitProvenance","miri::concurrency::weak_memory::AllocState"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[10217]}