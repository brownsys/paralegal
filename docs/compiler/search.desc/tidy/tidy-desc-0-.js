searchState.loadedDescShard("tidy", 0, "Library used by tidy and other tools.\nChecks that a list of items is in alphabetical order\nTidy check to ensure that there are no binaries checked …\nTidy check to prevent creation of unnecessary debug …\nChecks the licenses of third-party dependencies.\nTidy check to ensure that crate <code>edition</code> is ‘2021’ or …\nTidy check to ensure error codes are properly documented …\nOptional checks for file types other than Rust source\nCheck for external package sources. Allow only vendorable …\nTidy check to ensure that unstable features are all in …\nChecks that all Flunt files have messages in alphabetical …\nChecks that no Fluent messages or attributes end in …\nChecks that all Fluent messages appear at least twice\nTidy check to ensure that tests inside ‘tests/crashes’ …\nTidy check to ensure that mir opt directories do not have …\nTidy check to enforce rules about platform-specific code …\nTidy check to ensure that no new Makefiles are added under …\nTidy check to make sure light and dark themes are …\nTidy check to ensure that rustdoc GUI tests start with a …\nTidy check to ensure that rustdoc templates didn’t …\nTidy check to enforce various stylistic guidelines on the …\nA helper macro to <code>unwrap</code> a result except also print out …\nTests for target tier policy compliance.\nTidy check to ensure that all target specific tests (those …\nChecks that there are no unpaired <code>.stderr</code> or <code>.stdout</code> for a …\nTidy check to ensure below in UI test directories:\nTidy check to ensure <code>#[test]</code> and <code>#[bench]</code> are not used …\nChecks that test revision names appearing in header …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThese are exceptions to Rust’s permissive licensing …\nThese dependencies have non-standard licenses but are …\nThese are exceptions to Rust’s permissive licensing …\nThese are licenses that are allowed for all crates, …\nPlaceholder for non-standard license file.\nCrates rustc is allowed to depend on. Avoid adding to the …\nThe workspaces to check for licensing and optionally …\nDependency checks.\nCheck that all licenses of tool dependencies are in the …\nChecks the dependency of <code>restricted_dependency_crates</code> at …\nCheck that all licenses of runtime dependencies are in the …\nRecursively find all dependencies.\nUsed to skip a check if a submodule is not checked out, …\nFinds a package with the given name.\nStage 2: Checks that long-form error code explanations …\nStage 4: Search <code>compiler/</code> and ensure that every error code …\nThis function returns a tuple indicating whether the …\nStage 1: Parses a list of error codes from <code>error_codes.rs</code>.\nTool x failed the check\nAny message, just print it\na is required to run b. c is extra info\nLocation within build directory\nInstalled but wrong version\nAttempt to create a virtualenv at this path. Cycles …\nCheck git for tracked files matching an extension\nReturns the argument unchanged.\nCreate a virtuaenv at a given path if it doesn’t already …\nCalls <code>U::from(self)</code>.\nHelper to create <code>cfg1 cfg2 -- file1 file2</code> output\nRun a python command with given arguments. <code>py_path</code> should …\nCheck that shellcheck is installed then run it at the …\nParse python’s version output (<code>Python x.y.z</code>) and ensure …\nList of allowed sources for packages.\nChecks for external package sources. <code>root</code> is the path to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessages allowed to have <code>.</code> at their end.\nEvil cursed bad hack. Requires that <code>value</code> be a substr (in …\nA header line, like <code>//@name: value</code> consists of the prefix …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate through compiletest headers in a test contents.\nBy default, tidy always warns against style issues.\nError code markdown is restricted to 80 columns because …\n<code>Ignore(false)</code> means that an <code>ignore-tidy-*</code> directive has …\nParser states for <code>line_is_url</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>line</code> appears to be a line comment …\nReturns <code>true</code> if <code>line</code> is allowed to be longer than the …\nReturns <code>true</code> if <code>line</code> can be ignored. This is the case when …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieves file names of all library feature sections in …\nRetrieves file names of all language feature sections in …\nRetrieves names of all unstable features.\nTests whether <code>DirEntry</code> is a file.\nBuilds the path to the directory where the features are …\nBuilds the path to the directory where the features are …\nBuilds the path to the Unstable Book source directory from …\nThe default directory filter.\nFilter for only files that end in <code>.rs</code>.")