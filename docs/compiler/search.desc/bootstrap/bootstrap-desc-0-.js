searchState.loadedDescShard("bootstrap", 0, "Implementation of bootstrap, the Rust build system.\nBuild and run some benchmarks\nGlobal configuration for the build system.\nCompile either the compiler or libraries\nKeeps track of major changes made to the bootstrap …\nCompile either the compiler or libraries, using cargo check\nClean out build directories\nRun Clippy (uses rustup/cargo-installed clippy binary)\nBuild a codegen backend for rustc, placing the output in …\nA structure representing a Rust compiler.\nGlobal configuration for the entire build and/or bootstrap.\nWhen building Rust various objects are handled differently.\nBuild distribution artifacts\nBuild documentation\nExtra <code>--check-cfg</code> to add when building the compiler or …\nRun cargo fix\nDeserialized version of all flags for this compile.\nRun rustfmt\nLibraries originating from proc-macros.\nInstall distribution artifacts\nLLD file names for all flavors.\nBuild and run some test suites <em>in Miri</em>\nThe various “modes” of invoking Cargo.\nDo not run any doc tests.\nOnly run doc tests.\nCollection of paths used to match a task rule.\nPerform profiling and benchmarking of the compiler using …\nRun tools contained in this repository\nBuild librustc, and compiler libraries, placing output in …\nA collection of individual paths or aliases.\nSet up the environment for development\nBuild the standard library, placing output in the “…\nSuggest a subset of tests to run, based on modified files\nA “suite” of paths.\nTypical Rust libraries.\nNon Rust libraries and objects shipped to ease usage of …\nBuild and run some test suites\nBuild a tool, placing output in the “…\nBuild a tool which uses the locally built rustc and the …\nBuild a tool which uses the locally built std, placing …\nVendor dependencies\nRun normal tests and doc tests (default).\nAdds the <code>RUST_TEST_THREADS</code> env var if necessary\nReturns the path to the <code>ar</code> archive utility for the target …\nExecutes the entire build, as configured by the flags and …\nbuild target of the stage0 compiler\nBuild triple for the pre-compiled snapshot compiler.\nBuild directory, overrides <code>build.build-dir</code> in <code>config.toml</code>\nBootstrap uses this value to decide whether it should …\nComponent directory that Cargo will produce output into …\nReturns the root output directory for all Cargo output in …\nReturns the path to the C compiler for the target …\nReturns a list of flags to pass to the C compiler for the …\nClear out <code>dir</code> if <code>input</code> is newer.\nwhether to use color in cargo and rustc output\nOutput directory for all documentation for a target\nCommand for visual diff display, e.g. …\ndefaults to <code>config.toml</code>\nTOML configuration file for build\nUser-specified configuration from <code>config.toml</code>.\nLinks a file from <code>src</code> to <code>dst</code>. Attempts to use hard links …\nCopies the <code>src</code> directory recursively to <code>dst</code>. Both are …\nLinks the <code>src</code> directory recursively to <code>dst</code>. Both are …\nReturns if this target should statically link the C …\nReturns the path to the C++ compiler for the target …\nWhen a <code>runner</code> configuration is not provided and a …\nOutput directory for all documentation for a target\n<code>None</code> if we shouldn’t download CI compiler artifacts, or …\ndry run; don’t build anything\nIndicates whether to dump the work done from bootstrap …\nEnable BOLT link flags\nrustc error format\nbuild paths to exclude\nTemporary directory that extended error information is …\nTests whether the <code>compiler</code> compiling for <code>target</code> should be …\nChecks whether the <code>compiler</code> compiling for <code>target</code> should be …\nArguments appearing after <code>--</code> to be forwarded to tools, …\narguments passed to subcommands\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes a hash representing the state of a …\nhost targets to build\nWhich triples to produce a compiler toolchain for.\nReturns a Vec of all the dependencies of the given root …\ninclude default paths in addition to the provided ones\nuse incremental compilation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is our custom, patched, version of …\nReturns <code>true</code> if this is a snapshot compiler for <code>build</code>’s …\nReturns <code>true</code> if this is an external version of LLVM not …\nCheck if verbosity is greater than the <code>level</code>\nReturns the number of parallel jobs that have been …\nnumber of jobs to run in parallel\nOutput directory for all JSON-formatted documentation for …\nuse message-format=json\nstage(s) to keep without recompiling (pass multiple times …\nstage(s) of the standard library to keep without …\nReturns the path to the linker for the given target if it …\nReturns the path to <code>FileCheck</code> binary for the specified …\n<code>None</code> if <code>llvm_from_ci</code> is true and we haven’t yet …\nRoot output directory of LLVM for <code>target</code>\ngenerate PGO profile with llvm built for rustc\nuse PGO profile for LLVM build\nOutput directory for some generated md crate documentation …\nReturn a <code>Group</code> guard for a <code>Step</code> that is built for each …\nReturn a <code>Group</code> guard for a <code>Step</code> that is only built once …\nReturns the “musl libdir” for this <code>target</code>.\nReturns the “musl root” for this <code>target</code>, if defined\nDirectory for libraries built from C/C++ code and shared …\nCreates a new set of build configuration from the <code>flags</code> on …\nReturns if config.ninja is enabled, and checks for ninja …\nCall Build::ninja() instead of this.\nReturns <code>true</code> if this is a no-std <code>target</code>, if defined\ncommand to run on failure\nWhether to use the <code>c</code> feature of the <code>compiler_builtins</code> …\nReturns the “package version” for a component given …\nThe paths to work with. For example: with <code>./x check foo bar</code>…\npaths for the subcommand\nEnsures that the behavior dump directory is properly …\nPath to the python interpreter to use\nReturns the root of the “rootfs” image that this …\nReturns the path to the <code>ranlib</code> utility for the target …\nGiven <code>num</code> in the form “a.b.c” return a “release …\nReturns the <code>a.b.c</code> version that the given package is at.\nReturns <code>true</code> if the target will be tested using the …\nAdditional reproducible artifacts that should be added to …\nUpdates all submodules, and exits with an error if …\nUpdates a submodule, and exits with a failure if submodule …\nExecute a command and return its output. Note: Ideally, …\nReturns an optional “runner” to pass to <code>compiletest</code> …\nReturns the value of <code>package_vers</code> above for Rust itself.\ngenerate PGO profile with rustc build\nuse PGO profile for rustc build\nReturns the value of <code>release</code> above for Rust itself.\nReturns the full commit hash.\nReturns the <code>version</code> string associated with this compiler …\nGets the space-separated set of activated features for the …\nReturns the libdir of the snapshot compiler.\nReturns the sysroot of the snapshot compiler.\noverride options in config.toml\nbuild paths to skip\nSkip stage0 compiler validation\npath to the root of the rust checkout\nstage to build (indicates compiler to use/test, e.g., …\nReturns the root directory for all output generated in a …\nGets the space-separated set of activated features for the …\nA helper macro to <code>unwrap</code> a result except also print out …\ntarget targets to build\nWhich triples to build libraries …\nRoot output directory for rust_test_helpers library …\nReturns whether the specified tool is configured as part …\nReturns <code>true</code> if unstable features should be enabled for …\nUpdates the given submodule only if it’s initialized …\nIf any submodule has been initialized already, sync it …\nThis module contains integral components of the build and …\nuse verbose output (-vv for very verbose)\nRuns a function if verbosity is greater than <code>level</code>.\nif value is deny, will deny warnings if value is warn, …\nReturns the <code>lib</code> directory for the WASI target specified, if\nClean the entire build directory (not used by default)\napply to all appropriate files, not just those that have …\nCheck all targets\nclippy lints to allow\narguments for the tool\nwhether to automatically update stderr/stdout files\ncheck formatting instead of applying\nmode describing what file the actual ui output will be …\nextra options to pass the compiler when running …\nclippy lints to deny\nonly run doc tests\nonly run doc tests\ncomma-separated list of other files types to check …\nclippy lints to forbid\nrerun tests even if the inputs are unchanged\nrender the documentation in JSON format in addition to the …\ndo not run doc tests\ndo not run doc tests\nrun all tests regardless of failure\nrun all tests regardless of failure\nonly run tests that result has been changed\nopen the docs in a browser\nforce {check,build,run}-pass tests to this mode.\nEither the profile for <code>config.toml</code> or another setup action.\nwhether to execute run-* tests\nrun suggested tests\nenable this to generate a Rustfix coverage file, which is …\nClean a specific stage without touching other artifacts. …\nAdditional <code>Cargo.toml</code> to sync and vendor\nextra arguments to be passed for the test tool being used …\nextra arguments to be passed for the test tool being used …\nAlways include version in subdir name\nclippy lints to warn on\nSanity checking performed by bootstrap before actually …\nImplementation of compiling the compiler and standard …\n<code>./x.py clean</code>\nImplementation of running clippy on the compiler, standard …\nImplementation of compiling various phases of the compiler …\nImplementation of the various distribution aspects of the …\nDocumentation generation for bootstrap.\nRuns rustfmt on the repository.\nCompilation of native dependencies like GCC.\nImplementation of the install aspects of the compiler.\nCompilation of native dependencies like LLVM.\nBuild-and-run steps for in-repo tools\nFirst time setup of a dev environment\nAttempt to magically identify good tests to run\nIn some cases, parts of bootstrap need to change part of a …\nBuild-and-run steps for <code>./x.py test</code> test fixtures\nToolstate checks to keep tools building\nCargo’s output path for librustc_codegen_llvm in a given …\nWhether to build only a subset of crates.\nWhether to build only a subset of crates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCargo’s output path for librustc in a given stage, …\nCargo’s output path for the standard library in a given …\nCargo’s output path for the standard library in a given …\nOverride <code>Builder::kind</code> on cargo invocations.\nOverride <code>Builder::kind</code> on cargo invocations.\nBuilds the compiler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisable the most spammy clippy lints\nWhether to lint only a subset of crates.\nWhether to lint only a subset of crates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe need to keep the order of the given clippy lint rules …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLints the compiler.\n<code>RustcLink</code> copies all of the rlibs from the rustc build …\nLink some files into a rustc sysroot.\nCargo’s output path for librustc_codegen_llvm in a given …\nThe <strong>previous</strong> compiler used to compile this compiler.\nThe compiler whose rlibs we are copying around.\nTries to find LLVM’s <code>compiler-rt</code> source directory, for …\nCreates the <code>codegen-backends</code> folder for a compiler that’…\nCopies sanitizer runtime libraries into target libdir.\nCopies third party objects needed by various targets for …\nCopies third party objects needed by various targets.\nWhether to build only a subset of crates in the standard …\nNot actually used; only present to make sure the cache …\nWhether to build a subset of crates, rather than the whole …\nNot actually used; only present to make sure the cache …\nWhen using download-rustc, we need to use a new build of …\nSee <code>Std::force_recompile</code>.\nSee <code>Std::force_recompile</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCargo’s output path for librustc in a given stage, …\nCargo’s output path for the standard library in a given …\nThis is the compiler into whose sysroot we want to copy …\nBuilds the standard library.\nLink all libstd rlibs/dylibs into the sysroot location.\nBuilds and prepare startup objects like rsbegin.o and …\nBuilds the compiler.\nSame as <code>std_link</code>, only for librustc\nReturns the sysroot that <code>compiler</code> is supposed to use. For …\nPrepare a new compiler from the artifacts in <code>stage</code>\nPass down configuration from the LLVM build into the build …\nConfigure cargo to compile the standard library, adding …\nResolves standard library crates for <code>Std::run_make</code> for any …\nThe compiler which we will produce in this step. Assemble …\nTarball intended for internal consumption to ease …\nTarball containing a prebuilt version of the …\nTarball containing artifacts necessary to reproduce the …\nTarball intended for internal consumption to ease …\nTarball containing the compiler that gets downloaded and …\nUse the <code>builder</code> to make a filtered copy of <code>base</code>/X for X in …\nCopy stamped files into an image’s <code>target/lib</code> directory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaybe add LLVM object files to the given destination …\nMaybe add libLLVM.so to the runtime lib-dir for rustc …\nMaybe add libLLVM.so to the target lib-dir for linking.\nBuilds the <code>rust-docs</code> installer component.\nBuilds the <code>rust-docs-json</code> installer component.\nBuilds the <code>rustc-docs</code> installer component.\nBuilds the <code>rust-mingw</code> installer component.\nCreates the <code>rustc</code> installer component.\nCopies debugger scripts for <code>target</code> into the <code>sysroot</code> …\nCreates a tarball of (degenerate) save-analysis metadata, …\nCreates the <code>rust-src</code> installer component\nCreates the plain source tarball\nCreates a combined installer for the specified target in …\nCheck that all objects in rlibs for UEFI targets are COFF. …\nName of the crates that are visible to consumers of the …\nBuild the documentation for public standard library crates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke <code>rustbook</code> for <code>target</code> for the doc book <code>name</code> from the …\nBuilds the book and associated stuff.\nGenerates all standalone documentation as compiled by the …\nGenerates HTML release notes to include in the final docs …\nGenerate shared resources used by other pieces of …\nCompile all standard library documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates compiler documentation.\nGenerates the HTML rendered error-index by running the …\nBuilds the rustc book.\nBuilds the reference book.\nReturns the argument unchanged.\nReturns the Rust files modified between the <code>merge-base</code> of …\nCalls <code>U::from(self)</code>.\nUpdates the last rustfmt version used.\nReturn whether the format cache can be reused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis returns whether we’ve already previously built GCC.\nCompile GCC for <code>target</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe have to run a few shell scripts, which choke quite a …\nLinker flags to pass to LLVM’s CMake invocation.\nCMake target used to build the runtime.\nThis retrieves the LLVM sha we <em>want</em> to use, according to …\nCMAKE_EXE_LINKER_FLAGS\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the CI-found LLVM is currently usable.\nReturns true if we’re running in CI with modified LLVM …\nPath to LLVM cmake directory for the target.\nPath to llvm-config binary. NB: This is always the host …\nCMAKE_MODULE_LINKER_FLAGS\nLibrary filename that will be used rustc.\nPath to the built runtime library.\nThis returns whether we’ve already previously built LLVM.\nCompile LLVM for <code>target</code>.\nCompile Enzyme for <code>target</code>.\nCompile LLD for <code>target</code>.\nBuilds sanitizer runtime libraries.\nBuild crtbegin.o/crtend.o for musl target.\nBuild libunwind.a\nCMAKE_SHARED_LINKER_FLAGS\nReturns sanitizers available on a given target.\nPerforms profiling using <code>rustc-perf</code> on a built version of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUses <code>clap_complete</code> to generate shell completions.\nSets up or displays the LSP config for one of the …\nHandles editor-specific setup differences\nInstalls <code>src/etc/pre-push.sh</code> as a Git hook\nCreates a toolchain link for stage1 using <code>rustup</code>\nCreate the recommended editor LSP config file for rustc …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of historical hashes of each LSP settings file New …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrompt a user for a answer, looping until they enter an …\nSuggests a list of possible <code>x.py</code> commands to run based on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCoverage tests are a bit more complicated than other test …\nRustdoc is special in various ways, which is why this step …\nSome test suites are run inside emulators or on remote …\nSpecial-handling is needed for <code>run-make</code>, so don’t use …\nRun <code>cargo miri setup</code> for the given target, return where …\nDeclares an alias for running the <code>Coverage</code> tests in only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a <code>cargo test</code> subcommand, pass it the appropriate …\nRuns the <code>linkchecker</code> tool as compiled in <code>stage</code> by the <code>host</code> …\nRuns the <code>cargotest</code> tool as compiled in <code>stage</code> by the <code>host</code> …\nRuns <code>cargo test</code> for <code>cargo</code> packaged with Rust.\nRuns <code>cargo test</code> for rust-analyzer\nRuns <code>cargo test</code> for rustfmt.\nRuns <code>cargo test</code> for miri.\nTests <code>cargo miri test</code>.\nRuns <code>cargo test</code> for compiletest.\nRuns <code>cargo test</code> for clippy.\nRuns the <code>tidy</code> tool.\nBuilds run-make-support and returns the path to the …\nRuns <code>cargo test</code> for run-make-support.\nRuns <code>cargo test</code> for build_helper.\nExecutes the <code>compiletest</code> tool to run a suite of tests.\nRuns the documentation tests for a book in <code>src/doc</code>.\nRuns the error index generator tool to execute the tests …\nRuns all unit tests plus documentation tests for a given …\nRuns “distcheck”, a ‘make check’ from a tarball\nTests the build system itself.\nTests the Platform Support page in the rustc book.\nTests that the lint examples in the rustc book generate …\nEnsure the version placeholder replacement tool builds\nCompiles the <code>rust_test_helpers.c</code> library which we used in …\nGiven a <code>cargo test</code> subcommand, add the appropriate flags …\nRuns the coverage test suite (or a user-specified subset) …\nThis runs the equivalent of <code>mdbook test</code> (via the rustbook …\nThis runs <code>rustdoc --test</code> on all <code>.md</code> files in the path.\nThe rustc-perf benchmark suite, which is added as a …\nThese are the submodules that are required for rustbook to …\nNightly-only features that are allowed (comma-separated …\nAdditional arguments to pass to the <code>cargo</code> invocation.\nThis should only ever be 0 or 2. We sometimes want to …\nLinks a built tool binary with the given <code>name</code> from the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a tool in <code>src/tools</code>\nThe tool can’t even be compiled\nDirectory where the toolstate repo is checked out.\nThe tool compiles successfully, but the test suite fails\nThe tool compiles successfully and its test suite passes\nWhether a tool can be compiled, tested or neither\nChecks out the toolstate repo into <code>TOOLSTATE_DIR</code>.\nThis function <code>commit_toolstate_change</code> provides …\nNumber of days after the last promotion of beta. Its value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets up config and authentication for modifying the …\nUpdates the “history” files with the latest results.\nReads the latest toolstate from the toolstate repo.\nChecks tool state status.\nReturns the cargo workspaces to vendor for <code>x vendor</code> and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilds and performs different <code>Self::kind</code>s of stuff and …\nWhether this step is run by default as part of its …\nIf true, then this rule should be skipped if –target was …\nResult type of <code>Step::run</code>.\nCollection of paths used to match a task rule.\nA collection of individual paths or aliases.\nA “suite” of paths.\nAdds the compiler’s directory of dynamic libraries to <code>cmd</code>…\nA convenience wrapper for Steps which know they have no …\nLike <code>Builder::cargo</code>, but only passes flags that are valid …\nBuild configuration from e.g. config.toml.\nA cache of outputs of <code>Step</code>s so we can avoid running steps …\nThis will create a <code>BootstrapCommand</code> that represents a …\nReturn a list of crate names selected by <code>run.paths</code>.\nGets the paths to all of the compiler’s codegen backends.\nObtain a compiler at a given stage and for a given host …\nSimilar to <code>compiler</code>, except handles the full-bootstrap …\nA description of the crates in this set, suitable for …\nIndicates it should run if the command-line selects the …\nIndicates it should run if the command-line selects any of …\nEnsure that a given step is built, returning its output. …\nEnsure that a given step is built <em>only if it’s supposed </em>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn all <code>TaskPath</code>s in <code>Self</code> that contain any of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandles individual files (not directories) within a test …\nWhat to build or what action to perform.\nReturns the compiler’s relative libdir where it stores …\nReturns if <code>std</code> should be statically linked into …\nReturn the path to <code>llvm-config</code> for the target, if it …\nCalled directly by the bootstrap <code>Step</code> handler when not …\nGiven an <code>alias</code> selected by the <code>Step</code> and the paths passed …\nMultiple aliases for the same job.\nThe paths passed on the command line. Used by steps to …\nGiven a set of requested paths, return the subset which …\nPrimary function to implement <code>Step</code> logic.\nGets a path to the compiler specified.\nReturns the compiler’s libdir where it stores the …\nUpdates the actual toolstate of a tool.\nDetermines if this <code>Step</code> should be run when given specific …\nA stack of <code>Step</code>s to run before we can run this builder. …\nReturns the compiler’s relative libdir where the …\nReturns the bindir for a compiler’s sysroot.\nReturns the libdir where the standard library and other …\nThe total amount of time we spent running <code>Step</code>s in …\nGets a <code>BootstrapCommand</code> which is ready to run <code>tool</code> in <code>stage</code>…\nThe stage to use. Either implicitly determined based on …\nChecks if any of the “should_run” paths is in the …\nFlags that are passed to the <code>rustc</code> shim binary. These …\nRepresents flag values in <code>String</code> form with whitespace …\nAdds nightly-only features that this invocation is allowed …\nAdds a host rustc flag.\nEncodes all the flags into a single string.\nAdd an env var to the cargo command instance. Note that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>Builder::cargo</code> and <code>Cargo::configure_linker</code> to …\nSame as <code>Cargo::new</code> except this one doesn’t configure the …\nBy default, cargo will pick up on various variables in the …\nSerialized configuration of a build.\nCommand-line interface of the bootstrap build system.\nThis file is embedded in the overlay directory of the …\nTOML representation of various global build decisions.\nSince we use <code>#[serde(deny_unknown_fields)]</code> on <code>TomlConfig</code>, …\nGlobal configuration for the entire build and/or bootstrap.\nThis isn’t a dry run.\nExit with an error on duplicate values\nUse an externally provided <code>lld</code> binary. Note that the …\nSilently ignore a duplicated value\nTOML representation of various global install decisions.\nLLD in bootstrap works like this:\nTOML representation of how the LLVM build is configured.\nOverride the current value, even if it’s <code>Some</code>\nEach path in this list is considered “allowed” in the …\nDescribes how to handle conflicts in merging two <code>TomlConfig</code>\nTOML representation of how the Rust build is configured.\nLTO mode used for compiling rustc itself.\nThis is a dry run enabled by bootstrap itself, so it can …\nUse <code>rust-lld</code> from the compiler’s sysroot\nPer-target configuration stored in the global …\nNewtype over <code>Vec&lt;TargetSelection&gt;</code> so we can implement …\nStructure of the <code>config.toml</code> file that configuration is …\nTOML representation of how each build target is configured.\nDo not use LLD\nThis is a dry run enabled by the <code>--dry-run</code> flag.\nBootstrap embeds a version number into the name of shared …\nTry to find the relative path of <code>bindir</code>, otherwise return …\nCompares the current <code>Llvm</code> options against those in the CI …\nCompares the current Rust options against those in the CI …\nRuns a command, printing out nice contextual information …\ncheck rustc/cargo version is same or lower with 1 apart …\nThe absolute path to the downloaded LLVM artifacts.\nDirectory where the extracted <code>rustc-dev</code> component is …\nCommand for visual diff display, e.g. …\ndefaults to <code>config.toml</code>\nReturns the default <code>-Csplit-debuginfo</code> value for the …\nDownload a single component of a CI-built toolchain (not …\nReturns the commit to download, or <code>None</code> if we shouldn’t …\nReturn whether we will use a downloaded, pre-compiled …\n<code>None</code> if we shouldn’t download CI compiler artifacts, or …\nPath to the file defining the custom target, if any.\nModifies the interpreter section of ‘fname’ to fix the …\nArguments appearing after <code>--</code> to be forwarded to tools, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the last commit in which any of <code>modified_paths</code> …\nTry to find the relative path of <code>libdir</code>.\nSome(path to llvm-config) if using an external LLVM.\nSome(path to FileCheck) if one was specified.\nDetermine whether llvm should be linked dynamically.\n<code>None</code> if <code>llvm_from_ci</code> is true and we haven’t yet …\nNOTE: rustfmt is a completely different toolchain than the …\nCall Build::ninja() instead of this.\nWhether to use the <code>c</code> feature of the <code>compiler_builtins</code> …\nThe paths to work with. For example: with <code>./x check foo bar</code>…\nReturns the content of the given file at a specific commit.\nWhether or not <code>fix_bin_or_dylib</code> needs to be run; can only …\nReturns whether or not submodules should be managed by …\nCreate a temporary directory in <code>out</code> and return its path.\nRuns a command, printing out nice contextual information …\nGiven a path to the directory of a submodule, update it.\nRuns a function if verbosity is greater than 0\nReturns whether the SHA256 checksum of <code>path</code> matches …\nBuild and run some benchmarks\nCompile either the compiler or libraries\nCompile either the compiler or libraries, using cargo check\nClean out build directories\nRun Clippy (uses rustup/cargo-installed clippy binary)\nBuild distribution artifacts\nBuild documentation\nRun cargo fix\nDeserialized version of all flags for this compile.\nRun rustfmt\nInstall distribution artifacts\nBuild and run some test suites <em>in Miri</em>\nPerform profiling and benchmarking of the compiler using …\nRun tools contained in this repository\nSet up the environment for development\nSuggest a subset of tests to run, based on modified files\nBuild and run some test suites\nVendor dependencies\nWhether to deny warnings, emit them as warnings, or use …\nbuild target of the stage0 compiler\nBuild directory, overrides <code>build.build-dir</code> in <code>config.toml</code>\nBootstrap uses this value to decide whether it should …\nwhether to use color in cargo and rustc output\nTOML configuration file for build\ndry run; don’t build anything\nIndicates whether to dump the work done from bootstrap …\nEnable BOLT link flags\nrustc error format\nbuild paths to exclude\narguments passed to subcommands\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the shell completion for a given shell, if the …\nhost targets to build\ninclude default paths in addition to the provided ones\nuse incremental compilation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of jobs to run in parallel\nuse message-format=json\nstage(s) to keep without recompiling (pass multiple times …\nstage(s) of the standard library to keep without …\ngenerate PGO profile with llvm built for rustc\nuse PGO profile for LLVM build\ncommand to run on failure\npaths for the subcommand\nAdditional reproducible artifacts that should be added to …\ngenerate PGO profile with rustc build\nuse PGO profile for rustc build\noverride options in config.toml\nbuild paths to skip\nSkip stage0 compiler validation\npath to the root of the rust checkout\nstage to build (indicates compiler to use/test, e.g., …\ntarget targets to build\nCheck if <code>&lt;cmd&gt; -h -v</code> was passed. If yes, print the …\nuse verbose output (-vv for very verbose)\nif value is deny, will deny warnings if value is warn, …\nClean the entire build directory (not used by default)\napply to all appropriate files, not just those that have …\nCheck all targets\nclippy lints to allow\narguments for the tool\nwhether to automatically update stderr/stdout files\ncheck formatting instead of applying\nmode describing what file the actual ui output will be …\nextra options to pass the compiler when running …\nclippy lints to deny\nonly run doc tests\nonly run doc tests\ncomma-separated list of other files types to check …\nclippy lints to forbid\nrerun tests even if the inputs are unchanged\nrender the documentation in JSON format in addition to the …\ndo not run doc tests\ndo not run doc tests\nrun all tests regardless of failure\nrun all tests regardless of failure\nonly run tests that result has been changed\nopen the docs in a browser\nforce {check,build,run}-pass tests to this mode.\nEither the profile for <code>config.toml</code> or another setup action.\nwhether to execute run-* tests\nrun suggested tests\nenable this to generate a Rustfix coverage file, which is …\nClean a specific stage without touching other artifacts. …\nAdditional <code>Cargo.toml</code> to sync and vendor\nextra arguments to be passed for the test tool being used …\nextra arguments to be passed for the test tool being used …\nAlways include version in subdir name\nclippy lints to warn on\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether the CI rustc is available for the given …\n<code>Config::try_run</code> wrapper for this module to avoid warnings …\nFor more information, see the output of …\nFor more information, see the output of …\nFor more information, see the output of …\nCollects and stores package metadata of each workspace …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvokes <code>cargo metadata</code> to get package metadata of each …\nMinimum version threshold for libstdc++ required when …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nC-compiler probing and detection.\nThis module facilitates the tracking system for major …\nBuild configuration for Rust’s release channels.\nVarious utility functions used throughout bootstrap.\nThis module renders the JSON output of libtest into a …\nThis module serves two purposes: 1. It is part of the <code>utils</code>…\nFacilitates the management and generation of tarballs.\nThis is essentially a <code>HashMap</code> which allows storing any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe compiler is targeting C.\nThe compiler is targeting C++.\nThe target programming language for a native compiler.\nObtains the name of a compiler in the clang suite.\nReturns the argument unchanged.\nObtains the name of a compiler in the GCC collection.\nCalls <code>U::from(self)</code>.\nKeeps track of major changes made to the bootstrap …\nUsed when build configurations continue working as before.\nUsed when the default value of an option changes, or …\nRepresents the ID of PR caused major change on bootstrap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides a short summary of the change that will guide …\nThis is not a git repository.\nThis is a git repository. If the info should be used (…\nThis is not a git repository, but the info can be fetched …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this is being built from a tarball.\nReturns whether this directory has a <code>.git</code> directory which …\nRead the commit information from the <code>git-commit-info</code> file …\nWrite the commit hash to the <code>git-commit-hash</code> file given …\nWrite the commit information to the <code>git-commit-info</code> file …\nWhat should be done when the command fails.\nWrapper around <code>std::process::Command</code>.\nCaptures the stream into memory.\nRepresents the output of an executed process.\nRepresents the current status of <code>BootstrapCommand</code>.\nDelay failure until the end of bootstrap invocation.\nIt was not even possible to start the command.\nImmediately stop bootstrap.\nThe command has started and finished with some status.\nIgnore the failure, the command can fail in an expected …\nHow should the output of a specific stream of the command …\nPrints the stream by inheriting it from the bootstrap …\nProvides access to the stdlib Command inside. FIXME: This …\nCreate a new BootstrapCommand. This is a helper function …\nIf in a CI environment, forces the command to run with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the source code location where this command was …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark the command as being executed, disarming the drop …\nRun the command, while printing stdout and stderr. Returns …\nRun the command, while capturing and returning all its …\nRun the command, while capturing and returning stdout, and …\nAdds a list of lookup paths to <code>cmd</code>’s dynamic library …\nAdds a list of lookup paths to <code>cmd</code>’s link library lookup …\nCreate a <code>--check-cfg</code> argument invocation for a given name …\nExtract the beta revision from the full version string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdapted from …\nPrepares <code>BootstrapCommand</code> that runs git inside the source …\nConverts <code>T</code> into a hexadecimal <code>String</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the file name given looks like a debug …\nReturns <code>true</code> if the file name given looks like a dynamic …\nReturns the corresponding relative library directory that …\nParses the <code>link_lib_path_var()</code> environment variable, …\nReturns the environment variable which the link library …\nReturns the linker arguments for rustc/rustdoc for the …\nReturns the linker arguments for rustc/rustdoc for the …\nReturns a flag that configures LLD to use only a single …\nRename a file if from and to are in the same filesystem or …\nReturns the last-modified time for <code>path</code>, or zero if it …\nUsed for download caching\nSets the file times for a given file at <code>path</code>.\nSpawn a process and return a closure that will wait for …\nSymlinks two directories, using junctions on Windows and …\nReturns an RAII structure that prints out how long it took …\nReturns the filename without the hash prefix added by the …\nReturns <code>true</code> if <code>dst</code> is up to date given that the file or …\nThe time it took to execute this test suite, or <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRenders the stdout characters one by one\nNumber of tests that were skipped due to already being …\nParses the <code>dylib_path_var()</code> environment variable, …\nReturns the environment variable which the dynamic library …\nGiven an executable called <code>name</code>, return the filename for …\nWrites the command invocation to a file if …\nParses the value of the “RUSTC_STAGE” environment …\nParses the value of the “RUSTC_VERBOSE” environment …\nFinds <code>key</code> and returns its value from the given list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")