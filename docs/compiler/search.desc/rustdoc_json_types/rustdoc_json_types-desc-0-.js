searchState.loadedDescShard("rustdoc_json_types", 0, "Rustdoc’s JSON output interface\nCan be specified as <code>extern &quot;aapcs&quot;</code>.\nThe ABI (Application Binary Interface) used by a function.\n<code>&lt;&#39;a, 32, B: Copy, C = u32&gt;</code>\nAn array type, e.g. <code>[u32; 15]</code>\nAn associated constant of a trait or a type.\nAn associated constant of a trait or a type.\nDescribes a bound applied to an associated type/constant.\nThe way in which an associate type/constant is bound.\nAn associated type of a trait or a type.\nAn associated type of a trait or a type.\nAn attribute macro <code>#[foo]</code>.\nA bang macro <code>foo!()</code>.\n<code>&amp;&#39;a mut String</code>, <code>&amp;str</code>, etc.\nA type is expected to comply with a set of bounds\nCan be specified as <code>extern &quot;C&quot;</code> or, as a shorthand, just …\nCan be specified as <code>extern &quot;cdecl&quot;</code>.\nA constant as a generic argument.\nDenotes a constant parameter.\nA constant.\nThe declaration of a constant, e.g. …\nThe declaration of a constant, e.g. …\nA constant.\nThe type is required to satisfy a set of bounds.\nThe root of the emitted JSON blob.\nExplicitly crate-wide visibility set with <code>pub(crate)</code>\nFor the most part items are private by default. The …\nInformation about the deprecation of an <code>Item</code>.\nA derive macro …\nThe value that distinguishes a variant in an <code>Enum</code> from …\nDynamic trait object type (<code>dyn Trait</code>).\nDynamic trait object type (<code>dyn Trait</code>).\nAn <code>enum</code>.\nAn <code>enum</code> declaration.\nAn <code>enum</code> declaration.\nA type must exactly equal another type.\nThe required value/type is specified exactly. e.g.\nA crate imported via the <code>extern crate</code> syntax.\nA crate imported via the <code>extern crate</code> syntax.\n<code>type</code>s from an <code>extern</code> block.\n<code>type</code>s from an <code>extern</code> block.\nMetadata of a crate, either the same crate on which <code>rustdoc</code>…\nThe version of JSON output that this crate represents.\nCan be specified as <code>extern &quot;fastcall&quot;</code>.\nA function declaration (including methods and other …\nA function declaration, e.g. <code>fn f() {}</code>\nA function declaration (including methods and other …\nA set of fundamental properties of a function.\nA type that is a function pointer.\nA function pointer type, e.g. <code>fn(u32) -&gt; u32</code>, …\nThe signature of a function.\nParameterized types. The contained string is the name of …\nOne argument in a list of generic arguments to a path …\nA set of generic arguments provided to a path segment, e.g.\nEither a trait bound or a lifetime bound.\nOne generic parameter accepted by an item.\nThe kind of a <code>GenericParamDef</code>.\nGeneric parameters accepted by an item and <code>where</code> clauses …\nAn opaque identifier for an item.\nAn <code>impl</code> block.\nAn <code>impl</code> block.\nAn <code>impl</code> block.\nAn opaque type that satisfies a set of bounds, …\nA generic argument that’s explicitly set to be inferred.\nA type that’s left to be inferred, <code>_</code>\nAnything that can hold documentation - modules, structs, …\nSpecific fields of an item.\nThe fundamental kind of an item. Unlike <code>ItemEnum</code>, this …\nInformation about an external (not defined in the local …\nA keyword declaration.\nA lifetime argument.\nDenotes a lifetime parameter.\nA lifetime is expected to outlive other lifetimes.\nA macro declaration.\nA macro_rules! declarative macro. Contains a single string …\nThe way a <code>ProcMacro</code> is declared to be used.\nIndicates that the trait bound relaxes a trait bound …\nIndicates that the trait bound must be applicable in both …\nA module declaration, e.g. <code>mod foo;</code> or <code>mod foo {}</code>.\nA module declaration, e.g. <code>mod foo;</code> or <code>mod foo {}</code>\nA module declaration, e.g. <code>mod foo;</code> or <code>mod foo {}</code>\nMarks the absence of a modifier.\nAny other ABI, including unstable ones.\nA lifetime bound, e.g.\n<code>Fn(A, B) -&gt; C</code>\nA pattern type, e.g. <code>u32 is 1..</code>\nA type that has a simple path to it. This is the kind of …\nA struct with named fields.\nA variant with no parentheses\nA trait and potential HRTBs\nA primitive type declaration. Declarations of this kind …\nA primitive type, e.g. <code>u32</code>.\nA primitive type, e.g. <code>u32</code>.\nBuilt-in numeric types (e.g. <code>u32</code>, <code>f32</code>), <code>bool</code>, <code>char</code>.\nA procedural macro attribute.\nA procedural macro usable in the <code>#[derive()]</code> attribute.\nA procedural macro.\nA procedural macro.\nExplicitly public visibility set with <code>pub</code>.\nAssociated types like <code>&lt;Type as Trait&gt;::Name</code> and <code>T::Item</code> …\nA raw pointer type, e.g. <code>*mut u32</code>, <code>*const u8</code>, etc.\nStructs, enums, unions and type aliases, e.g. …\nFor <code>pub(in path)</code> visibility.\nThe default ABI, but that can also be written explicitly …\nAn unsized slice type, e.g. <code>[u32]</code>.\nA range of source code.\nA <code>static</code> declaration.\nA <code>static</code> declaration.\nA declaration of a <code>static</code>.\nCan be specified as <code>extern &quot;stdcall&quot;</code>.\nA <code>struct</code>.\nA <code>struct</code> declaration.\nA <code>struct</code> declaration.\nA variant with named fields.\nA field of a struct.\nA field of a struct.\nThe kind of a <code>Struct</code> and the data specific to it, i.e. …\nCan be specified as <code>extern &quot;sysv64&quot;</code>.\nCan be specified as <code>extern &quot;system&quot;</code>.\nEither a type or a constant, usually stored as the …\nA <code>trait</code> declaration.\nA <code>trait</code> declaration.\nA <code>trait</code> declaration.\nA trait alias declaration, e.g. …\nA trait alias declaration, e.g. …\nA trait alias declaration, e.g. …\nA trait bound.\nA set of modifiers applied to a trait.\nA struct with unnamed fields.\nA variant with unnamed fields.\nA tuple type, e.g. <code>(String, u32, Box&lt;usize&gt;)</code>\nA type.\nA type argument.\nDenotes a type parameter.\nA type.\nA type alias declaration, e.g. …\nA type alias declaration, e.g. …\nA type alias declaration, e.g. …\nA <code>union</code>.\nA <code>union</code> declaration.\nA <code>union</code> declaration.\nA struct with no fields and no parentheses.\nA <code>use</code> statement.\nAn import of 1 or more items into scope, using the <code>use</code> …\nAn import of 1 or more items into scope, using the <code>use</code> …\n<code>use&lt;&#39;a, T&gt;</code> precise-capturing bound syntax\nA variant of an enum.\nA variant of a enum.\nA variant of a enum.\nThe kind of an <code>Enum</code> <code>Variant</code> and the data specific to it, …\nVisibility of an <code>Item</code>.\nOne <code>where</code> clause.\nCan be specified as <code>extern &quot;win64&quot;</code>.\nThe ABI used by the function.\nArguments provided to the associated type/constant.\nGeneric arguments to the type.\nStringified versions of the attributes on this item (e.g. …\nZero indexed Line and Column of the first character of the …\nThe kind of bound applied to the associated type/constant.\nConstraints that must be met by the implementor of the …\nCan be used to look up the name and html_root_url of the …\nThis can be used as a key to the <code>external_crates</code> map of …\nThe version string given to <code>--crate-version</code>, if any.\nInformation about the item’s deprecation, if present.\nThe discriminant, if explicitly specified.\nThe full markdown docstring of this item. Absent if there …\nZero indexed Line and Column of the last character of the …\nThe stringified expression of this constant. Note that its …\nThe expression that produced the discriminant.\nThe stringified expression for the initial value.\nMaps <code>crate_id</code> of items to a crate name and html_root_url …\nThe list of fields in the union.\nThe path to the source file for this span relative to the …\nThe type that the impl block is for.\nA single version number to be used in the future when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUsed for Higher-Rank Trait Bounds (HRTBs)\nUsed for Higher-Rank Trait Bounds (HRTBs)\nThe generic parameters and where clauses on this union.\nThe generic parameters and where clauses on this struct.\nInformation about the type parameters and <code>where</code> clauses of …\nInformation about the function’s type parameters and …\nInformation about the type parameters and <code>where</code> clauses of …\nInformation about the type parameters and <code>where</code> clauses of …\nInformation about the impl’s type parameters and <code>where</code> …\nInformation about the type parameters and <code>where</code> clauses of …\nWhether the function has a body, i.e. an implementation.\nWhether any fields have been removed from the result, due …\nWhether any variants have been removed from the result, …\nInformation about core properties of the function, e.g. …\nThe core properties of the function, such as the ABI it …\nHelper attributes defined by a macro to be used inside it.\nThe root URL at which the crate’s documentation lives.\nThe unique identifier of this item. Can be used to find …\nThe ID of the type.\nThe ID of the item being imported. Will be <code>None</code> in case of …\nThe implementations of the trait.\nAll impls (both of traits and inherent) for this union.\nAll impls (both of traits and inherent) for this struct. …\n<code>impl</code>s for the enum.\nThe implementations, inherent and of traits, on the …\nWhether or not the output includes private items.\nA collection of all items in the local crate as well as …\nThe type-specific fields describing this item.\nList of argument names and their type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this function async?\nWhether the trait is marked <code>auto</code> and is thus implemented …\nWhether the function accepts an arbitrary amount of …\nIs this function marked as <code>const</code>?\nWhether this is the root item of a crate.\nWhether the trait is dyn compatible.\nWhether this statement is a wildcard <code>use</code>, e.g. …\nWhether this constant is a bool, numeric, string, or char …\nThis is <code>true</code> for mutable statics, declared as …\nWhether this is a negative impl (e.g. <code>!Sized</code> or <code>!Send</code>).\nIf <code>true</code>, this module is not part of the public API, but it …\nWhether this is an impl that’s implied by the compiler …\nIs this function unsafe?\nWhether the trait is marked as <code>unsafe</code>.\nWhether this impl is for an unsafe trait.\nIs the static <code>unsafe</code>?\n<code>Item</code>s declared inside this module.\nAssociated <code>Item</code>s that can/must be implemented by the <code>impl</code> …\nThe list of associated items contained in this impl block.\nWhether this item is a struct, trait, macro, etc.\nThe kind of the struct (e.g. unit, tuple-like or …\nWhether the variant is plain, a tuple-like, or …\nThe kind of the parameter and data specific to a …\nHow this macro is supposed to be called: <code>foo!()</code>, <code>#[foo]</code> or …\nThe lifetime of the whole dyn object\nThis mapping resolves intra-doc links from the docstring …\nThe name of the crate.\nSome items such as impls don’t have names.\nThe name of the associated type/constant.\nName of the parameter.\nThe name of the type as declared, e.g. in\nMay be different from the last segment of <code>source</code> when …\nThe name of the type.\nThe reason for deprecation and/or what alternatives to use.\nThe output type, if specified.\nA list of generic parameter definitions (e.g. …\nThe bounds that are associated with the alias.\nThe list of path components for the fully qualified path …\nMaps IDs to fully qualified paths and other info helpful …\nThe list of the names of all the trait methods that weren…\nThe id of the root <code>Module</code> item of the local crate.\nInformation about the function signature, or declaration.\nThe signature of the function.\nUsually a version number when this <code>Item</code> first became …\nThe full path being imported.\nThe source location of this item (absent if it came from a …\nThe path to the trait.\nThe trait being implemented or <code>None</code> if the impl is …\nAll the traits implemented. One of them is the vtable, and …\nThe type referred to by this alias.\nThe type of the static.\nThe value of the evaluated expression for this constant, …\nThe numerical value of the discriminant. Stored as a …\nThe list of variants in the enum.\nBy default all documented items are public, but you can …\nA list of where predicates (e.g. …\nThe list of each argument on this type.\nAssociated type or constant bindings (e.g. <code>Item=i32</code> or …\nThe input types, enclosed in parentheses.\nThe output type provided after the <code>-&gt;</code>, if present.\nUsed for Higher-Rank Trait Bounds (HRTBs)\nThe context for which a trait is supposed to be used, e.g. …\nThe full path to the trait.\nBounds applied directly to the type. Note that the bounds …\nThe default type for this parameter, if provided, e.g.\nThe stringified expression for the default value, if …\nThis is normally <code>false</code>, which means that this generic …\nLifetimes that this lifetime parameter is required to …\nThe type of the constant as declared.\nThe bounds for this associated type. e.g.\nThe declared constant itself.\nThe generic parameters and where clauses on ahis …\nThe name of the imported crate.\nIf the crate is renamed, this is its name in the crate.\nThe type of the constant.\nThe type of the constant.\nInside a trait declaration, this is the default for the …\nInside a trait declaration, this is the default value for …\nThe list of fields in the struct.\nWhether any fields have been removed from the result, due …\nThe generic arguments provided to the associated type.\nThis is <code>true</code> for <code>*mut _</code> and <code>false</code> for <code>*const _</code>.\nThis is <code>true</code> for <code>&amp;mut i32</code> and <code>false</code> for <code>&amp;i32</code>\nThe stringified expression that is the length of the array.\nThe name of the lifetime of the reference, if provided.\nThe name of the associated type in the parent type.\nThe type with which this type is associated.\n<code>None</code> iff this is an <em>inherent</em> associated type.\nThe type of the contained element.\nThe base type, e.g. the <code>u32</code> in <code>u32 is 1..</code>\nThe type of the pointee.\nThe type of the pointee, e.g. the <code>i32</code> in <code>&amp;&#39;a mut i32</code>\nThe list of variants in the enum. All of the corresponding …\nWhether any variants have been removed from the result, …\nID of the module to which this visibility restricts items.\nThe path with which <code>parent</code> was referenced (like …\nThe set of bounds that constrain the type.\nUsed for Higher-Rank Trait Bounds (HRTBs)\nThe left side of the equation.\nThe name of the lifetime.\nThe lifetimes that must be encompassed by the lifetime.\nThe right side of the equation.\nThe type that’s being constrained.")