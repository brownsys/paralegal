searchState.loadedDescShard("cargo_util", 0, "Miscellaneous support code used by Cargo.\nA builder object for an external process, similar to …\nA list of arguments to pass to the program.\nThe exit status of the process.\nThe directory to run the program from.\nA detailed description to show to the user why the process …\n<code>true</code> to include environment variable in display.\nA simple disk usage estimator.\nDetermines the disk usage of all files in the given …\nAny environment variables that should be set for the …\nConverts an <code>ExitStatus</code>  to a human-readable string …\nWhether or not this running in a Continuous Integration …\nReturns <code>true</code> if the given process exit code is something a …\nThe <code>make</code> jobserver. See the jobserver crate for more …\nVarious utilities for working with files and paths.\nError value for <code>crate::ProcessBuilder</code> when a process fails.\nThe program to execute.\n<code>true</code> to retry with an argfile if hitting “command line …\nThe stderr from the process.\nData to write to stdin.\nThe stdout from the process.\nA list of wrappers that wrap the original program when …\nDetermines the disk usage of all files in the given …\nReturns an iterator that walks up the directory hierarchy …\nEquivalent to <code>write()</code>, but appends to the end instead of …\nConverts UTF-8 bytes to a path.\nCopies a file from one location to another.\nCreates a new file.\nEquivalent to <code>std::fs::create_dir_all</code> with better error …\nCreates an excluded from cache directory atomically with …\nReturns a list of directories that are searched for …\nReturns the name of the environment variable used for …\nMarks the directory as excluded from archives/backups.\nMark an existing directory as excluded from backups and …\nMarks the directory as excluded from content indexing.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJoins paths into a string suitable for the <code>PATH</code> …\nHardlink (file) or symlink (dir) src to dst if possible, …\nReturns metadata for a file (follows symlinks).\nReturns the last modification time of a file.\nReturns the maximum mtime of the given path, recursing into\nNormalize a path, removing things like <code>.</code> and <code>..</code>.\nOpens an existing file.\nConverts a path to UTF-8 bytes.\nReads a file to a string.\nReads a file into a bytes vector.\nEquivalent to <code>std::fs::remove_dir</code> with better error …\nEquivalent to <code>std::fs::remove_dir_all</code> with better error …\nEquivalent to <code>std::fs::remove_file</code> with better error …\nReturns the absolute path of where the given executable is …\nChanges the filesystem mtime (and atime if possible) for …\nRecord the current time on the filesystem (using the …\nStrips <code>base</code> from <code>path</code>.\nReturns metadata for a file without following symlinks.\nWrites a file to disk.\nWrites a file to disk atomically.\nEquivalent to <code>write()</code>, but does not write anything if the …\nA builder object for an external process, similar to …\n(chainable) Adds <code>arg</code> to the args list.\n(chainable) Adds multiple <code>args</code> to the args list.\nA list of arguments to pass to the program.\n(chainable) Replaces the args list with the given <code>args</code>.\nConverts <code>ProcessBuilder</code> into a <code>std::process::Command</code>, and …\nBuilds the command with an <code>@&lt;path&gt;</code> argfile that contains …\nBuilds a command from <code>ProcessBuilder</code> for everything but …\n(chainable) Sets the current working directory of the …\nThe directory to run the program from.\nForces the command to use <code>@path</code> argfile.\nEnables environment variable display.\n<code>true</code> to include environment variable in display.\n(chainable) Sets an environment variable for the process.\nAny environment variables that should be set for the …\n(chainable) Unsets an environment variable for the process.\nRuns the process, waiting for completion, and mapping …\nReplaces the current process with the target process.\nExecutes the process, returning the stdio output, or an …\nExecutes a command, passing each line of stdout and stderr …\nReturns the argument unchanged.\nGets the program arguments.\nGets the current working directory for the process.\nGets an environment variable as the process will see it …\nGets all environment variables explicitly set or unset for …\nGets the executable name.\nSets the <code>make</code> jobserver. See the jobserver crate for more …\nCalls <code>U::from(self)</code>.\nThe <code>make</code> jobserver. See the jobserver crate for more …\nCreates a new <code>ProcessBuilder</code> with the given executable …\nLike <code>Command::output</code> but with a better error message.\nCreates new pipes for stderr, stdout, and optionally stdin.\n(chainable) Sets the executable for the process.\nThe program to execute.\nEnables retrying with an argfile if hitting “command …\n<code>true</code> to retry with an argfile if hitting “command line …\nLike <code>Command::status</code> but with a better error message.\nSets a value that will be written to stdin of the process …\nData to write to stdin.\nWraps an existing command with the provided wrapper, if it …\nA list of wrappers that wrap the original program when …\nThe exit status of the process.\nCreates a <code>ProcessError</code> with “could not execute process …\nA detailed description to show to the user why the process …\nConverts an <code>ExitStatus</code>  to a human-readable string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the given process exit code is something a …\nCreates a new <code>ProcessError</code>.\nCreates a new <code>ProcessError</code> with the raw output data.\nThe stderr from the process.\nThe stdout from the process.\nMake a path to a dependency, which aligns to\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")