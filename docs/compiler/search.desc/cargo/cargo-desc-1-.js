searchState.loadedDescShard("cargo", 1, "Emits warnings of unused patches case by case.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLocks each <code>[replace]</code> entry to a specific Package ID if the …\nPackages to be downloaded.\nInforms <code>registry</code> and <code>version_pref</code> that <code>[patch]</code> entries are …\nIn this function we’re responsible for informing the …\nResolves all dependencies for a package using an optional …\nResolves all dependencies for the workspace using the …\nResolves dependencies for some packages of the workspace, …\nThe features activated per package.\nThe narrowed resolve, with the specific features enabled, …\nThe resolve for the entire workspace.\nThe kind of edge, for separating dependencies into …\nEntry point for the <code>cargo tree</code> command.\nDisplay depth of the dependency tree. If non-negative …\nIf <code>true</code>, run in a special mode where it will scan for …\nThe dependency kinds to display.\nA format string indicating how each package should be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCode for building the graph used by <code>cargo tree</code>.\nIncludes features in the tree as separate nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, duplicates will be repeated. If <code>false</code>, duplicates …\nExcludes proc-macro dependencies.\nThe packages to display the tree for.\nThe packages to prune from the display of the dependency …\nThe style of prefix for each line.\nPrints a tree for each given root.\nPrints all the dependencies of a package for the given …\nPrints a package and all of its dependencies.\nThe platform to filter for.\nFeatures that are enabled on this package.\nName of the feature.\nIndex of the package node this feature is for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParser for the <code>--format</code> string for <code>cargo tree</code>.\nA substitution to place in the output. For example, the …\nIndicates an error in the format string. The given string …\n<code>cargo tree</code> format parser.\nRaw text to include in the output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nThe kind of edge, for separating dependencies into …\nSet of outgoing edges for a single node.\nA graph of dependencies.\nAdds nodes for features requested on the command-line for …\nAdds an edge pointing to the given node.\nAdds a feature node between two nodes.\nRecursively add feature nodes for all features enabled by …\nRecursively adds connections between features in the …\nAdds a new node to the graph, returning its new index.\nAdds a single package node (if it does not already exist).\nBuilds the graph.\nSet of indexes of feature nodes that were added via the …\nReturns a list of nodes the given node index points to for …\nMap of dependency names, used for building internal …\nThe indexes of <code>edges</code> correspond to the <code>nodes</code>. That is, …\nReturns a list of nodes that are considered “duplicates…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new graph by removing all nodes not reachable …\nReturns <code>true</code> if the given node has any outgoing edges.\nIndex maps a node to an index, for fast lookup.\nGiven a slice of <code>PackageIds</code>, returns the indexes of all …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the direction of all edges.\nReturns <code>true</code> if the given feature node index is a feature …\nGets a node by index.\nMap for looking up packages.\nFeatures that are enabled on this package.\nName of the feature.\nIndex of the package node this feature is for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHACK: Perform the bare minimum of <code>prepare_for_publish</code> …\nImplementation of configuration for various sources.\nHome of the <code>GitSource</code>.\nA <code>Source</code> for registry-based packages.\n<code>Source</code> trait for sources of Cargo packages.\nConfiguration for a particular source, found in TOML …\nDefinition of a source in a config file.\nRepresents the entire <code>[source]</code> replacement table in Cargo …\nAdds a source config with an associated name.\nAdds a source config from TOML definition.\nThe git branch.\nMapping of source name to the toml configuration.\nA directory source.\nCreates the default set of sources that doesn’t take …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>GlobalContext</code> this source config map is …\nA git source. Value is a URL.\n<code>SourceId</code> this source corresponds to, inferred from the …\nMapping of <code>SourceId</code> to the source name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the <code>Source</code> for a given <code>SourceId</code>.\nGets the <code>Source</code> for a given <code>SourceId</code> without performing …\nA local registry source.\nLike <code>SourceConfigMap::empty</code> but includes sources from …\nLike <code>SourceConfigMap::new</code> but includes sources from source …\nMapping of sources to local registries that will be …\nA registry source. Value is a URL.\nIndicates this source should be replaced with another of …\nWhether or not this source is replaced with another.\nThe git revision.\nThe git tag.\nThe checksum file to ensure the integrity of a package in …\n<code>DirectorySource</code> contains a number of crates on the file …\nChecksums of each source file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecksum of the package. Normally it is computed from the …\nPackages that this sources has discovered.\nThe root path of this source.\nThe unique identifier of this source.\nA local checkout of a particular revision from a …\nA local clone of a remote repository’s database. …\nA remote repository. It gets cloned into a local …\n<code>GitSource</code> contains one or more packages gathering from a …\nThe git database where this checkout is cloned from.\nFor <code>-Zgitoxide</code> integration.\nAttempts to fetch the given git <code>reference</code> for a Git …\nThe identifier of this source for Cargo’s Git cache …\nSSH host key validation support.\nThe revision which a git source is locked to.\nThis module contains all code sporting <code>gitoxide</code> for …\nPath to the root of the underlying Git repository on the …\nPath to the root of the underlying Git repository on the …\nThe underlying path source to discover packages inside the …\nDisables status messages.\nThe git remote which we’re going to fetch from.\nThe remote repository where this database is fetched from.\nUnderlying Git repository instance for this database.\nUnderlying Git repository instance for this checkout.\nResolves <code>GitReference</code> to an object ID with objects the <code>repo</code>…\nThe git revision this checkout is for.\nA short string that uniquely identifies the version of the …\nSee <code>GitSource</code>.\nThe unique identifier of this source.\nURL to a remote repository.\nUtilities for handling git repositories, mainly around …\nA repository belongs to a git dependency.\nA repository belongs to a Cargo registry.\nThe kind remote repository to fetch.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nObtain the kind of history we would want for a fetch from …\nThese are host keys that are hard-coded in cargo to …\nList of keys that public hosts have rotated away from.\nPart of the hard-coded bundled keys in Cargo.\nSome general error happened while validating the known …\nLoaded from cargo’s config system.\nLoaded from a file from disk.\nThe host key was not found, but there was a matching known …\nThe host key was found, but does not match the remote’s …\nThe host key was not found.\nThe host key was found with a @revoked marker, it must not …\nA single known host entry.\nThe location where a host key was located.\nThe git2 callback used to validate a certificate (only ssh …\nChecks if the given host/host key pair is known.\nChecks a host key against a loaded set of known hosts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns whether or not the given host matches this known …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of files to try loading OpenSSH-formatted …\nLoads an OpenSSH <code>known_hosts</code> file.\nThe hostname. May be comma separated to match multiple …\nThe location of the user’s <code>known_hosts</code> file.\nThe location to display in an error message instructing …\nWe need <code>git_binary</code> configuration as well for being able to …\nThe reason we are opening a git repository.\nConvert <code>git</code> related cargo configuration into the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSometimes we don’t need to pay for figuring out the …\nProduce a repository with everything pre-configured …\nReinitializes a given Git repository. This is useful when …\nFor the time being, <code>repo_path</code> makes it easy to instantiate …\nA Git reference that would trigger extra fetches when …\n<code>GitSource</code> contains one or more packages gathering from a …\nA locked revision of the actual Git commit object ID.\nIndicates a Git revision that might be locked or deferred …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an identifier from a URL, essentially turning …\nThe identifier of this source for Cargo’s Git cache …\nLike <code>ident()</code>, but appends <code>-shallow</code> to it, turning …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe revision which a git source is locked to.\nCreates a git source for the given <code>SourceId</code>.\nThe underlying path source to discover packages inside the …\nDisables status messages.\nReturns the packages discovered by this source. It may …\nThe git remote which we’re going to fetch from.\nA short string that uniquely identifies the version of the …\nThe unique identifier of this source.\nGets the remote repository URL.\nA file indicates that if present, <code>git reset</code> has been done …\nSee <code>GitCheckout::reset</code> for rationale on this type.\nThe result of GitHub fast path check. See <code>github_fast_path</code> …\nA local checkout of a particular revision from a …\nA local clone of a remote repository’s database. …\nA remote repository. It gets cloned into a local …\nA short abbreviated OID.\nDon’t know whether local rev is up to date. We’ll …\nThe following SHA must be fetched in order for the local …\nThe local rev (determined by <code>reference.resolve(repo)</code>) is …\nConstructs an absolute URL for a child submodule URL with …\nViews the short ID as a <code>str</code>.\nFetches and checkouts to a reference or a revision from …\nRemoves temporary files left from previous activity.\nClone a repo for a <code>revision</code> into a local path from a …\nChecks if the database contains the object of this <code>oid</code>..\nCheckouts to a revision at <code>dest</code>ination from this database.\nThe git database where this checkout is cloned from.\nCreates a <code>GitDatabase</code> of this remote at <code>db_path</code>.\nAttempts to fetch the given git <code>reference</code> for a Git …\nAttempts to use <code>git</code> CLI installed on the system to fetch a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts GitHub’s special fast path for testing if we’…\n<code>gitoxide</code> uses shallow locks to assure consistency when …\nInitializes a Git repository at <code>path</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the <code>HEAD</code> of this checkout points to the expected …\nWhether a <code>url</code> is one from GitHub.\nWhether <code>rev</code> is a shorter hash of <code>oid</code>.\nWhether a <code>rev</code> looks like a commit hash (ASCII hex digits).\nAttempts to <code>git gc</code> a repository.\nCreates an instance of <code>GitCheckout</code>. This doesn’t imply …\nCreates an instance for a remote repository URL.\nPath to the root of the underlying Git repository on the …\nPath to the root of the underlying Git repository on the …\nReinitializes a given Git repository. This is useful when …\nThe remote repository where this database is fetched from.\nGets the remote repository URL.\nUnderlying Git repository instance for this database.\nUnderlying Git repository instance for this checkout.\n<code>git reset --hard</code> to the given <code>obj</code> for the <code>repo</code>.\nSimilar to <code>reset()</code>. This roughly performs <code>git reset --hard</code> …\n<code>resolve_ref</code>s this reference with this database.\nResolves <code>GitReference</code> to an object ID with objects the <code>repo</code>…\nTurns a full commit hash revision into an oid.\nThe git revision this checkout is for.\nGet a short OID for a <code>revision</code>, usually 7 chars or more if …\nLike <code>git submodule update --recursive</code> but for this git …\nGets the remote repository URL.\nURL to a remote repository.\nPrepare the authentication callbacks for cloning a git …\nPrepares the callbacks for fetching a git repository.\nA <code>Source</code> that overlays one source over another, pretending …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA source that represents a package gathered at the root …\nA source that represents one or multiple packages gathered …\nSee <code>PathSource::list_files</code>.\nReturns <code>Some(gix::Repository)</code> if the discovered repository …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the last modified file in a package.\nGets the last modified file in a package.\nGets the last modified file in a package.\nList all files relevant to building this package inside …\nList all files relevant to building this package inside …\nList all files relevant to building this package inside …\nLists files relevant to building this package inside this …\nLists files relevant to building this package inside this …\nDiscovers packages inside this source if it hasn’t yet …\nDiscovers packages inside this source if it hasn’t yet …\nWhether this source has loaded all package information it …\nInvoked with an absolute path to a directory that contains …\nCreates a new source which is walked recursively to …\nPackages that this sources has discovered.\nPackages that this sources has discovered.\nReturns the root path of this source.\nReturns the root path of this source.\nThe root path of this source.\nThe root path of this source.\nPreloads a package for this source. The source is assumed …\nReturns the packages discovered by this source. It may …\nGets the package on the root path.\nThe unique identifier of this source.\nThe unique identifier of this source.\nAvoid redundant unused package warnings\nThe cache is valid. The cached data should be used.\nAvailable for consideration\nThe cache is out of date. Returned data should be used.\nThe <code>.crate</code> file is not downloaded, here’s the URL to …\nA parsed representation of a summary from the index. This …\nAn error was encountered despite being a supported schema …\nResult from loading data from a registry.\nThe content inside <code>.cargo-ok</code>. See …\nThe status of <code>RegistryData::download</code> which indicates if a …\nFile name of <code>RegistryConfig</code>.\nThe requested crate was found.\nNot available as we are offline and create is not …\nThe <code>.cargo-ok</code> file is used to track if the source is …\nThe <code>.crate</code> file is already downloaded. <code>File</code> is a handle to …\nThe <code>config.json</code> file stored in the index.\nAn abstract interface to handle both a local and remote …\nA <code>Source</code> implementation for a local or a remote registry.\nFrom a newer schema version and is likely incomplete or …\nYanked within its registry\nAPI endpoint for the registry. This is what’s actually …\nValidates that the global package cache lock is held.\nWhether all operations require authentication. See RFC 3139…\nBlock until all outstanding <code>Poll::Pending</code> requests are …\nLoads the <code>config.json</code> file and returns it.\nDecode the configuration stored within the registry.\nDownload endpoint for all crates.\nShared download logic between <code>HttpRegistry</code> and …\nPrepare to start downloading a <code>.crate</code> file.\nFinish a download by saving a <code>.crate</code> file to disk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLocal reference to <code>GlobalContext</code> for convenience.\nTurns the downloaded <code>.crate</code> tarball file into a <code>Package</code>.\nAccess to a HTTP-based crate registry. See <code>HttpRegistry</code> …\nManagement of the index of a registry source.\nInterface for managing the on-disk index.\nReturns the path to the index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates locally cached data.\nReturns whether or not the <code>.crate</code> file is already …\nIs the local cached data up-to-date?\nLoads the JSON for a specific named package from the index.\nAccess to a regstiry on the local filesystem. See …\nCreates a <code>Source</code> of a local registry, with …\nGet the maximum unpack size that Cargo permits based on a …\nA unique name of the source (typically used as the …\nCreates a source of a registry. This is a inner helper …\nAbstraction for interfacing to the different registry …\nPerforms initialization for the registry.\nAccess to a Git index based registry. See <code>RemoteRegistry</code> …\nCreates a <code>Source</code> of a “remote” registry. It could be …\nYanked versions that have already been selected during …\nSet the current <code>umask</code> value for the given tarball. No-op …\nIf quiet, the source should not display any progress or …\nGenerates a unique name for <code>SourceId</code> to have a unique path …\nThe unique identifier of this source.\nThe path where crate files are extracted (…\nUnpacks a downloaded package into a location where it’s …\nThe version of <code>.cargo-ok</code> file\nA set of packages that should be allowed to be used, even …\nVersion of this data to determine whether it is out of …\nChecks if <code>pkg</code> is downloaded and ready under the directory …\nVerifies the integrity of <code>data</code> with <code>checksum</code> and persists …\nChecks if a tarball of <code>pkg</code> has been already downloaded …\nRepresents a complete <code>Download</code> from an HTTP request.\nRepresents a single index file download, including its …\nState for currently pending index file downloads.\nHTTPS headers <code>HttpRegistry</code> cares about.\nA registry served by the HTTP-based registry API.\nHTTP status code <code>HttpRegistry</code> cares about.\nMoves failed <code>Download</code>s that are ready to retry to the …\nAll headers, including explicit headers above.\nHeaders received with an HTTP 401.\nShould we include the authorization header?\nNumber of times the caller has requested blocking. This is …\nPath to the cache of <code>.crate</code> files (…\nGet the registry configuration from either cache or remote.\nGet the cached registry configuration, if it exists.\nActual downloaded data, updated throughout the lifetime of …\nState for currently pending index downloads.\nNumber of downloads that have successfully finished.\nHave we started to download any index files?\nWhat paths have we already fetched since the last index …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs the full URL to download a index file.\nChecks the results inside the <code>HttpRegistry::multi</code> handle, …\nSplits HTTP <code>HEADER: VALUE</code> to a tuple.\nHTTP headers.\nPath to the registry index (…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an index file of <code>path</code> is up-to-date.\nUrl to get a token for the registry.\nHTTP multi-handle for asynchronous/parallel requests.\nDoes the config say that we can use HTTP multiplexing?\nThe name of this source, a unique string (across all …\nCreates a HTTP-rebased remote registry for <code>source_id</code>.\nThe next ID to use for creating a token (see …\nThe path of the package that we’re downloading.\nWhen a download is started, it is added to this map. The …\nSet of paths currently being downloaded. This should stay …\nProgress bar.\nDisables status messages.\nCached registry configuration.\nHas the client requested a cache update?\nThe final result of each download.\nLogic used to track retrying this download if it’s a …\nDownloads that have failed and are waiting to retry again …\nThe unique identifier of this registry source.\nSetup the necessary works before the first fetch gets …\nUpdates the state of the progress bar for downloads.\nThe token for this download, used as the key of the …\nStore the server URL without the protocol prefix (sparse+)\nAvailable for consideration\nThe maximum schema version of the <code>v</code> field in the index …\nA single line in the index representing a single version …\nA parsed representation of a summary from the index. This …\nAn error was encountered despite being a supported schema …\nA lazily parsed <code>IndexSummary</code>.\nNot available as we are offline and create is not …\nAn actually parsed summary.\nA dependency as encoded in the <code>IndexPackage</code> index JSON.\nManager for handling the on-disk index.\nAn internal cache of summaries for a particular package.\nA summary which has not been parsed, The <code>start</code> and <code>end</code> are …\nFrom a newer schema version and is likely incomplete or …\nYanked within its registry\nExtract the summary from any variant\nA layer of on-disk index cache for performance.\nManager of on-disk caches.\nChecksum for verifying the integrity of the corresponding …\nClears the in-memory summaries cache.\nWhether or not default features are enabled.\nAll kinds of direct dependencies of the package, including …\nSet of features defined for the package, i.e., <code>[features]</code> …\nSet of features enabled for this dependency.\nThis field contains features with new, extended syntax. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>GlobalContext</code> reference for convenience.\nReturns the hash listed for a specified <code>PackageId</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an encoded dependency in the registry to a cargo …\nExtract the summary from any variant\nReturns <code>true</code> if the index summary is <code>Offline</code>.\nLooks into the summaries to check if a package has been …\nReturns <code>true</code> if the index summary is <code>Yanked</code>.\nThe dependency kind. “dev”, “build”, and “normal…\nNative library name this package links to.\nActually parses what summaries we have available.\nName of the package.\nName of the dependency. If the dependency is renamed, the …\nCreates an empty registry index at <code>path</code>.\nWhether or not this is an optional dependency.\nThe original name if the dependency is renamed.\nExtract the package id from any variant\nParses this “maybe a summary” into a <code>Parsed</code> for sure …\nParse out a <code>Summaries</code> instances from on-disk state.\nParses a line from the registry’s index file into an …\nParses the contents of an on-disk cache, aka <code>SummariesCache</code>…\nRoot directory of the index for the registry.\nWhether or not this is a public dependency. Unstable. See …\nAttempts to find the packages that match a <code>name</code> and a …\nInner implementation of <code>Self::query_inner</code>. Returns the …\nA raw vector of uninterpreted bytes. This is what <code>Unparsed</code> …\nThe SemVer requirement for this dependency.\nRequired version of rust\nLike <code>slice::split</code> but is optimized by <code>memchr</code>.\nLoad a list of summaries for <code>name</code> package in this registry …\nIn-memory cache of summary data.\nThe target platform for this dependency.\nThe schema version for this entry.\nThe version of this dependency.\nAll known versions of a crate, keyed from their <code>Version</code> to …\nIf <code>true</code>, Cargo will skip this version when resolving.\nThe current version of <code>SummariesCache</code>.\nManages the on-disk index caches.\nA representation of the cache on disk that Cargo maintains …\nThe root path where caches are located.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>GlobalContext</code> reference for convenience.\nGets the cache associated with the key.\nFor cache invalidation, we tracks the index file version …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates the cache associated with the key.\nCreates a new instance of the on-disk index cache manager.\nDeserializes an on-disk cache.\nAssociates the value with the key.\nSerializes itself with a given <code>index_version</code>.\nJSON blobs of the summaries. Each JSON blob has a <code>Version</code> …\nA local registry is a registry that lives on the …\nReturns the argument unchanged.\nPath to the registry index.\nCalls <code>U::from(self)</code>.\nCreates a local registry at <code>root</code>.\nDisables status messages.\nRoot path of this local registry.\nPath where this local registry extract <code>.crate</code> tarballs to.\nWhether this source has updated all package information it …\nA remote registry is a registry that lives at a remote URL …\nPath to the cache of <code>.crate</code> files (…\nThis stores sha value of the current HEAD commit for …\nGets the current version of the registry index.\nReturns the argument unchanged.\nGet the object ID of the HEAD commit from the underlying …\nThe current HEAD commit of the underlying Git repository.\nThis reference is stored so that when a registry needs …\nPath to the registry index (…\nCalls <code>U::from(self)</code>.\nRead the general concept for <code>invalidate_cache()</code> on …\nWhether the registry is up-to-date. See <code>Self::mark_updated</code> …\nRead the general concept for <code>load()</code> on <code>RegistryData::load</code>.\nMarks this registry as up-to-date.\nThe name of this source, a unique string (across all …\nWhether this registry needs to update package information.\nCreates a Git-rebased remote registry for <code>source_id</code>.\nDisables status messages.\nCreates intermediate dirs and initialize the repository.\nA Git repository that contains the actual index we want.\nThe unique identifier of this registry source.\nReturns a <code>git2::Tree</code> object of the current HEAD commit of …\nA Git tree object to help this registry find crate …\nA source that replaces one source with the other. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this source a built-in replacement of crates.io?\nCreates a replaced source.\nThe identifier of the new replacement source.\nThe identifier of the original source.\nA query for packages close to the given dependency …\nNot yet downloaded. Here is the URL to download the <code>Package</code>…\nA query for packages exactly matching the given dependency …\nA download status that represents if a <code>Package</code> has already …\nMatch a dependency in all ways and will normalize the …\nDefines how a dependency query will be performed for a …\nThe <code>Package</code> is already downloaded.\nA query for packages close to the given dependency …\nAn abstraction of different sources of Cargo packages.\nA <code>HashMap</code> of <code>SourceId</code> to <code>Box&lt;Source&gt;</code>.\nMerge the given map into self.\nAdd a number of crates that should be whitelisted for …\nBlock until all outstanding <code>Poll::Pending</code> requests are …\nDescribes this source in a human readable fashion, used …\nStarts the process to fetch a <code>Package</code> for the given …\nConvenience method used to <strong>immediately</strong> fetch a <code>Package</code> for …\nGenerates a unique string which represents the fingerprint …\nGives the source the downloaded <code>.crate</code> file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike <code>HashMap::get</code>.\nLike <code>HashMap::get_mut</code>.\nLike <code>HashMap::insert</code>, but derives the <code>SourceId</code> key from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnsure that the source is fully up-to-date for the current …\nReturns whether a source is being replaced by another here.\nQuery if a package is yanked. Only registry sources can …\nLike <code>HashMap::len</code>.\nCreates an empty map.\nAttempts to find the packages that match a dependency …\nGathers the result from <code>Source::query</code> as a list of …\nReturns the replaced <code>SourceId</code> corresponding to this source.\nReturns whether or not this source will return <code>IndexSummary</code>…\nIf quiet, the source should not display any progress or …\nReturns the <code>SourceId</code> corresponding to this source.\nLike <code>HashMap::iter_mut</code>.\nReturns whether or not this source will return <code>IndexSummary</code>…\nIf this source supports it, verifies the source of the …\nAuthorization data that may be required to attach when …\nText to display to the user of what is being downloaded.\nURL to download the content.\nA newtype wrapper around <code>Url</code> which represents a “…\nA locked file.\nA “filesystem” is intended to be a globally shared, …\nDoes not display an exact value of how far along it is.\nA type that can be interpreted as a relative Url and …\nThe exact locked version and the original version …\nDisplays progress as a percentage.\nThe exact requested version and the original version …\nCLI progress bar.\nIndicates the style of information for displaying the …\nA simple, threadsafe, queue of items of type <code>T</code>\nDisplays progress as a ratio.\nStable 128-bits Sip Hasher\nRegistry authentication support.\nSupport for locking the package and index caches.\nCargo’s config system.\nAn expected cost for building this package. Used to …\nBuilt-in Cargo credential providers\nA list of all known keys to build.\nA graph-like structure used to represent a set of …\nA small TCP server to handle collection of diagnostics …\nFile-locking support.\nGet the current <code>umask</code> value.\nA hasher that produces the same values across releases and …\nReturns the hostname of the current system.\nFormats a number of bytes into a human readable …\nPerforms the conversion\nJob management (mostly for windows)\nAn implementation of IPC locks, guaranteed to be released …\nUtilities for networking.\nThe source path and its current dir for use in compilation.\nThe relative priority of this package. Higher values …\nSupport for CLI progress bars.\nHelpers for validating and checking names like package and …\nA reverse mapping of a package to all packages that depend …\nExtend <code>semver::VersionReq</code> with  <code>matches_prerelease</code> which …\nUtilities to help with working with sqlite.\nUtilities for in-place editing of Cargo.toml manifests.\nAn authorization error from accessing a registry.\nList of credential providers built-in to Cargo. Keep in …\n<code>[registries.NAME]</code> tables.\nThe <code>[registry]</code> table, which more keys than the …\nReturns the token to use for the given registry. If a …\nReturns the token to use for the given registry.\nStore a token in the cache for future calls.\nGet the list of credential providers for a registry source.\nThe <code>registry.default</code> config value.\nShould the _TOKEN environment variable name be included …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog in to the given registry.\nUrl where the user could log in.\nLog out from the given registry.\nSpecific reason indicating what failed\nGet the credential configuration for a <code>SourceId</code>.\nUse the <code>[credential-alias]</code> table to see if the provider …\nUrl that was attempted\nWhether or not a lock attempt should block.\nThe filename for the <code>CacheLockMode::DownloadExclusive</code> lock.\nA held lock guard.\nThe style of lock to acquire.\nA locker that can be used to acquire locks.\nThe state of the <code>CacheLocker</code>.\nA <code>DownloadExclusive</code> lock ensures that only one cargo is …\nWhether or not a lock attempt blocked or succeeded.\nThe filename for the <code>CacheLockMode::MutateExclusive</code> and …\nA <code>MutateExclusive</code> lock ensures no other cargo is reading …\nA file lock, with a counter to assist with recursive …\nA <code>Shared</code> lock allows multiple cargos to read from the …\nThe cache lock guards the package cache used for download …\nNumber locks held, to support recursive locking.\nUnlocks a previously acquired lock.\nThe filename of the lock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLow-level lock count increment routine.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is <code>true</code>, it is an exclusive lock, otherwise it is …\nReturns whether or not a lock is held for the given mode …\nAcquires a lock with the given mode, possibly blocking if …\nThe file lock.\nAcquires an exclusive lock.\nAcquires an exclusive lock, blocking if held by another …\nAcquires an exclusive lock, returns <code>WouldBlock</code> if held by …\nAcquires a shared lock.\nAcquires a shared lock, blocking if held by another locker.\nAcquires a shared lock, returns <code>WouldBlock</code> if held by …\nReturns whether or not the error appears to be from a …\nThe mutate lock is used to either guard the entire package …\nCreates a new <code>CacheLocker</code>.\nThe state of the locker.\nAcquires a lock with the given mode, returning <code>None</code> if …\nA newtype wrapper around <code>Url</code> which represents a “…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the raw canonicalized URL, although beware that …\nWhen encountered, store the associated value(s) in …\nThe abstract representation of a command line argument. …\nBehavior of arguments when they are encountered while …\nContainer for parse results.\nBuild a command-line interface.\nWhen encountered, increment a <code>u8</code> counter starting from <code>0</code>.\nAll other commands, which allow any valid custom named …\nWhen encountered, display <code>Command::print_help</code>\nWhen encountered, display <code>Command::print_long_help</code>\nWhen encountered, display <code>Command::print_help</code>\n<code>cargo rustc</code> historically has allowed “test”, “bench…\n<code>cargo check</code> and <code>cargo fix</code> historically has allowed “test…\nDetermines whether or not to gate <code>--profile</code> as unstable …\nWhen encountered, store the associated value(s) in …\nWhen encountered, act as if <code>&quot;false&quot;</code> was encountered on the …\nWhen encountered, act as if <code>&quot;true&quot;</code> was encountered on the …\nWhen encountered, display <code>Command::version</code>\nSets the program’s description for the short help (<code>-h</code>).\nSpecify how to react to an argument when parsing it.\nExtend <code>Arg</code> with <code>ArgExt</code> data\nExtend <code>Command</code> with <code>CommandExt</code> data\nFree-form help text for after auto-generated short help (<code>-h</code>…\nFree-form help text for after auto-generated long help (…\nAdd an alias, which functions as a hidden long flag.\nSets a hidden alias to this subcommand.\nAdd aliases, which function as hidden long flags.\nSets multiple hidden aliases to this subcommand.\nAssume unexpected positional arguments are a <code>subcommand</code>.\nAllows values which start with a leading hyphen (<code>-</code>)\nAllows one to implement two styles of CLIs where …\nAllows negative numbers to pass as values.\nAdds an argument to the list of valid possibilities.\nDo not use this method, it is only for backwards …\nVariant of <code>arg_package_spec</code> that does not include the <code>--all</code>…\nExit gracefully if no arguments are present (e.g. <code>$ myprog</code>…\nAdds a suggestion for the <code>--silent</code> or <code>-s</code> flags to use the …\nAdds multiple arguments to the list of valid possibilities.\nSpecifies that use of an argument prevents the use of …\nReplace prior occurrences of arguments rather than error\nCheck if any args were present on the command line\nSets the author(s) for the help message.\nFree-form help text for before auto-generated short help (…\nFree-form help text for before auto-generated long help (…\nOverrides the runtime-determined name of the binary for …\nPrepare for introspecting on all included <code>Command</code>s\nSets when to color output.\nThis argument is mutually exclusive with the specified …\nThis argument is mutually exclusive with the specified …\nCheck if values are present for the argument or group id\nCatch problems earlier in the development cycle.\nValue for the argument when the flag is present but no …\nValue for the argument when the flag is present but no …\nValue for the argument when the flag is present but no …\nValue for the argument when the flag is present but no …\nValue for the argument when not present.\nSpecifies the value of the argument if <code>arg</code> has been used …\nSpecifies multiple values and conditions in the same …\nValue for the argument when not present.\nDelay initialization for parts of the <code>Command</code>\nDisables colorized help messages.\nDisables <code>-h</code> and <code>--help</code> flag.\nDisables the <code>help</code> <code>subcommand</code>.\nDisables <code>-V</code> and <code>--version</code> flag.\nOverrides the runtime-determined display name of the …\nAllows custom ordering of args within the help message.\nSet the placement of this subcommand within the help.\nDisables the automatic delimiting of values after <code>--</code> or …\nCustom error message for post-parsing validation\nThis argument must be passed alone; it conflicts with all …\nSpecifies how to parse external subcommand arguments.\nFind subcommand such that its name or one of aliases …\nFind subcommand such that its name or one of aliases …\nFlatten subcommand help into the current command’s help\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess an <code>ArgExt</code>\nAccess an <code>CommandExt</code>\nGet the help message specified via <code>Command::about</code>.\nBehavior when parsing the argument\nReturns the help heading for listing subcommands.\nReturns the help heading for listing subcommands.\nGet hidden aliases for this argument, if any\nIterate through the <em>hidden</em> aliases for this subcommand.\nGet <em>all</em> aliases for this argument, if any, both visible …\nIterate through the set of <em>all</em> the aliases for this …\nIterate through the set of <em>all</em> the long aliases for this …\nGet <em>all</em> short aliases for this argument, if any, both …\nIterate through the set of <em>all</em> the short aliases for this …\nGet a list of all arguments the given argument conflicts …\nIterate through the set of arguments.\nGet the authors of the cmd.\nReturns the help heading for listing subcommands.\nReturns the help heading for listing subcommands.\nGet the name of the binary.\nShould we color the output?\nGets the value of a specific <code>ArgAction::Count</code> flag\nGet the default values specified for this argument, if any\nGet the name of the binary.\nGet the placement within help\nGet the placement within help\nConfigured parser for values passed to an external …\nGets the value of a specific <code>ArgAction::SetTrue</code> or …\nIterate through the set of groups.\nGet the help specified for this argument, if any\nGet the help heading specified for this argument, if any\nGet the name of the argument\nGet the index of this argument, if any\nGet the long option name for this argument, if any\nGet the help message specified via <code>Command::long_about</code>.\nGet the long option name and its visible aliases, if any\nGet the long flag of the subcommand.\nGet the long help specified for this argument, if any\nGet the long version of the cmd.\nIterate over values of a specific option or positional …\nParse <code>env::args_os</code>, exiting on failure.\nParse the specified arguments, exiting on failure.\nParse <code>env::args_os</code>, exiting on failure.\nGet the name of the cmd.\nGet all known names of the cmd (i.e. primary name and …\nGet the custom section heading specified via …\nGet the number of values for this argument.\nIterate over the values passed to each occurrence of an …\nGets the value of a specific option or positional argument.\nIterate through the <em>options</em>.\nIterate through the <em>positionals</em> arguments.\nGet the names of possible values for this argument. Only …\nIterate over the original argument values.\nIterate over the original values for each occurrence of an …\nGet the short option name for this argument, if any\nGet the short option name and its visible aliases, if any\nGet the short flag of the subcommand.\nReturn the current <code>Styles</code> for the <code>Command</code>\nReturns the help heading for listing subcommands.\nReturns the subcommand value name.\nIterate through the set of subcommands, getting a …\nIterate through the set of subcommands, getting a mutable …\nGet the delimiter between multiple values\nGet the value hint of this argument\nGet the names of values for this argument.\nConfigured parser for argument values\nGet the value terminator for this argument. The …\nGet the version of the cmd.\nGet visible aliases for this argument, if any\nIterate through the <em>visible</em> aliases for this subcommand.\nIterate through the <em>visible</em> long aliases for this …\nGet visible short aliases for this argument, if any\nIterate through the <em>visible</em> short aliases for this …\nSpecifies that an argument can be matched to all child …\nThe name of the <code>ArgGroup</code> the argument belongs to.\nAdds an <code>ArgGroup</code> to the application.\nThe names of <code>ArgGroup</code>’s the argument belongs to.\nAdds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.\nReturns <code>true</code> if this <code>Command</code> has subcommands.\nSets the description of the argument for short help (<code>-h</code>).\nPanic if help descriptions are omitted.\nOverride the current help section.\nSets the help template to be used, overriding the default …\nDo not display the argument in help message.\nSpecifies that this <code>subcommand</code> should be hidden from help …\nDo not display the default value of the argument in the …\nHides an argument from long help (<code>--help</code>).\nDo not display the possible values in the help message.\nTells <code>clap</code> <em>not</em> to print possible values when displaying …\nHides an argument from short help (<code>-h</code>).\nSet the identifier used for referencing this argument in …\nIterate over <code>Arg</code> and <code>ArgGroup</code> <code>Id</code>s via <code>ArgMatches::ids</code>.\nMatch values against <code>PossibleValuesParser</code> without matching …\nTry not to fail on parse errors, like missing option …\nSpecifies the index of a positional argument <strong>starting at</strong> 1.\nThe first index of that an argument showed up.\nAll indices an argument appeared at when parsing.\nAllow partial matches of long arguments or their aliases.\nAllow partial matches of subcommand names and their aliases…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReport whether <code>Command::allow_external_subcommands</code> is set\nReport whether <code>Arg::allow_hyphen_values</code> is set\nReport whether <code>Command::allow_missing_positional</code> is set\nReport whether <code>Arg::allow_negative_numbers</code> is set\nReport whether <code>Command::arg_required_else_help</code> is set\nReport whether <code>Command::args_conflicts_with_subcommands</code> is …\nReport whether <code>Command::disable_colored_help</code> is set\nReport whether <code>Command::disable_help_flag</code> is set\nReport whether <code>Command::disable_help_subcommand</code> is set\nReport whether <code>Command::disable_version_flag</code> is set\nReport whether <code>Command::dont_delimit_trailing_values</code> is set\nReports whether <code>Arg::exclusive</code> is set\nGet the custom section heading specified via …\nReport whether <code>Arg::global</code> is set\nReport whether <code>Arg::hide_default_value</code> is set\nReport whether <code>Arg::hide_long_help</code> is set\nReport whether <code>Arg::hide_possible_values</code> is set\nReport whether <code>Arg::hide</code> is set\nReport whether <code>Command::hide</code> is set\nReport whether <code>Arg::hide_short_help</code> is set\nReports whether <code>Arg::ignore_case</code> is set\nReports whether <code>Arg::last</code> is set\nReport whether <code>Command::multicall</code> is set\nReport whether <code>Arg::next_line_help</code> is set\nReport whether <code>Command::next_line_help</code> is set\nReport whether <code>Command::no_binary_name</code> is set\nChecks whether this argument is a positional or not.\nReport whether <code>Command::propagate_version</code> is set\nReport whether <code>Arg::require_equals</code> is set\nReports whether <code>Arg::required</code> is set\nReport whether <code>Command::subcommand_negates_reqs</code> is set\nReport whether <code>Command::subcommand_precedence_over_arg</code> is …\nReport whether <code>Command::subcommand_required</code> is set\nReport whether <code>Arg::trailing_var_arg</code> is set\nThis arg is the last, or final, positional argument (i.e. …\nSets the long version of the argument without the …\nSets the program’s description for the long help (<code>--help</code>…\nSets the long version of the subcommand flag without the …\nAdd an alias, which functions as a “hidden” long flag …\nAdd aliases, which function as “hidden” long flag …\nSets the description of the argument for long help (<code>--help</code>…\nSets the version for the long version (<code>--version</code>) and help …\nLimit the line length for wrapping help when using the …\nMultiple-personality program dispatched on the binary name …\nAllows one to mutate an <code>Arg</code> after it’s been added to a …\nAllows one to mutate all <code>Arg</code>s after they’ve been added …\nAllows one to mutate an <code>ArgGroup</code> after it’s been added …\nAllows one to mutate a <code>Command</code> after it’s been added as …\n(Re)Sets the program’s name.\nCreate a new <code>Arg</code> with a unique name.\nCreates a new instance of an <code>Command</code>.\nChange the starting value for assigning future display …\nSet the default section heading for future args.\nRender the help on the line after the argument.\nPlaces the help string for all arguments and subcommands …\nSpecifies that the parser should not assume the first …\nSpecifies the number of arguments parsed per occurrence\nOverrides the <code>clap</code> generated help message (both <code>-h</code> and …\nOverrides the <code>clap</code> generated usage string for help and …\nSets an overridable argument.\nSets multiple mutually overridable arguments by name.\nPrints the short help message (<code>-h</code>) to <code>io::stdout()</code>.\nPrints the long help message (<code>--help</code>) to <code>io::stdout()</code>.\nSpecifies to use the version of the current command for …\nConsume all following arguments.\nRemove an <code>ArgExt</code>\nRemove an <code>CommandExt</code>\nReturn values of a specific option or positional argument.\nReturn values for each occurrence of an option.\nReturns the value of a specific option or positional …\nReturn the name and <code>ArgMatches</code> of the current subcommand.\nRender the short help message (<code>-h</code>) to a <code>StyledStr</code>\nRender the long help message (<code>--help</code>) to a <code>StyledStr</code>.\nVersion message rendered as if the user ran <code>--version</code>.\nUsage statement\nVersion message rendered as if the user ran <code>-V</code>.\nRequires that options use the <code>--option=val</code> syntax\nSpecifies that the argument must be present.\nThis argument is required only if the specified <code>arg</code> is …\nSpecify this argument is required based on multiple …\nSpecify this argument is required based on multiple …\nSet this arg as required as long as the specified argument …\nSets this arg as required unless <em>all</em> of the specified …\nSets this arg as required unless <em>any</em> of the specified …\nSets an argument that is required when this one is present\nRequire another argument if this arg matches the …\nAllows multiple conditional requirements.\nSet binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.\nSets the short version of the argument without the …\nAdd an alias, which functions as a hidden short flag.\nAdd aliases, which functions as a hidden short flag.\nSets the short version of the subcommand flag without the …\nAdd an alias, which functions as  “hidden” short flag …\nAdd aliases, which function as “hidden” short flag …\nSets the <code>Styles</code> for terminal output\nAdds a subcommand to the list of valid possibilities.\nThe name and <code>ArgMatches</code> of the current subcommand.\nSets the help heading used for subcommands when printing …\nThe <code>ArgMatches</code> for the current subcommand.\nThe name of the current subcommand.\nAllows <code>subcommands</code> to override all requirements of the …\nPrevent subcommands from being consumed as an arguments …\nIf no <code>subcommand</code> is present at runtime, error and exit …\nSets the value name used for subcommands when printing …\nAdds multiple subcommands to the list of valid …\nReturns whether this action accepts values on the …\nSets the terminal width at which to wrap help messages.\nThis is a “var arg” and everything that follows should …\nNon-panicking version of <code>ArgMatches::contains_id</code>\nNon-panicking version of <code>ArgMatches::get_many</code>\nParse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.\nParse the specified arguments, returning a <code>clap::Result</code> on …\nParse the specified arguments, returning a <code>clap::Result</code> on …\nNon-panicking version of <code>ArgMatches::get_occurrences</code>\nNon-panicking version of <code>ArgMatches::get_one</code>\nNon-panicking version of <code>ArgMatches::get_raw</code>\nNon-panicking version of <code>ArgMatches::get_raw_occurrences</code>\nNon-panicking version of <code>ArgMatches::remove_many</code>\nNon-panicking version of <code>ArgMatches::remove_occurrences</code>\nNon-panicking version of <code>ArgMatches::remove_one</code>\nAllow grouping of multiple values via a delimiter.\nProvide the shell a hint about how to complete this …\nPlaceholder for the argument’s value in the help message …\nPlaceholders for the argument’s values in the help …\nReturns value of the <code>name</code> command-line argument as an …\nSpecify the typed behavior of the argument.\nSelect a <code>ValueParser</code> implementation from the intended type\nReport where argument value came from\nSentinel to <strong>stop</strong> parsing multiple values of a given …\nSets the version for the short version (<code>-V</code>) and help …\nAdd an alias, which functions as a visible long flag.\nSets a visible alias to this subcommand.\nAdd aliases, which function as visible long flags.\nSets multiple visible aliases to this subcommand.\nAdd an alias, which functions as a “visible” long flag …\nAdd aliases, which function as <em>visible</em> long flag …\nAdd an alias, which functions as a visible short flag.\nAdd aliases, which function as visible short flags.\nAdd an alias, which functions as  “visible” short flag …\nAdd aliases, which function as <em>visible</em> short flag …\nAllow warnings (do not output them).\nConfiguration for <code>build.target</code>.\nPassed in on the command line. A path is attached when the …\nLoaded due to a request from the global cli arg <code>--config</code>\nInternal error for serde errors.\nKey for a configuration variable.\nUse with the <code>get</code> API to fetch a string that will be …\nA previously generated authentication token and the data …\nLocation where a config value is defined.\nError if  warnings are emitted.\nDefined in an environment variable, includes the …\nLoaded due to config file discovery.\nConfiguration information for cargo. This is not specific …\nConfiguration for <code>jobs</code> in <code>build</code> section. There are two …\nNo value.\nDefined in a <code>.cargo/config</code>, includes the path to the file.\nA config type that is a program to run.\nSome value of type <code>T</code>.\nConfiguration for <code>ssl-version</code> in <code>http</code> section There are …\nA type to deserialize a list of strings from a toml file.\nConfig definition of a <code>[target.&#39;cfg(…)&#39;]</code> table.\nConfig definition of a <code>[target]</code> table or <code>[host]</code>.\nAlternative to <code>StringList</code> that follows precedence rules, …\nA type which can be deserialized as a configuration value …\nOutput warnings.\nWhether warnings should warn, be allowed, or cause an …\nIndicates why a config value is being loaded.\nLoads a config value from a path with options.\nAcquires a lock on the global “package cache”, …\nObtain a <code>Path</code> from a <code>Filesystem</code>, verifying that the …\nIf false, don’t cache <code>rustc --version --verbose</code> …\nGets the path to the <code>cargo</code> executable.\nThe location of the cargo executable (path to current …\nReturns an error if <code>registry.index</code> is set.\nParses the CLI config args and returns them as a table.\nCLI config values, passed in via <code>configure</code>.\nUpdate the instance based on settings typically passed in …\nReturns the cached <code>SourceId</code> corresponding to the main …\nCache of the <code>SourceId</code> for crates.io\nCreation time of this config, used to output the total …\nCached credentials from credential providers or …\nCache of credentials from configuration or credential …\nA collection of configuration options from the credentials …\nThe current working directory.\nThe current working directory of cargo\nSupport for deserializing configuration via <code>serde</code>\nCreates a new instance, with all default settings.\nGets the default Cargo registry.\nReturns a reference to the shared <code>DeferredGlobalLastUse</code>.\nA cache of modifications to make to …\nThe location where <code>val</code> was defined in configuration (e.g. …\nReturns a path to display to the user with the location of …\nDisable HTTP/2 multiplexing for some broken versions of …\nA handle on curl easy mode for http calls\nReturns all environment variables as an iterator, keeping …\nEnvironment variable snapshot.\nGet the env vars from the config <code>[env]</code> table which are …\nReturns all environment variable keys, filtering out keys …\nEncapsulates snapshotting of environment variables.\nGenerate an error when the given value is the wrong type.\nWhether we are printing extra verbose messages\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>frozen</code> is the same as <code>locked</code>, but additionally will not …\nRetrieves a config variable.\nLow-level private method for getting a config value as an …\nGet a configuration value by key.\nThis is a helper for getting a CV from a file or env var.\nGet the value of environment variable <code>key</code> through the …\nInternal method for getting an environment variable as a …\nGet the value of environment variable <code>key</code> through the …\nThe purpose of this function is to aid in the transition …\nLow-level private method for getting a config value as an …\nGet a list of strings.\nHelper for <code>StringList</code> type to get something that is a …\nGet a config value that is expected to be a path.\nGets the index for a registry.\nGet a string config value.\nLow-level private method for getting a config value as an …\nLow-level method for getting a config value as an …\nReturns the path for the given tool.\nHelper macro for creating typed access methods.\nGets the directory of code sources Cargo checkouts from …\nGets the directory for all Git bare repos Cargo clones (…\nGets the Cargo Git directory (<code>&lt;cargo_home&gt;/git</code>).\nReturns a reference to the shared <code>GlobalCacheTracker</code>.\nThe global cache tracker is a database used to track disk …\nCheck if the <code>GlobalContext</code> contains a given <code>ConfigKey</code>.\nGets the user’s Cargo home directory (OS-dependent).\nThe location of the user’s Cargo home directory. …\nReturns the <code>[host]</code> table definition for the given target …\nCached configuration parsed by Cargo\nConverts the <code>include</code> config value to a list of absolute …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA global static IPC control mechanism (used for managing …\nThe path of the linker for this target.\nBuild script override for the given library name.\nLoads credentials config from the credentials file, if …\nLoads a config value from a path.\nGets the path to the <code>rustc</code> executable.\nLoad any <code>include</code> files listed in the given <code>value</code>.\nLike <code>load_includes</code> but without merging config values.\nLoads configuration from the filesystem.\nStart a config file discovery from a path and merges all …\nLike <code>load_values</code> but without merging config values.\n<code>locked</code> is set if we should not update lock files. If the …\nLooks for a path for <code>tool</code> in an environment variable or …\nMerge the given value into self.\nAdd config arguments passed on the command line.\nCreates a new config instance.\nThis should be false if:\n<code>offline</code> is set if we should never access the network, but …\nLocks on the package and index caches.\nGets the Cargo base directory for all registry information …\nGets the Cargo registry cache directory (…\nCache of already parsed registries from the <code>[registries]</code> …\nCache of registry config from the <code>[registries]</code> table.\nGets the Cargo registry index directory (…\nGets the Cargo registry source directory (…\nSwitches the working directory to <code>std::env::current_dir</code>\nReloads on-disk configuration values, starting at the …\nProcess to run as a wrapper for <code>cargo run</code>, <code>test</code>, and <code>bench</code> …\nGets the path to the <code>rustdoc</code> executable.\nThe location of the rustdoc executable\nAdditional rustdoc flags to pass.\nAdditional rustc flags to pass.\nDirectory where config file searching should stop …\nHelper primarily for testing.\nSets the path where ancestor config file searching will …\nGets a reference to the shell, e.g., for writing error …\nInformation about how to write messages to the shell\nReturns true if the <code>[target]</code> table should be applied to …\nReturns the <code>[target]</code> table definition for the given target …\nReturns a list of [target.‘<code>cfg()</code>’] tables.\nThe <code>target</code> output directory to use.\nTarget Directory via resolved Cli parameter\nAcquires a lock on the global “package cache”, …\nCli flags of the form “-Z something” merged with …\nCli flags of the form “-Z something”\nWhich package sources have been updated, used to ensure it …\nTracks which sources have been updated to avoid multiple …\nThe inner value that was deserialized.\nThis is used to validate the <code>term</code> table has valid syntax.\nDeserialization of a <code>Value&lt;T&gt;</code> type which tracks where it …\nGets all config values from disk.\nGets values of <code>build.target</code> as a list of strings.\nA collection of configuration options\nGets a mutable copy of the on-disk config values.\nGet the global <code>WarningHandling</code> configuration.\n<code>WorkspaceRootConfigs</code> that have been found\nSerde deserializer used to convert config values to a …\nA deserializer which takes two values and deserializes …\nThis is a deserializer that deserializes into a <code>Value&lt;T&gt;</code> …\nThe deserializer, used to actually deserialize a Value …\nWhether or not this key part is allowed to be an inner …\nCurrent field being deserialized.\nThe fields that this map should deserialize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current key being deserialized.\nA string value to deserialize.\nA snapshot of the environment variables available to …\nUsed to implement <code>get_env</code> and <code>get_env_os</code> on Windows, where …\nCheck if the environment contains <code>key</code>.\nA snapshot of the process’s environment variables.\nReturns the argument unchanged.\nSet the env directly from a <code>HashMap</code>. This should be used …\nGet the value of environment variable <code>key</code> through the …\nPerforms a case-insensitive lookup of <code>key</code> in the …\nGet the value of environment variable <code>key</code> through the …\nLooks up a normalized <code>key</code> in the <code>normalized_env</code>. Returns …\nGet the value of environment variable <code>key</code> as a <code>&amp;str</code>. …\nCalls <code>U::from(self)</code>.\nReturns all environment variables as an iterator, keeping …\nReturns all environment variable keys, filtering out keys …\nGenerate <code>case_insensitive_env</code> and <code>normalized_env</code> from the …\nCreate a new <code>Env</code> from process’s environment variables.\nUsed in the typed Config value API for warning messages …\nKey for a configuration variable.\nReturns the corresponding environment variable key for this\nReturns the argument unchanged.\nCreates a <code>ConfigKey</code> from the <code>key</code> specified.\nCalls <code>U::from(self)</code>.\nReturns whether or not this is a key for the root table.\nCreates a new blank configuration key which is ready to …\nReturns an iterator of the key parts as strings.\nRewinds this <code>ConfigKey</code> back to the state it was at before …\nPushes a new sub-key on this <code>ConfigKey</code>. This sub-key …\nPerforms the same function as <code>push</code> except that the …\nUse with the <code>get</code> API to fetch a string that will be …\nA config type that is a program to run.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>PathAndArgs</code> from a string. The string will be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the raw underlying configuration value for this …\nResolves this configuration-relative path to an absolute …\nResolves this configuration-relative path to either an …\nReturns the underlying value.\nConfig definition of a <code>[target.&#39;cfg(…)&#39;]</code> table.\nConfig definition of a <code>[target]</code> table or <code>[host]</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the <code>[target]</code> table should be applied to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe path of the linker for this target.\nBuild script override for the given library name.\nLoads a single table for the given prefix.\nLoads a single <code>[host]</code> table for the given triple.\nLoads all of the <code>target.&#39;cfg()&#39;</code> tables.\nLoads a single <code>[target]</code> table for the given triple.\nProcess to run as a wrapper for <code>cargo run</code>, <code>test</code>, and <code>bench</code> …\nAdditional rustdoc flags to pass.\nAdditional rustc flags to pass.\nPassed in on the command line. A path is attached when the …\nLocation where a config value is defined.\nDefined in an environment variable, includes the …\nNo value.\nDefined in a <code>.cargo/config</code>, includes the path to the file.\nSome value of type <code>T</code>.\nA type which can be deserialized as a configuration value …\nThe location where <code>val</code> was defined in configuration (e.g. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if self is a higher priority to other.\nRoot directory where this is defined.\nThe inner value that was deserialized.\nA metrics counter storing only latest <code>N</code> records.\nAdds record to the counter.\nReturns the argument unchanged.\nThe slot of the oldest record. Also the next slot to store …\nCalls <code>U::from(self)</code>.\nCreates a new counter with an initial value.\nCalculates per-second average rate of all slots.\nSlots to store metrics.\nCaptures the current state of all CPUs on the system.\nReturns the argument unchanged.\nReturns the percentage of time CPUs were idle from the …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCredential provider that launches an external process that …\nCredential provider that implements PASETO asymmetric …\nCredential provider that launches an external process …\nCredential provider that uses plaintext tokens in Cargo’…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe footer of an asymmetric token as describe in RFC 3231.\nThe main body of an asymmetric token as describe in RFC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that a secret key is valid, and returns the …\nThis field is not yet used. This field can be set to a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn expected cost for building this package. Used to …\nA list of all known keys to build.\nDequeues a package that is ready to be built.\nIndicate that something has finished.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if there are remaining packages to be built.\nReturns the number of remaining packages to be built.\nCreates a new dependency queue with 0 packages.\nThe relative priority of this package. Higher values …\nAdds a new node and its dependencies to this queue.\nAll nodes have been added, calculate some internal …\nA reverse mapping of a package to all packages that depend …\nA printer that will print diagnostics messages to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe context to get the shell to print to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn optional wrapper to be used in addition to <code>rustc.wrapper</code>…\nFind the closest element from <code>iter</code> matching <code>choice</code>. The <code>key</code>…\nVersion of <code>closest</code> that returns a common “suggestion” …\nFinds the edit distance between two strings.\nAn error that does not need to be printed because it does …\nThe CLI error is the error type used at Cargo’s …\nThese are headers that are included in error messages to …\nContains the error value\nContains the error value\nAn unexpected, internal error.\nAn iterator over the <code>ManifestError</code> chain of causes.\nError wrapper related to a particular manifest and …\nContains the success value\nContains the success value\nAn error wrapper for errors that should only be displayed …\nRenders the error in a compact form.\nThe error to display. This can be <code>None</code> in rare cases to …\nThe process exit code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nReturns an iterator over the <code>ManifestError</code> chain of causes.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA locked file.\nA “filesystem” is intended to be a globally shared, …\nAcquires a lock on a file in a “nice” manner.\nReturns the underlying <code>Path</code>.\nCreates the directory pointed to by this filesystem.\nReturns an adaptor that can be used to print the path of …\nReturns the underlying file handle of this lock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this filesystem and returns the underlying <code>PathBuf</code>…\nLike <code>Path::join</code>, creates a new filesystem rooted at this …\nCreates a new filesystem to be rooted at the given path.\nOpens read-only shared access to a file, returning the …\nOpens read-only shared access to a file, returning the …\nOpens read-write exclusive access to a file, returning the …\nReturns the parent path containing this file\nReturns the underlying path that this lock points to.\nLike <code>Path::push</code>, pushes a new path component onto this …\nRemoves all sibling files to this locked file.\nA non-blocking version of <code>Filesystem::open_ro_shared_create</code>…\nA non-blocking version of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if there is a path from <code>from</code> to <code>to</code>.\nResolves one of the paths from the given dependent package …\nResolves one of the paths from the given dependent package …\nPrints the graph for constructing unit tests.\nReturns the graph obtained by reversing all edges.\nA topological sort of the <code>Graph</code>\nStable 128-bits Sip Hasher\nReturns the hostname of the current system.\nReturns the path to the <code>file</code> in <code>pwd</code>, if it exists.\nFinds the root <code>Cargo.toml</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type that can be converted to a Url\nPerforms the conversion\nA type that can be interpreted as a relative Url and …\nPerforms the conversion\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis lint is only to be used for testing purposes\nThis lint group is only to be used for testing purposes\nThis is a markdown formatted string that will be used when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the relative path to a manifest from the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternally this is an enum with different variants, but …\nThis is different from the regular <code>Profile</code> to maintain …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLOCALHOST constants for both IPv4 and IPv6.\nConfigures libcurl’s http handles.\nUtilities for network proxies.\nUtilities for retrying a network operation.\nUtility for tracking network requests that will be retried …\nConfigure a libcurl http handle with the defaults options …\nReturns the argument unchanged.\nCreates a new HTTP handle with appropriate global …\nCalls <code>U::from(self)</code>.\nProxy environment variables that are picked up by libcurl.\nFinds an explicit HTTP proxy if one is available.\nDetermine if an http proxy exists.\nThe operation was an error, and it should not be tried …\nThe maximum amount of additional time the initial retry …\nThe minimum initial amount of time a retry will be delayed …\nMaximum amount of time a single retry can be delayed …\nState for managing retrying a network operation.\nThe operation failed, and should be tried again in the …\nThe result of attempting some operation via <code>Retry::try</code>.\nThe operation was successful.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of times the operation should be …\nGets the next sleep duration in milliseconds.\nThe number of failed attempts that have been done so far.\nCalls the given callback, and returns a <code>RetryResult</code> which …\nWrapper method for network call retry logic.\nA tracker for network requests that have failed, and are …\nAn individual network request that is waiting to be …\nInformation about the network request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is a priority queue that tracks the time when the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a new download that should be retried in the future.\nReturns the time when the next download is ready to go.\nReturns any downloads that are ready to go now.\nThe time when this requests should be retried.\nDoes not display an exact value of how far along it is.\nDisplays progress as a percentage.\nCLI progress bar.\nIndicates the style of information for displaying the …\nDisplays progress as a ratio.\nClears the progress bar from the console.\nDisables the progress bar, ensuring it won’t be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the progress bar is allowed to be …\nCreates a new <code>Progress</code> with the <code>ProgressStyle::Percentage</code> …\nDisplays progress without a bar.\nUpdates the state of the progress bar.\nUpdates the state of the progress bar.\nReturns whether or not updates are currently being …\nCreates a new progress bar.\nA simple, threadsafe, queue of items of type <code>T</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a queue with a given bound.\nPops an item from the queue, blocking if the queue is …\nPushes an item onto the queue, regardless of the capacity …\nPushes an item onto the queue, blocking if the queue is …\nPops all items from the queue without blocking.\nAn artifact with this name will conflict with one of Cargo…\nReturns <code>true</code> if the name contains any glob pattern …\nA Rust keyword.\nReturns <code>true</code> if the name contains non-ASCII characters.\nThese names cannot be used on Windows, even with an …\nCheck the entire path for names reserved in Windows.\nIt is a well known fact that <code>rustc</code> is not the fastest …\nInformation on the <code>rustc</code> executable\nGets the output for the given command.\nThe rustc full commit hash, this comes from <code>verbose_version</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe host triple (arch-platform-OS), this comes from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns the compiler at <code>path</code> to learn various pieces of …\nThe location of the exe\nGets a process builder set up to use the found rustc …\nVerbose version information (the output of <code>rustc -vV</code>)\nThe rustc version (<code>1.23.4-beta.2</code>), this comes from …\nGets a process builder set up to use the found rustc …\nAn optional wrapper to be used in addition to <code>rustc.wrapper</code>…\nAn optional program that will be passed the path of the …\nThe exact locked version and the original version …\nThe exact requested version and the original version …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the version to which this req is locked, if any.\nAllows to match pre-release in SemVer-Compatible way. See …\nMakes the requirement precise to the requested version.\nGets the version to which this req is precise to, if any.\nA function or closure representing a database migration.\nA basic migration that is a single static SQL statement.\nPerform one-time SQL migrations.\nA group of fields that are inheritable by members of the …\nGets the field <code>workspace.packageauthors</code>.\nGets the field <code>workspace.packagecategories</code>.\nChecks if a file with any of the default README file names …\nWarn about paths that have been deprecated and may …\nGets the field <code>workspace.packagedescription</code>.\nGets the field <code>workspace.packagedocumentation</code>.\nGets the field <code>workspace.packageedition</code>.\nGets the field <code>workspace.packageexclude</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a workspace dependency with the <code>name</code>.\nGets the field <code>workspace.packagehomepage</code>.\nGets the field <code>workspace.packageinclude</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee also <code>bin/cargo/commands/run.rs</code>s <code>is_manifest_command</code>\nGets the field <code>workspace.packagekeywords</code>.\nGets the field <code>workspace.packagelicense</code>.\nGets the field <code>workspace.package.license-file</code>.\nGets the field <code>workspace.lint</code>.\nReturns the name of the README file for a …\nSee <code>Manifest::normalized_toml</code> for more details\nDefines simple getter methods for inheritable fields.\nMake the <code>Package</code> self-contained so its ready for packaging\nPrepares the manifest for publishing.\nGets the field <code>workspace.packagepublish</code>.\nLoads a <code>Cargo.toml</code> from a file on disk.\nGets the field <code>workspace.package.readme</code>.\nGets the field <code>workspace.packagerepository</code>.\nGets the field <code>workspace.packagerust-version</code>.\nThis module implements Cargo conventions for directory …\nChecks a list of build targets, and ensures the target …\nChecks stytax validity and unstable feature gate for a …\nValidates a profile.\nValidation that is specific to an override.\nChecks syntax validity and unstable feature gate for each …\nGets the field <code>workspace.packageversion</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnsure the package name matches the validation from …\nReturns the path to the build script if one exists for …\nBuild an error message for a target path that cannot be …\nWill check a list of toml targets, and make sure the …\nInformation about dependencies in a manifest.\nParsing and editing of manifest files.\nA dependency handled by Cargo.\nDependency from a git repo.\nDependency from a git repo.\nEither a workspace or another type.\nDependency from a local path.\nDependency from a local path.\nDependency from a registry.\nDependency from a registry.\nPrimary location of a dependency.\nDependency from a workspace.\nDependency from a workspace.\nAccess the git source, if present.\nAccess the path source, if present.\nAccess the registry source, if present.\nAccess the workspace source, if present.\nThe path base, if using one.\nSelect specific branch.\nRemove the existing version requirement.\nWhether default features are activated.\nWhether default features are enabled.\nSet features as an array of string (does some basic …\nList of features to add (or None to keep features …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a dependency from a TOML table entry.\nRepository URL.\nList of features inherited from a workspace dependency.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the dependency (as it is set in its <code>Cargo.toml</code> …\nCreate a new dependency with a name.\nSpecify dependency by version requirement.\nSpecify dependency from a path.\nSpecify dependency from a git repo.\nGet whether the dep is optional.\nWhether the dependency is opted-in with a feature flag.\nLocal, absolute path.\nGet whether the dep is public.\nWhether the dependency is marked as public.\nQuery to find this dependency.\nGet registry of the dependency.\nNon-default registry.\nGet the alias for the dependency (if any).\nIf the dependency is renamed, this is the new name for the …\nSelect specific rev.\nSpecify an optional branch.\nSet the value of default-features for the dependency.\nSet features as an array of string (does some basic …\nSet features as an array of string (does some basic …\nSet whether the dependency is optional.\nSet the value of registry for the dependency.\nSet the alias for the dependency.\nSpecify an optional rev.\nSet dependency to a given version.\nSpecify an optional tag.\nSet an optional version requirement.\nSet an optional version requirement.\nGet the dependency source.\nWhere the dependency comes from.\nGet the <code>SourceID</code> for this dependency.\nGet the <code>SourceID</code> for this dependency.\nGet the <code>SourceID</code> for this dependency.\nSelect specific tag.\nConvert dependency to TOML.\nGet the dependency name as defined in the manifest, that …\nModify existing entry to match this dependency.\nGet version of dependency.\nVersion requirement.\nVersion requirement for when published.\nVersion requirement for when published.\nDependency table to add deps to.\nEdit location for an embedded manifest\nManifest is explicit in a frontmatter\nManifest is implicit\nAn editable Cargo manifest that is available locally.\nAn editable Cargo manifest.\nManifest contents as TOML data.\nEdit location for an embedded manifest, if relevant\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead manifest data from string\nRemove references to <code>dep_key</code> if its no longer present.\nAllow mutating depedencies, wherever they live. Copied …\nLookup a dependency.\nGet all sections in the manifest that exist and might …\nGet the specified table from the manifest.\nGet the specified table from the manifest.\nAdd entry to a Cargo.toml.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType of dependency.\nManifest contents.\nReference to a Dependency Table.\nGet the manifest’s package name.\nPath to the manifest.\nThe raw, unparsed package file\nRemove entry from a Cargo.toml.\nChoose the type of dependency.\nChoose the platform for the dependency.\nPlatform for the dependency.\nKeys to the table.\nConstruct the <code>LocalManifest</code> corresponding to the <code>Path</code> …\nWrite changes back to the file.\nUpgrade an existing requirement to a new version. Copied …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe source path and its current dir for use in compilation.\nInformation about the git repository where cargo was built …\nCargo’s version.\nInformation about the Git repository we may have been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe release channel we were built for …\nReturns information about cargo’s version.\nCargo’s version, such as “1.57.0”, “1.58.0-beta.1…")