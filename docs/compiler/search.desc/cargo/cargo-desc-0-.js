searchState.loadedDescShard("cargo", 0, "Cargo as a library\nDisplays an error, and all its causes, to stderr.\nDisplays a warning, with an error object providing …\nThe trait for sources of Cargo packages and its built-in …\nWhen dynamically linked against libcurl, we want to ignore …\nEnable HTTP/2 and pipewait to be used as it’ll allow …\nCode for representing cargo’s release version number.\nReturns information about cargo’s version.\nFrom a branch.\nThe default branch of the repository, the reference named …\nA directory-based registry.\nA git repository.\nInformation to find a specific commit in a Git repository.\nA local filesystem-based registry.\nIndicates that <code>[workspace]</code> was present and the <code>root</code> field …\nSome or all of the data required to identify a package:\nA local path.\nA remote registry.\nFrom a specific revision. Can be a commit hash (either …\nIndicates that <code>[workspace]</code> was present and the members were\nUnique identifier for a source of packages.\nThe possible kinds of code source.\nA sparse registry.\nFrom a tag.\nThe core abstraction in Cargo for working with a workspace …\nConfiguration of a workspace in a manifest.\nIntermediate configuration of a workspace root in a …\nInteract with the compiler\nThis path is a path to where the current cargo subcommand …\nWorkspace-level custom metadata\nThe subset of <code>members</code> that are used by the <code>build</code>, <code>check</code>, …\nSupport for nightly features in Cargo itself.\nFinds the path of the root of the workspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport for garbage collecting unused files from …\nCargo configuration information. See <code>GlobalContext</code>.\nSupport for tracking the last time files were used to …\nIf <code>true</code>, then the resolver will ignore any existing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if this is a temporary workspace created for the …\nA cache of loaded packages for particular paths which is …\nLocal overlay configuration. See <code>crate::sources::overlay</code>.\nChecks whether the given <code>PackageId</code> matches the …\nSet of ids of workspace members\nList of members in this workspace with a listing of all …\nA list of packages found in this workspace. Always …\nParses a spec string and returns a <code>PackageIdSpec</code> if the …\nReturns a <code>Display</code>able view of this git reference, or None …\nHandles built-in and customizable compiler flag presets.\nChecks a list of <code>PackageId</code>s to find 1 that matches this …\nRoughly equivalent to <code>PackageIdSpec::parse(spec)?.query(i)</code>\nTypes that hold source information for a group of packages.\nRequested path of the lockfile (i.e. passed as the cli …\n<code>true</code> if this workspace should enforce optional …\nThe resolver behavior specified with the <code>resolver</code> field.\nIf <code>true</code>, then workspace <code>rust_version</code> would be used in …\nResolution of the entire dependency graph for a crate.\nIf this workspace includes more than one crate, this …\nShared target directory for all the packages of this …\nFull <code>semver::Version</code>, if present\nRepresents <code>cargo::rustc-link-arg=FLAG</code>.\nLike <code>Normal</code>, but not directly executable. For example, a …\nUsed to indicate benchmarks should be built. This is not …\nRepresents <code>cargo::rustc-link-arg-benches=FLAG</code>.\nRepresents <code>cargo::rustc-link-arg-bins=FLAG</code>.\nBuilding a target with <code>rustc</code> (lib or bin).\nConfiguration information for a rustc build.\nThe build context, containing complete information needed …\nContains the parsed output of a custom build script.\nCollection of all the stuff that is needed to perform a …\nMap of packages to build script output.\nLinking information for a <code>Unit</code>.\nRepresents <code>cargo::rustc-cdylib-link-arg=FLAG</code>.\nBuilding a target with <code>rustc</code> to emit <code>rmeta</code> metadata only. …\nA structure returning the result of a compilation.\nIndicator for how a unit is being compiled.\nThe general “mode” for what to do.\nAbstraction for the representation of a compilation target …\nTypes of the output artifact that the compiler emits. …\nPiece of external debug information (e.g., <code>.dSYM</code>/<code>.pdb</code> …\nA <code>DefaultExecutor</code> calls rustc without doing anything else. …\nA target that will be documented with <code>rustdoc</code>. If <code>deps</code> is …\nAn example or library that will be scraped for function …\nStructure with enough information to run <code>rustdoc --test</code>.\nA target that will be tested with <code>rustdoc</code>.\nRepresents <code>cargo::rustc-link-arg-examples=FLAG</code>.\nA glorified callback for executing calls to rustc. Rather …\nKind of each file generated by a Unit, part of <code>FileType</code>.\nType of each file generated by a Unit.\nIndication of the freshness of a package.\nAttached to a unit that is compiled for the “host” …\nHuman-readable HTML report\nMachine-readable JSON (unstable)\nRepresents one of the instructions from …\nSomething you can link against (e.g., a library).\nPossible ways to run rustc and request various parts of LTO…\n<code>Metadata</code> tracks several <code>UnitHash</code>s, including …\nNot a special file type.\nThis rustc invocation needs to embed bitcode in object …\nLTO has been explicitly listed as “off”. This means no …\nThis rustc invocation only needs to produce bitcode (it is …\nThis should not include bitcode. This is primarily to …\nConfiguration of the display of messages emitted by the …\nAn <code>.rmeta</code> Rust metadata file.\nLTO is run for this rustc, and it’s <code>-Clto=foo</code>. If the …\nA marker for Units that represent the execution of a …\nStructure used to deal with Rustdoc fingerprinting\nCollection of information about <code>rustc</code> and the host and …\nRepresents <code>cargo::rustc-link-arg-bin=BIN=FLAG</code>.\nAttached to a unit to be compiled for a particular target. …\nInformation about the platform target gleaned from …\nA target being built for a test.\nRepresents <code>cargo::rustc-link-arg-tests=FLAG</code>.\nKinds of build timings we can output.\nAll information needed to define a unit.\nUniquely identify a <code>Unit</code> under specific circumstances, see …\nA small structure used to “intern” <code>Unit</code> values.\nInformation about the output of a unit.\nForwards <code>-Zallow-features</code> if it is set for cargo.\nAdds <code>--cap-lints</code> to the command to execute.\nAdds extra rustc flags and environment variables collected …\nAdds <code>--error-format</code> to the command to execute.\nThe list of all kinds that are involved in this build\nApplies environment variables from config <code>[env]</code> to …\nArguments needed to pass to rustdoc to run this test.\nGenerate artifact information from unit dependencies for …\nMostly static information about the build task.\nAn array of all binaries created.\nAdds essential rustc flags and environment variables to …\nConfiguration information for a rustc build.\n<code>BuildContext</code> is a (mostly) static information about a …\nAdds dependency-relevant rustc flags and environment …\nDependencies (like rerun-if-changed) declared by a build …\nA graph-like structure used to represent the rustc …\nOutput a build plan to stdout instead of actually …\n<code>BuildRunner</code> is the mutable state used during the build …\nOutput from build scripts, updated after each build script …\nLinking information for each <code>Unit</code>. See <code>build_map</code> for …\nWhere to write the JSON messages to support playback later …\nProvides a way to change the precedence of …\nAn array of all cdylibs created.\n<code>cfg</code> information extracted from <code>rustc --print=cfg</code>.\nVarious <code>--cfg</code> flags to pass to the compiler.\nGenerates the <code>--check-cfg</code> arguments for the <code>unit</code>.\nVarious <code>--check-cfg</code> flags to pass to the compiler.\nCache of file checksums to reduce filesystem reads.\nType definitions for the result of a compilation.\nA large collection of information about the result of the …\nBuilds up and enqueue a list of pending jobs onto the <code>job</code> …\nType definitions for cross-compilation.\nA set used to track which units have been compiled. A unit …\nThe crate-type that generates this file.\nA base process builder for discovering crate type …\nCache of output filename prefixes and suffixes.\nHow to execute a build script and parse its output.\nOutput directory for rust dependencies. May be for the …\nProvides a package name with descriptive target …\n<code>true</code> to avoid really compiling.\nEnvironment variables to set in the rustdoc process.\nAdditional environment variables to run the compiler with.\nTracks the number of errors we’ve seen so far.\nIn case of an <code>Err</code>, Cargo will not continue with the build …\nThe directory to copy final artifacts to. Note that even if\nGenerates a list of <code>--extern</code> arguments.\nExtra compiler args for either <code>rustc</code> or <code>rustdoc</code>.\nExtra environment variables that were passed to …\nSet of metadata of Docscrape units that fail before …\nAll active features for the unit passed as …\nAn abstraction of the files and directories that will be …\nTracks changes to determine if something needs to be …\nFingerprints used to detect if a unit is out-of-date.\nThe kind of file.\nQueried when queuing each unit of work. If it returns …\nForce Cargo to do a full rebuild and treat each target as …\nWhat format we’re emitting from Cargo itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport for future-incompatible warning reporting.\n<code>true</code> to output a future incompatibility report at the end …\nConfig\nThe cargo context.\nThe target host triple.\nBuild information for the “host”, which is information …\nInformation about the host platform.\nCalled after a rustc process invocation is prepared …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nManagement of the interaction between the main <code>cargo</code> and …\nNumber of rustc jobs to run in parallel.\nJob server client to manage concurrency with other …\nDo not abort the build as soon as there is an error.\nManagement of the directory layout of a build\nNames and link kinds of libraries, suitable for the <code>-l</code> …\nPaths to pass to rustc with the <code>-L</code> flag.\nLink the compiled target (often of form <code>foo-{metadata_hash}</code>…\nThe -Clinker value to use.\nLinker arguments suitable to be passed to …\nErrors and warnings generated by this build.\nMap of the LTO-status of each unit. This indicates what …\nAdds LTO related codegen flags.\nGenerates the warning message used when fallible …\n<code>true</code> to print stdout in JSON format (for machine reading).\nMetadata to pass to the immediate dependencies.\nMap of Doc/Docscrape units to metadata for their …\nThe mode we are compiling in.\nCache of file mtimes to reduce filesystem hits.\nAll directories for the output of native build commands.\nReturns true if the line should be cached.\ndep-info files for external build system integration. See …\nPath prefix remap rules for dependencies.\nPackage downloader.\nPath to the unit’s primary output (an executable or …\nHost-only dependencies that have build scripts. Each …\nThe prefix for the file (for example, <code>lib</code>). This is an …\nPrepares flags and environments we can compute for a <code>rustc</code> …\nPrepares flags and environments we can compute for a …\n“Primary” packages are the ones the user selected on …\nOptional rustc process to be used for primary crates …\nAn optional override of the rustc process for primary units\nThis contains a collection of compiler flags presets.\nCreates a unit of work that replays the cached compiler …\nThe requested kind of compilation for this session\nBuild profile\nPaths to trigger a rerun of this build script. May be …\nEnvironment variables which, when changed, will cause a …\nA set of units which are compiling rlibs and are expected …\nThe crate names of the root units specified on the …\nRoot output directory (for the local package’s artifacts)\nThe root units of <code>unit_graph</code> (units requested on the …\nCreates a unit of work invoking <code>rustc</code> for building the <code>unit</code>…\nInformation about <code>rustc</code> itself.\nRustc process to be used by default\nRustc process to be used for workspace crates instead of …\nUtilities for building with rustdoc.\nCreates a unit of work invoking <code>rustdoc</code> for documenting …\nExtra flags to pass to <code>rustdoc</code>, see <code>extra_args</code>.\nA thread used by <code>cargo fix</code> to receive messages on a socket …\nExtra flags to pass to <code>rustc</code>, see <code>extra_args</code>.\nGets the file path of function call information output …\nReverse-dependencies of documented units, used by the …\nThe script metadata, if this unit’s package has a build …\nThe script metadata, if this unit’s package has a build …\nThis is only used while constructing <code>to_link</code> to avoid …\nChecks if there are some scrape units waiting to be …\nFlag to convert hyphen to underscore when uplifting.\nIf <code>true</code>, display any diagnostics. Other types of JSON …\nCode for building the standard library.\nThe suffix for the file (for example, <code>.rlib</code>). This is an …\nSupported values for <code>-Csplit-debuginfo=</code> flag, queried from …\n<code>supports_std</code> information extracted from …\nPath to the sysroot.\nPath prefix remap rules for sysroot.\nThe path to libstd for each target\nPath to the “lib” directory in the sysroot which rustc …\nBuild information for targets that we’re building for.\nInformation about rustc and the target platform.\nInformation about the target platform that we’re …\nThe linker to use for each host or target.\nAn array of all tests created during this compilation.\nWhich kinds of build timings to output (empty if none).\nTiming tracking.\nLibraries to test with rustdoc.\nList of build script outputs this Unit needs to include …\nGenerates the <code>--remap-path-scope</code> and <code>--remap-path-prefix</code> …\nLike <code>trim_paths_args</code> but for rustdoc invocations.\nTypes and impls for <code>Unit</code>.\nWhat’s being doctested\nThe unit that generated this output.\nConstructs the dependency graph for compilation.\nSerialization of <code>UnitGraph</code> for unstable option <code>--unit-graph</code>…\nThe dependency graph of units to compile.\nOutput the unit graph to stdout instead of actually …\nWhether or not -Zunstable-options is needed.\nThe total number of warnings emitted by the compilation.\nTracks the number of warnings we’ve seen so far.\nThe workspace the build is for.\nWhether the <code>rendered</code> field of rustc diagnostics embed ansi …\nWhether rustc diagnostics are rendered by cargo or …\nWhether the <code>rendered</code> field of rustc diagnostics are using …\nReturn all environment variables for the given …\nGiven a dependency with an artifact <code>artifact_dep</code> and a set …\nUsed to indicate benchmarks should be built. This is not …\nBuilding a target with <code>rustc</code> (lib or bin).\nConfiguration information for a rustc build.\nBuilding a target with <code>rustc</code> to emit <code>rmeta</code> metadata only. …\nThe general “mode” for what to do.\nA target that will be documented with <code>rustdoc</code>. If <code>deps</code> is …\nAn example or library that will be scraped for function …\nA target that will be tested with <code>rustdoc</code>.\nHuman-readable HTML report\nMachine-readable JSON (unstable)\nA marker for Units that represent the execution of a …\nA target being built for a test.\nKinds of build timings we can output.\nOutput a build plan to stdout instead of actually …\n<code>true</code> to avoid really compiling.\nWhether or not the <em>user</em> wants JSON output. Whether or not …\nThe directory to copy final artifacts to. Note that even if\nForce Cargo to do a full rebuild and treat each target as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> to output a future incompatibility report at the end …\nReturns <code>true</code> if this mode may generate an executable.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is any type of test (test, benchmark, …\nReturns <code>true</code> if the unit is being checked.\nReturns <code>true</code> if this is generating documentation.\nReturns <code>true</code> if this is scraping examples for …\nReturns <code>true</code> if this a doc test.\nReturns <code>true</code> if this is the <em>execution</em> of a <code>build.rs</code> script.\nReturns <code>true</code> if this is something that passes <code>--test</code> to …\nNumber of rustc jobs to run in parallel.\nDo not abort the build as soon as there is an error.\n<code>true</code> to print stdout in JSON format (for machine reading).\nThe mode we are compiling in.\nParses all config files to learn about build …\nAn optional override of the rustc process for primary units\nThe requested kind of compilation for this session\nBuild profile\nA thread used by <code>cargo fix</code> to receive messages on a socket …\nWhich kinds of build timings to output (empty if none).\nOutput the unit graph to stdout instead of actually …\nWhether the <code>rendered</code> field of rustc diagnostics embed ansi …\nWhether rustc diagnostics are rendered by cargo or …\nWhether the <code>rendered</code> field of rustc diagnostics are using …\nThe build context, containing complete information needed …\nThe list of all kinds that are involved in this build\nConfiguration information for a rustc build.\nExtra compiler args for either <code>rustc</code> or <code>rustdoc</code>.\nExtra compiler args for either <code>rustc</code> or <code>rustdoc</code>.\nReturns the argument unchanged.\nThe cargo context.\nGets the host architecture triple.\nCalls <code>U::from(self)</code>.\nGets the number of jobs specified for this build.\nPackage downloader.\nThis contains a collection of compiler flags presets.\nThe root units of <code>unit_graph</code> (units requested on the …\nInformation of the <code>rustc</code> this build task will use.\nReverse-dependencies of documented units, used by the …\nReturns the set of <code>Docscrape</code> units that have a direct …\nInformation about rustc and the target platform.\nThis modules contains types storing information of target …\nReturns true if this unit is needed for doing doc-scraping …\nThe dependency graph of units to compile.\nThe workspace the build is for.\nLike <code>Normal</code>, but not directly executable. For example, a …\nPiece of external debug information (e.g., <code>.dSYM</code>/<code>.pdb</code> …\nKind of each file generated by a Unit, part of <code>FileType</code>.\nType of each file generated by a Unit.\nCompiler flags for either rustc or rustdoc.\nSomething you can link against (e.g., a library).\nNot a special file type.\nAn <code>.rmeta</code> Rust metadata file.\nStructure used to deal with Rustdoc fingerprinting\nCollection of information about <code>rustc</code> and the host and …\nInformation about the platform target gleaned from …\nGets the list of <code>cfg</code>s printed out from the compiler for …\nAll the target <code>Cfg</code> settings.\n<code>cfg</code> information extracted from <code>rustc --print=cfg</code>.\nThis function checks whether the latest version of <code>Rustc</code> …\nThe crate-type that generates this file.\nA base process builder for discovering crate type …\nCache of output filename prefixes and suffixes.\nWhether a dependency should be compiled for the host or …\nHelper for creating an error message for missing output …\nAcquire extra flags to pass to the compiler from various …\nReturns the list of file types generated by the given …\nThe kind of file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfig\nInformation about the given target platform, learned by …\nBuild information for the “host”, which is information …\nInformation about the host platform.\nInformation about the given target platform, learned by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInsert <code>kind</code> into our <code>target_info</code> and <code>target_config</code> members …\nLearns the information of target platform from <code>rustc</code> …\nCreates a new instance representing a <code>.rmeta</code> file.\nHelper for creating an error message when parsing rustc …\nThe filename for this <code>FileType</code> crated by rustc.\nTakes rustc output (using specialized command line args), …\nThe prefix for the file (for example, <code>lib</code>). This is an …\nInformation about <code>rustc</code> itself.\nReturns all the file types generated by rustc for the …\nExtra flags to pass to <code>rustdoc</code>, see <code>extra_args</code>.\nExtra flags to pass to <code>rustc</code>, see <code>extra_args</code>.\nGets compiler flags from <code>[build]</code> section in the config. …\nGets compiler flags from environment variables. See …\nGets compiler flags from <code>[host]</code> section in the config. See …\nGets compiler flags from <code>[target]</code> section in the config. …\nReturns a “short” name for the given kind, suitable …\nFlag to convert hyphen to underscore when uplifting.\nThe suffix for the file (for example, <code>.rlib</code>). This is an …\nSupported values for <code>-Csplit-debuginfo=</code> flag, queried from …\nChecks if the debuginfo-split value is supported by this …\n<code>supports_std</code> information extracted from …\nPath to the sysroot.\nPath to the “lib” directory in the sysroot which rustc …\nGets the target configuration for a particular host or …\nBuild information for targets that we’re building for.\nInformation about the target platform that we’re …\nThe filename for this <code>FileType</code> that Cargo should use when …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollection of all the stuff that is needed to perform a …\nMostly static information about the build task.\nDependencies (like rerun-if-changed) declared by a build …\nReturns the list of filenames read by cargo to generate …\nOutput from build scripts, updated after each build script …\nLinking information for each <code>Unit</code>. See <code>build_map</code> for …\nCheck if any output file name collision happens. See …\nCache of file checksums to reduce filesystem reads.\nA large collection of information about the result of the …\nSee <code>CompilationFiles</code>.\nStarts compilation, waits for it to finish, and returns …\nA set used to track which units have been compiled. A unit …\nFinds metadata for Doc/Docscrape units.\nDry-run the compilation without actually running it.\nSet of metadata of Docscrape units that fail before …\nAn abstraction of the files and directories that will be …\nReturns the metadata hash for the <code>RunCustomBuild</code> Unit …\nReturns the <code>RunCustomBuild</code> Unit associated with the given …\nFingerprints used to detect if a unit is out-of-date.\nReturns the argument unchanged.\nReturns the executable for the specified unit (if any).\nReturns the metadata hash for a <code>RunCustomBuild</code> unit.\nCalls <code>U::from(self)</code>.\nJob server client to manage concurrency with other …\nMap of the LTO-status of each unit. This indicates what …\nMap of Doc/Docscrape units to metadata for their …\nCache of file mtimes to reduce filesystem hits.\nReturns whether when <code>parent</code> depends on <code>dep</code> if it only …\nReturns the filenames that the given unit will generate.\nPrepare this context, ensuring that all filesystem …\n“Primary” packages are the ones the user selected on …\nRecords the list of units which are required to emit …\nReturns whether when <code>unit</code> is built whether it should emit …\nA set of units which are compiling rlibs and are expected …\nDirect dependencies for the given unit.\nReturns a <code>UnitOutput</code> which represents some information …\nCollection of information about the files emitted by the …\nThis is a generic version number that can be changed to …\n<code>Metadata</code> tracks several <code>UnitHash</code>s, including …\nInfo about a single file emitted by the compiler.\nUniquely identify a <code>Unit</code> under specific circumstances, see …\nReturns the directory for compiled artifacts files. …\nGets the hard link if present; otherwise, returns the path.\nReturns the path to the executable binary for the given …\nReturns the directory where a compiled build script is …\nReturns the “<code>OUT_DIR</code>” directory for running a build …\nReturns the directory where information about running a …\nA hash to add to file names through <code>-C extra-filename</code>\nA hash to add to symbol naming through <code>-C metadata</code>\nCalculates the filenames that the given unit will generate.\nComputes the actual, full pathnames for all the files …\nComputes the metadata hash for the given <code>Unit</code>.\nReturns the directories where Rust crate dependencies are …\nAdditional export directory from <code>--artifact-dir</code>.\nAdditional directory to include a copy of the outputs.\nIf <code>--artifact-dir</code> is specified, the absolute path to the …\nDirectory where the fingerprint for the given unit should …\nReturns the path for a file in the fingerprint directory.\nType of the file (library / debug symbol / else).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf it should be linked into <code>target</code>, and what it should be …\nHACK: Detect the <em>potential</em> presence of <code>--remap-path-prefix</code>\nHash the version of rustc being used during the build …\nThe target directory layout for the host (and target if it …\nReturns the host <code>deps</code> directory path.\nReturns the final artifact path for the host (…\nReturns the root of the build output tree for the host (…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the appropriate directory layout for either a …\nPath where compiler output is cached.\nGets the metadata for the given unit.\nGets the metadata hash for the given <code>Unit</code>.\nMetadata hash to use for each unit.\nReturns the directory where the artifacts for the given …\nReturns the filenames that the given unit will generate.\nFor each Unit, a list all files produced.\nAbsolute path to the file that will be produced by the …\nDirectory name to use for a package in the form <code>NAME-HASH</code>.\nThe root targets requested by the user on the command line …\nThe target directory layout for the target (if different …\nGets the short hash based only on the <code>PackageId</code>. Used for …\nA hash to identify a given <code>Unit</code> in the build graph\nReturns the path where the output for the given unit and …\nReturns whether or not this unit should use a hash in the …\nA structure returning the result of a compilation.\nStructure with enough information to run <code>rustdoc --test</code>.\nSee <code>Compilation::host_process</code>.\nSee <code>Compilation::rustc_process</code>.\nSee <code>Compilation::rustdoc_process</code>.\nSee <code>Compilation::target_process</code>.\nRepresents the kind of process we are creating.\nInformation about the output of a unit.\nArguments needed to pass to rustdoc to run this test.\nAn array of all binaries created.\nAn array of all cdylibs created.\nOutput directory for rust dependencies. May be for the …\nEnvironment variables to set in the rustdoc process.\nExtra environment variables that were passed to …\nPrepares a new process with an appropriate environment to …\nPrepares a <code>rustc_tool</code> process with additional environment …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe target host triple.\nReturns a <code>ProcessBuilder</code> appropriate for running a process …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe -Clinker value to use.\nAll directories for the output of native build commands.\nPath to the unit’s primary output (an executable or …\nOptional rustc process to be used for primary crates …\nThe crate names of the root units specified on the …\nRoot output directory (for the local package’s artifacts)\nReturns a <code>ProcessBuilder</code> for running <code>rustc</code>.\nRustc process to be used by default\nRustc process to be used for workspace crates instead of …\nReturns a <code>ProcessBuilder</code> for running <code>rustdoc</code>.\nThe script metadata, if this unit’s package has a build …\nThe script metadata, if this unit’s package has a build …\nThe path to libstd for each target\nGets the user-specified linker for a particular host or …\nGets the user-specified linker for a particular host or …\nThe linker to use for each host or target.\nReturns a <code>ProcessBuilder</code> appropriate for running a process …\nAn array of all tests created during this compilation.\nLibraries to test with rustdoc.\nWhat’s being doctested\nThe unit that generated this output.\nWhether or not -Zunstable-options is needed.\nThe total number of warnings emitted by the compilation.\nIndicator for how a unit is being compiled.\nAbstraction for the representation of a compilation target …\nAttached to a unit that is compiled for the “host” …\nAttached to a unit to be compiled for a particular target. …\nHash used for fingerprinting.\nSee <code>CompileKind::fingerprint_hash</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new list of <code>CompileKind</code> based on the requested …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the full unqualified name of this target, suitable …\nReturns a “short” version of the target name suitable …\nTypes of the output artifact that the compiler emits. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether production of this crate type requires the …\nRepresents <code>cargo::rustc-link-arg=FLAG</code>.\nRepresents <code>cargo::rustc-link-arg-benches=FLAG</code>.\nRepresents <code>cargo::rustc-link-arg-bins=FLAG</code>.\nDependency information as declared by a build script that …\nContains the parsed output of a custom build script.\nMap of packages to build script output.\nLinking information for a <code>Unit</code>.\nA build script instruction that tells Cargo to display an …\nRepresents <code>cargo::rustc-cdylib-link-arg=FLAG</code>.\nRepresents <code>cargo::rustc-link-arg-examples=FLAG</code>.\nRepresents one of the instructions from …\nA build script instruction that tells Cargo to display a …\nDeprecated: A build script instruction that tells Cargo to …\nRepresents <code>cargo::rustc-link-arg-bin=BIN=FLAG</code>.\nRepresents <code>cargo::rustc-link-arg-tests=FLAG</code>.\nChecks if this link type applies to a given <code>Target</code>.\nComputes several maps in <code>BuildRunner</code>.\nAbsolute path to the file in the target directory that …\nConstructs the unit of work of running a build script.\nVarious <code>--cfg</code> flags to pass to the compiler.\nVarious <code>--check-cfg</code> flags to pass to the compiler.\nReturns <code>true</code> if the given key already exists.\nEmits the output of a build script as a …\nAdditional environment variables to run the compiler with.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the build output for the given key.\nInserts a new entry into the map.\nWhen a build script run fails, store only log messages, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over all entries.\nNames and link kinds of libraries, suitable for the <code>-l</code> …\nPaths to pass to rustc with the <code>-L</code> flag.\nLinker arguments suitable to be passed to …\nErrors and warnings generated by this build.\nMetadata to pass to the immediate dependencies.\nCreates a build script dependency information from a …\nParses the output instructions of a build script.\nLike <code>BuildOutput::parse</code> but from a file path.\nParses <code>cargo::rustc-env</code> instruction.\nParses <code>cargo::rustc-flags</code> instruction.\nHost-only dependencies that have build scripts. Each …\nPrepares a <code>Work</code> that executes the target as a custom build …\nPrepares the Rust script for the unstable feature metabuild…\nReturns the previous parsed <code>BuildOutput</code>, if any, from a …\nPaths to trigger a rerun of this build script. May be …\nFiles that trigger a rebuild if they change.\nEnvironment variables which, when changed, will cause a …\nEnvironment variables that trigger a rebuild if they …\nThis is only used while constructing <code>to_link</code> to avoid …\nList of build script outputs this Unit needs to include …\nThis is used for crate compilations. The <code>dep_info</code> file is …\nDependency edge information for fingerprints. This is …\nA fingerprint can be considered to be a “short string” …\nIndication of the status on the filesystem for a …\nA <code>LocalFingerprint</code> represents something that we use to …\nThis is a precalculated fingerprint which has an opaque …\nThis represents a nonempty set of <code>rerun-if-changed</code> …\nThis represents a single <code>rerun-if-env-changed</code> annotation …\nThis unit is to be considered stale, even if hash …\nA dependency was stale.\nA dependency was stale.\nSee <code>FsStatus::StaleItem</code>.\nFile system inputs have changed (or are missing), or there …\nThis unit is up-to-date. All outputs and their …\nGet ready to compute the <code>LocalFingerprint</code> values for a …\nCreate a <code>LocalFingerprint</code> for an overridden build script. …\nCalculates the fingerprint for a <code>Unit</code>.\nCalculate a fingerprint for a “normal” unit, or …\nCalculate a fingerprint for an “execute a build script”…\nDynamically inspect the local filesystem to update the …\nFor performance reasons fingerprints will memoize their …\nCompares this fingerprint with an old version which was …\nReads the value from the old fingerprint hash file and …\nThe rustc target. This is only relevant for <code>.json</code> files, …\nHash of various config settings that change how things are …\nSorted list of all the declared cfg features.\nTypes and functions managing dep-info files. For more, see …\nReturns the location that the dep-info file will show up at\nFingerprints of dependencies.\nSorted list of cfg features enabled.\nThe <code>reference</code> file is considered as “stale” if any …\nChecks dynamically at runtime if this <code>LocalFingerprint</code> has …\nThe dependency’s fingerprint we recursively point to, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRead the environment variable of the given env <code>key</code>, and …\nDescription of whether the filesystem status for this unit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation about the inputs that affect this Unit (such …\nCompute the <code>LocalFingerprint</code> values for a <code>RunCustomBuild</code> …\nUse the <code>log</code> crate to log a hopefully helpful message in …\nCached hash of the <code>Fingerprint</code> struct. Used to improve …\nHash of some metadata from the manifest, such as “authors…\nThe crate name we’re using for this dependency, which if …\nWhether or not this dependency is an rmeta dependency or a …\nFiles, relative to <code>target_root</code>, that are produced by the …\nHash of the path to the base source file. This is relative …\nCalculates the fingerprint of a unit thats contains no …\nThe hash of the package id that this dependency points to\nPrepare for work when a package starts to build\nDetermines if a <code>Unit</code> is up-to-date, and if not prepares …\nHash of the <code>Profile</code>, <code>CompileMode</code>, and any extra flags …\nWhether or not this dependency is flagged as a public …\nHash of the version of <code>rustc</code> used.\nRUSTFLAGS/RUSTDOCFLAGS environment variable value (or …\nHash of the <code>Target</code> struct, including the target name, …\nReturns an absolute path that target directory. All paths …\nWrites the short fingerprint hash value to <code>&lt;loc&gt;</code> and logs …\nThe current format version of <code>EncodedDepInfo</code>.\nSome algorithms are here to ensure compatibility with …\nTells the associated path in <code>EncodedDepInfo::files</code> is …\nSame as <code>RustcDepInfo</code> except avoids absolute paths as much …\nsrc/, e.g. src/lib.rs\nThe representation of the <code>.d</code> dep-info file generated by …\ntarget/debug/deps/lib… or an absolute path /…/sysroot/…\nThe list of environment variables we found that the rustc …\nThe list of files that the main target in the dep-info …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses Cargo’s internal <code>EncodedDepInfo</code> structure that …\nParse the <code>.d</code> dep-info file generated by rustc.\nParses the dep-info file coming out of rustc into a …\nIf the algorithm uses fewer than 32 bytes, then the …\nTells a better story of why a build is considered “dirty…\nFirst time to build something.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether a build is dirty because it is a fresh build being …\nA diagnostic emitted by the compiler as a JSON message. We …\nThe filename in the top-level <code>target</code> directory where we …\nA single future-incompatible warning emitted by rustc.\nThe future incompatibility report, emitted by the compiler …\nStructure used for collecting reports in-memory.\nMax number of reports to save on disk.\nCurrent version of the on-disk format.\nA single report for a given compilation session.\nThe structure saved to disk containing the reports.\nThe original diagnostic emitted by the compiler\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe date at which this lint will become an error. …\nReturns an ANSI-styled report\nReturns a user-readable message explaining which of the …\nUnique reference to the report for the <code>--id</code> CLI flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the most recent report ID.\nLoads the on-disk reports.\nThe report ID to use for the next report to save.\nReport, suitable for printing to the console. Maps package …\nAvailable reports.\nWrites a future-incompat report to disk, using the …\nSaves a new report returning its id\nA message describing suggestions for fixing the reported …\nA schema version number, to handle older cargo’s from …\nA generic placeholder for “depends on everything run by …\nPossible artifacts that can be produced by compilations, …\nHandler for deduplicating diagnostics.\nThis structure is backed by the <code>DependencyQueue</code> type and …\nUsed to keep track of how many fixable warnings there are …\nThis structure is backed by the <code>DependencyQueue</code> type and …\nA node indicating that we only depend on the metadata of a …\nCount of warnings, used to print a summary after the job …\nDiagnostic deduplication support.\nIf an error is seen this should be called to set <code>fixable</code> …\nThis is the “main” loop, where Cargo does all work to …\nnumber of warnings that were suppressed because they were …\nEmits a diagnostic message.\nExecutes all jobs necessary to build the dependency graph.\nHow many jobs we’ve finished\nnumber of fixable warnings set to <code>NotAllowed</code> if any errors …\nChecks fixable if warnings are allowed fixable warnings …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Job</code> and <code>Work</code>.\nSee <code>JobState</code>.\nThe list of jobs that we have not yet started executing, …\nThis field is true for “interesting” errors and false …\nDisplays a final report of the warnings emitted by a …\nExecutes a job.\nTokens that are currently owned by this Cargo, and may be …\ntotal number of warnings\nCount of warnings, used to print a summary after the job …\nIndication of the freshness of a package.\nRepresents a unit of <code>Work</code> with a <code>Freshness</code> for caller to …\nThe basic unit of work.\nChains the given work by putting it in front of our own …\nConsumes this work by running it.\nReturns whether this job was fresh/dirty, where “fresh”…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a unit of work.\nCreates a new job representing a unit of work.\nCreates a new job that does nothing.\nCreates a unit of work that does nothing.\nConsumes this job by running it, returning the result of …\nCreates a new unit of work that chains <code>next</code> after ourself.\nA <code>JobState</code> is constructed by <code>JobQueue::run</code> and passed to …\nSee <code>Message::Diagnostic</code> and <code>Message::WarningCount</code>.\nReturns the argument unchanged.\nThe job id that this state is associated with, used when …\nCalls <code>U::from(self)</code>.\nChannel back to the main thread to coordinate messages and …\nNormally output is sent to the job queue with …\nA method used to signal to the coordinator thread that the …\nWhether or not we’re expected to have a call to …\nDrives a <code>Job</code> to finish. This ensures that a <code>Message::Finish</code>…\nSee <code>Message::Warning</code>.\nContains the paths of all target output locations.\nThe lockfile for a build (<code>.cargo-lock</code>). Will be unlocked …\nFetch the artifact path.\nThe directory for artifacts, i.e. binaries, cdylibs, …\nFetch the build script path.\nThe directory for build scripts: <code>$dest/build</code>\nFetch the deps path.\nThe directory with rustc artifacts: <code>$dest/deps</code>\nFetch the destination path for final artifacts  (…\nThe final artifact destination: <code>$root/debug</code> (or <code>release</code>).\nFetch the doc path.\nThe directory for rustdoc output: <code>$root/doc</code>\nFetch the examples path.\nThe directory for examples: <code>$dest/examples</code>\nFetch the fingerprint path.\nThe directory for fingerprints: <code>$dest/.fingerprint</code>\nReturns the argument unchanged.\nFetch the incremental path.\nThe directory for incremental files: <code>$dest/incremental</code>\nCalls <code>U::from(self)</code>.\nCalculate the paths for build output, lock the build …\nMakes sure all directories stored in the Layout exist on …\nCreate and return the tmp path.\nFetch the root path (<code>/…/target</code>).\nThe root directory: <code>/path/to/target</code>. If cross compiling: …\nThe directory for temporary data of integration tests and …\nValidates <code>package.links</code> field in the manifest file does …\nPossible ways to run rustc and request various parts of LTO…\nThis rustc invocation needs to embed bitcode in object …\nLTO has been explicitly listed as “off”. This means no …\nThis rustc invocation only needs to produce bitcode (it is …\nThis should not include bitcode. This is primarily to …\nLTO is run for this rustc, and it’s <code>-Clto=foo</code>. If the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLto setting to use when this unit needs object code.\nWhether or not any of these crate types need object code.\nCollects all dependencies of the <code>unit</code> for the output dep …\nSave a <code>.d</code> dep-info file for the given unit. This is the …\nBacially just normalizes a given path and converts it to a …\nUse a local <code>file://</code> URL.\nUse a remote URL to https://doc.rust-lang.org/ (default).\nA map of registry names to URLs where documentations are …\nMode used for <code>std</code>. This is for unstable feature …\nIndicates whether a target should have examples scraped …\nAn arbitrary URL.\nAdds unstable flag <code>--output-format</code> to the given <code>rustdoc</code> …\nAdds unstable flag <code>--extern-html-root-url</code> to the given …\nRecursively generate html root url for all units and their …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey is the registry name in the configuration …\nGenerates a map of root units for the standard library for …\nResolve the standard library dependencies.\nPeriodic concurrency tracking information.\nTracking information for the entire build.\nTracking information for an individual unit.\nUnits that are in the process of being built. When they …\nNumber of units currently running.\nMark that a dirty unit was encountered. (Re-compile needed)\nMark that a fresh unit was encountered. (No re-compile …\nReturns the codegen time as (<code>rmeta_time</code>, <code>codegen_time</code>, …\nConcurrency-tracking information. This is periodically …\nRecorded CPU states, stored as tuples. First element is …\nTotal time to build this unit in seconds.\nWhether or not timings should be captured.\nCall this when all units are finished.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of units that are not yet ready, because they are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast recorded state of the system’s CPUs and when it …\nThis is called periodically to mark the concurrency of …\nThe build profile.\nTake a sample of CPU usage\nSave HTML report to disk.\nIf true, saves an HTML report to disk.\nIf true, emits JSON information with timing information.\nThe time when the <code>.rmeta</code> file was generated, an offset in …\nA summary of the root units.\nWhen Cargo started.\nThe time when this unit started as an offset in seconds …\nA rendered string of when compilation started.\nTime as an offset in seconds from <code>Timings::start</code>.\nA string describing the cargo target.\nTotal number of dirty units.\nTotal number of fresh units.\nMark that a unit has finished running.\nMark that the <code>.rmeta</code> file as generated.\nMark that a unit has started running.\nTime tracking for each individual unit.\nSame as <code>unlocked_units</code>, but unlocked by rmeta.\nReverse deps that are freed to run after this unit …\nNumber of units that could run, but are waiting for a …\nWrite timing data in JavaScript. Primarily for <code>timings.js</code> …\nRender the summary table.\nRender the table of all units.\nAll information needed to define a unit.\nInternal fields of <code>Unit</code> which <code>Unit</code> will dereference to.\nA small structure used to “intern” <code>Unit</code> values.\nThis is used for target-dependent feature resolution and …\nGets the unique key for <code>-Zbuild-plan</code>.\nA hash of all dependencies of this unit.\nThe <code>cfg</code> features to enable for this unit. This must be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>unit</code> from its components. The returned <code>Unit</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not this is a “local” package.\nWhether this is a standard library unit.\nWhether this compilation unit is for the host or target …\nBuild script override for the given library name.\nThe “mode” this unit is being compiled for. See …\nCreates a new blank interner\nInformation about available targets, which files to …\nThe profile contains information about <em>how</em> the build …\nReturns whether compilation of this unit requires all …\nExtra compiler flags to pass to <code>rustdoc</code> for a given unit.\nExtra compiler flags to pass to <code>rustc</code> for a given unit.\nReturns whether or not warnings should be displayed for …\nInformation about the specific target to build, out of the …\nA boolean-like to indicate if a <code>Unit</code> is an artifact or not.\nCollection of stuff used while creating the <code>UnitGraph</code>.\nGiven a <code>parent</code> unit containing a dependency <code>dep</code> whose …\nAdd the standard library units to the <code>unit_dependencies</code>.\nThen entry point for building a dependency graph of …\nFind artifacts for all <code>deps</code> of <code>unit</code> and add units that …\nCompute all the dependencies for the standard library.\nChoose the correct mode for dependencies.\nReturns the direct unit dependencies for the given <code>Unit</code>.\nReturns the dependencies needed to run a build script.\nReturns the dependencies necessary to document a package.\nFill in missing dependencies for units of the …\nIf a build script is scheduled to be run for the package …\nReturns a filtered set of dependencies for the given unit.\nCompute the dependencies of a single unit, recursively …\nCompute all the dependencies of the given root units. The …\nA set of edges in <code>unit_dependencies</code> where (a, b) means …\nGets <code>std_features</code> during building std, otherwise …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe mode we are compiling in. Used for preventing from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> while generating the dependencies for the standard …\nCreate a new Unit for a dependency from <code>parent</code> to <code>pkg</code> and …\nGets <code>std_resolve</code> during building std, otherwise <code>usr_resolve</code>…\nLike <code>usr_features</code> but for building standard library (…\nLike <code>usr_resolve</code> but for building standard library (…\nStores the result of building the <code>UnitGraph</code>.\nA unit dependency.\nThe dependency graph of Units.\nIf <code>Some</code>, the name of the dependency if renamed in toml. It…\nOutputs a JSON serialization of <code>UnitGraph</code> for given …\nThe name the parent uses to refer to this dependency.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>true</code>, the dependency should not be added to Rust’s …\nWhether or not this is a public dependency.\nThe dependency unit.\nThe purpose of this dependency (a dependency for a test, …\nWe represent all binaries in this dependency\nThe presence of an artifact turns an ordinary dependency …\nOnly applicable to build-dependencies, causing them to be …\nInformation about a dependency requested by a Cargo …\nThe name of the platform triple, like <code>x86_64-apple-darwin</code>, …\nThe data underlying a <code>Dependency</code>.\nWe represent a single binary\nReturns a string of crate type of the artifact being built.\nThe renamed name of this dependency, if any.\nReturns the list of features that are requested by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is a “locked” dependency. …\nReturns <code>false</code> if the dependency is only used to build the …\nLocks this dependency to depending on the specified …\nLocks this dependency to a specified version.\nReturns <code>true</code> if the package (<code>sum</code>) can fulfill this …\nReturns <code>true</code> if the package (<code>id</code>) can fulfill this …\nReturns <code>true</code> if the package (<code>id</code>) can fulfill this …\nDependencies are potential rust libs if they are not …\nThis is the name of this <code>Dependency</code> as listed in <code>Cargo.toml</code>…\nThe name of the package that this <code>Dependency</code> depends on.\nAttempt to create a <code>Dependency</code> from an entry in the …\nThe file system path for a local path dependency.\nIf none, this dependencies must be built for all platforms.\n<code>public</code> flag is unset if <code>-Zpublic-dependency</code> is not enabled\nThe registry URL this dependency is from. If None, then it …\nSource ID for the registry as specified in the manifest.\nSets whether the dependency requests default features of …\nSets the list of features requested for the package.\nSets whether the dependency is optional.\nSets whether the dependency is public.\nSets the source ID for this dependency.\nSets the version requirement for this dependency.\nReturns <code>true</code> if the default features of the dependency are …\nValue of <code>allow-features</code>\nPossible values allowed for the <code>--edition</code> CLI flag.\nA parsed representation of all unstable flags that Cargo …\nThe edition of the compiler (RFC 2052)\nThe 2015 edition\nThe 2018 edition\nThe 2021 edition\nThe 2024 edition\nStatus and metadata for a single unstable feature.\nUnstable feature context for querying if a new Cargo.toml …\nThe latest stable edition.\nThe latest edition that is unstable.\nGets the current activated features.\nThe current activated features.\nAllow <em>only</em> the listed unstable features\nDownloading packages from alternative registry indexes.\nAllows authenticating with asymmetric tokens\nAvoid installing dev-dependencies if possible\nTrack changes to dependency artifacts\nAllow Cargo packages to depend on bin, cdylib, and …\nEnable Cargo to compile the standard library itself as …\nConfigure features enabled for the standard library itself …\nGenerate a link to Cargo documentation for the current …\nEnable the <code>[lints.cargo]</code> table\nOnly for testing and developing. See “Running with …\nReturns the current release channel (“stable”, “beta…\nCheckout git dependencies using <code>gitoxide</code> (submodules are …\nUse a checksum to determine if output is fresh rather than …\nUpdates the given <code>ProcessBuilder</code> to include the …\nAllow to specify which codegen backend should be used.\nEnable the <code>codegen-backend</code> option in profiles in …\nEnable the <code>include</code> key in config files\n“default-run” manifest option.\nAllow specifying different binary name apart from the …\nResolve minimal dependency versions instead of maximum …\nLink to the unstable documentation.\nCompile and run doctests for non-host target using runner …\nBuild proc-macros for both the host and the target\nUsing editions\nSupport for 2021 edition.\nSupport for 2024 edition.\nGenerates an error if <code>-Z unstable-options</code> was not used for …\nGenerates an error if <code>-Z unstable-options</code> was not used for …\nA listing of stable and unstable new syntax in Cargo.toml.\nAll fetches are done with <code>gitoxide</code>, which includes git …\nReturns the first version that a particular edition was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrack cache usage and “garbage collect” unused files\nEnable support for shallow git fetch operations\nUse gitoxide for the given git interactions, or all of …\nReturns a list of <code>(&lt;option-name&gt;, &lt;help-text&gt;)</code>.\nEnable the <code>[host]</code> section in the .cargo/config.toml file\nA feature flag which doesn’t have any meaning except for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the given feature is allowed to use in this …\nWhether this feature is allowed to use in the given …\nWhether the source manifest is from a local package.\nReturns <code>true</code> if this edition is stable in this release.\nDeclarative build scripts.\nResolve minimal dependency versions instead of maximum\nEnable rust-version aware policy within cargo\nConfigure Cargo to update the mtime of used files\nFeature name. This is valid Rust identifier so no dash …\nAllow to specify profiles other than ‘dev’, ‘release…\nCreates a new unstable features context.\nWhether is allowed to use any unstable features.\nDo not update the registry index even if the cache is …\nAllow multiple packages to participate in the same API …\nHandle intra-workspace dependencies when packaging\nEnable support to run tests with -Cpanic=abort\nParses <code>-Z</code> flags from the command line, and returns …\nAllow paths that resolve relatively to a base specified in …\nAllow to specify per-package targets (compile kinds).\nReturns the previous edition from this edition.\nOverriding profiles for dependencies.\nAllow specifying rustflags directly in a profile.\nEnable the <code>rustflags</code> option in profiles in …\nSpecifying the ‘public’ attribute on dependencies.\nRespect a dependency’s <code>public</code> field in Cargo.toml to …\nWhether a lock file is published with this crate.\nEnable the <code>publish.timeout</code> key in .cargo/config.toml file\nRenaming a package in the manifest via the <code>package</code> key.\nChecks if the given feature is enabled.\nOpt-in new-resolver behavior.\nSet the root directory relative to which paths are printed …\nSpecifying a minimal ‘rust-version’ attribute for …\nAllow passing external documentation mappings to rustdoc\nAllows Rustdoc to scrape code examples from …\nFeatures we deem safe for everyday use - typically true …\nReturns the next edition from this edition, returning the …\nEnable support for single-file, <code>.rs</code> packages\nWhen cloning git dependencies, perform a shallow clone and …\nWhen cloning the index, perform a shallow clone. Maintain …\nAllow to specify whether binaries should be stripped.\nWhether or not this edition supports the …\nWhether or not this edition supports the <code>rust_*_idioms</code> …\nEnable the <code>target-applies-to-host</code> key in the …\nA dummy feature that doesn’t actually gate anything, but …\nA dummy feature that gates the usage of the <code>im-a-teapot</code> …\nAllow setting trim-paths in a profile to control the …\nEnable the <code>trim-paths</code> option in profiles\nGenerates <code>-Z</code> flags as fields of <code>CliUnstable</code>.\nAllow the usage of unstable options\nVersion that this feature was stabilized or removed.\nAllow use of the build.warnings config key\nAllow workspace members to inherit fields and dependencies …\nAutomatic garbage collection settings from the <code>gc.auto</code> …\nHow often auto-gc will run by default unless overridden in …\nDefault max ago to auto-clean cache data, which must be …\nDefault max age to auto-clean extracted sources, which can …\nGarbage collector.\nOptions to use for garbage collection.\nPerforms automatic garbage cleaning.\nPerforms automatic garbage collection.\nThe maximum frequency that automatic garbage collection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerforms garbage collection based on the given options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether any download cache cleaning options are …\nReturns whether any download cache cleaning options based …\nA lock on the package cache.\nAnything older than this duration will be deleted in the …\nThe <code>--max-crate-size</code> CLI option.\nThe <code>--max-download-size</code> CLI option.\nAny git checkout older than this duration will be deleted …\nThe <code>--max-git-co-age</code> CLI option.\nAny git clone older than this duration will be deleted …\nThe <code>--max-git-db-age</code> CLI option.\nThe <code>--max-git-size</code> CLI option.\nAny index older than this duration will be deleted from …\nThe <code>--max-index-age</code> CLI option.\nAnything older than this duration will be deleted in the …\nThe <code>--max-src-age</code> CLI option.\nThe <code>--max-src-size</code> CLI option.\nReturns whichever <code>Duration</code> is shorter.\nParses a time span string.\nReturns the shorter duration from <code>cur_span</code> versus …\nParses a frequency string.\nParses a file size using metric or IEC units.\nParses a time span string.\nParses a time span value fetched from config.\nUpdates the <code>GcOpts</code> to incorporate the specified max …\nUpdates the configuration of this <code>GcOpts</code> to incorporate the\nFilesystem paths in the global cache.\nThis is a cache of modifications that will be saved to …\nThe filename of the database.\nThe key for a git checkout entry stored in the database.\nThe key for a git db entry stored in the database.\nTracking for the global shared cache (registry files, …\nType for SQL columns that refer to the primary key of …\nThe key for a registry <code>.crate</code> entry stored in the database.\nThe key for a registry index entry stored in the database.\nThe key for a registry src directory entry stored in the …\nType for timestamps as stored in the database.\nHow often timestamps will be updated.\nThis is an optimization used to make sure cargo only …\nDeletes files from the global cache based on the given …\nConnection to the SQLite database.\nRoot path to the <code>.crate</code> files.\nThe filename of the compressed crate, like <code>foo-1.2.3.crate</code>.\nThe path to the database.\nReturns the disk usage for a git checkout directory.\nA unique name of the git database.\nA unique name of the git database.\nA unique name of the registry source.\nA unique name of the registry source.\nA unique name of the registry source.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds paths to delete from <code>git_checkout</code> whose last use is …\nAdds paths to delete from <code>git_db</code> in order to keep the …\nAdds paths to delete from the git cache, keeping the total …\nReturns a map of ID to path for the given ids in the given …\nAdds paths to delete from <code>registry_index</code> whose last use is …\nAdds paths to delete from either <code>registry_crate</code> or …\nAdds paths to delete from either <code>registry_crate</code> or …\nAdds paths to delete from both <code>registry_crate</code> and …\nReturns all git checkout timestamps.\nNew git checkout entries to insert.\nRoot path to the git checkouts.\nRoot path to the git DBs.\nReturns all git db timestamps.\nNew git db entries to insert.\nReturns the numeric ID of the git db, either fetching from …\nCache of git keys, used for faster fetching.\nGiven an encoded registry name, returns its ID.\nRoot path to the index caches.\nFlushes all of the <code>git_checkout_timestamps</code> to the database,\nFlushes all of the <code>git_db_timestamps</code> to the database, …\nHelper to generate the upsert for the parent tables.\nFlushes all of the <code>registry_crate_timestamps</code> to the …\nFlushes all of the <code>registry_index_timestamps</code> to the …\nFlushes all of the <code>registry_src_timestamps</code> to the database,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not the given error should cause a …\nIndicates the given <code>GitCheckout</code> has been used right now.\nIndicates the given <code>GitCheckout</code> has been used with the …\nIndicates the given <code>RegistryCrate</code> has been used right now.\nIndicates the given <code>RegistryCrate</code> has been used with the …\nIndicates the given <code>RegistryIndex</code> has been used right now.\nIndicates the given <code>RegistryIndex</code> has been used with the …\nIndicates the given <code>RegistrySrc</code> has been used right now.\nIndicates the given <code>RegistrySrc</code> has been used with the …\nMigrations which initialize the database, and can be used …\nReturns a list of directory entries in the given path.\nCreates a new <code>GlobalCacheTracker</code>.\nReturns the current time.\nThe current time, used to improve performance to avoid …\nThe directory name of the extracted source, like <code>foo-1.2.3</code>.\nUpdates the database to add any files that are currently …\nUpdates the database to add any <code>.crate</code> files that are …\nReturns all registry crate cache timestamps.\nNew registry <code>.crate</code> entries to insert.\nReturns the numeric ID of the registry, either fetching …\nReturns all index cache timestamps.\nNew registry index entries to insert.\nCache of registry keys, used for faster fetching.\nReturns all registry source cache timestamps.\nNew registry src directory entries to insert.\nSaves all of the deferred information to the database.\nThis is used so that a warning about failing to update the …\nVariant of <code>DeferredGlobalLastUse::save</code> that does not …\nWrites to the database to indicate that an automatic GC …\nA unique name of the checkout without the database.\nReturns whether or not an auto GC should be performed, …\nThe size of the <code>.crate</code> file.\nTotal size of the src directory in bytes.\nTotal size of the checkout directory.\nRoot path to the <code>src</code> directories.\nSynchronizes the database to match the files on disk.\nConverts a <code>SystemTime</code> to a <code>Timestamp</code> which can be stored …\nRemoves database entries for any files that are not on …\nRemoves database entries for any files that are not on …\nFills in the <code>size</code> column where it is NULL.\nFor parent tables, add any entries that are on disk but …\nWhen parsing <code>Cargo.toml</code>, some warnings should silenced if …\nContains all the information about a package, as loaded …\nGeneral metadata about a package which is just blindly …\nInformation about a binary, a library, an example, etc. …\nThe raw contents of the original TOML\nThe raw contents of the original TOML\nCorresponds to <code>--crate-type</code> compiler attribute. See …\nBuilds a <code>Target</code> corresponding to the <code>build = &quot;build.rs&quot;</code> …\nWhether docs should be built for the target via <code>cargo doc</code> …\nCollection of spans for the original TOML\nCollection of spans for the original TOML\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if it is an executable example.\nReturns <code>true</code> if it is a binary or executable example. …\nReturns whether this target produces an artifact which can …\nIs this a <code>--bin bin</code>, <code>--lib</code>, <code>--example ex</code>? Serialized as a …\n<code>RUSTFLAGS</code> from the <code>[lints]</code> table\nThe <code>TomlManifest</code> with all fields expanded\nThe <code>TomlManifest</code> with all fields expanded\nThe <code>TomlManifest</code> as parsed from <code>Manifest::document</code>\nThe <code>TomlManifest</code> as parsed from <code>VirtualManifest::document</code>\nReturns whether production of this artifact requires the …\nThe style of resolver behavior to use, declared with the …\nThe style of resolver behavior to use, declared with the …\nReturns the arguments suitable for <code>--crate-type</code> to pass to …\nReturns the arguments suitable for <code>--crate-type</code> to pass to …\nWhether tests should be run for the target (<code>test</code> field in …\nSee <code>Manifest::normalized_toml</code> for what “normalized” …\nUnstable, nightly features that are enabled in this …\nHelper for downloading crates.\nInformation about a package that is available somewhere in …\nA set of packages, with the intent to download.\nA Package in a form where <code>Serialize</code> can be derived.\nGlobal filesystem lock to ensure only one Cargo is …\nMerge the given set into self.\nGets the package authors.\nActual downloaded data, updated throughout the lifetime of …\nGets the manifest dependencies.\nA descriptive string to print when we’ve finished …\nDownloads any packages accessible from the give root ids.\nTotal bytes for all successfully downloaded packages.\nUsed to prevent reusing the <code>PackageSet</code> to download twice.\nNumber of downloads that have successfully finished.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the package uses a custom build script for …\nHTTP headers for debugging.\nThe package that we’re downloading.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize (in bytes) and package name of the largest downloaded …\nGets the library crate for this package, if it exists.\nGets the manifest.\nThe package’s manifest.\nGets the manifest.\nGets the path to the manifest.\nThe root of the package.\nWhether or not to use curl HTTP/2 multiplexing.\nGets the name of the package.\nCreates a package from a manifest and its location.\nThe next ID to use for creating a token (see …\nThis is a slow-speed check. It is reset to …\nThis is the slow-speed threshold byte count. It starts at …\nGets the <code>PackageId</code> object for the package (fully defines a …\nWhen a download is started, it is added to this map. The …\nSet of packages currently being downloaded. This should …\nReturns <code>true</code> if this package is a proc-macro.\nProgress bar.\nReturns <code>None</code> if the package is set to publish. Returns …\nReturns the number of crates that are still downloading.\nThe final result of each download. A pair <code>(token, result)</code>. …\nLogic used to track retrying this download if it’s a …\nGets the root folder of the package.\nGets the package’s minimum Rust version.\nDownloads that have failed and are waiting to retry again …\nStarts to download the package for the <code>id</code> specified.\nTime when downloading started.\nThe moment we started this transfer at.\nIndicates <em>all</em> downloads were successful.\nGets the summary for the package.\nGets the targets specified in the manifest.\nTimeout management, both of timeout thresholds as well as …\nThe token for this download, used as the key of the …\nStatistics updated from the progress callback in libcurl.\nLast time bytes were received.\nThe URL that we’re downloading from, cached here for …\nGets the current package version.\nBlocks the current thread waiting for a package to finish …\nBlock, waiting for curl. Returns a token and a <code>Result</code> for …\nCheck if there are any dependency packages that violate …\nIdentifier for a specific version of a package in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a value that implements a “stable” hashable …\nFilename of the <code>.crate</code> tarball, e.g., …\nConvert a <code>PackageId</code> to a <code>PackageIdSpec</code>, which will have …\nChecks whether the given <code>PackageId</code> matches the …\nChecks a list of <code>PackageId</code>s to find 1 that matches this …\nRoughly equivalent to <code>PackageIdSpec::parse(spec)?.query(i)</code>\nUsed to force a unit to always be compiled with the …\nTrue = “Fat” LTO False = rustc default (no args), …\nThe debuginfo level setting.\nFor internal purposes: a deferred debuginfo level that can …\nA strip option that might be overridden by Cargo for …\nThe link-time-optimization setting.\nNamed LTO settings like “thin”.\nNamed Strip settings\nDon’t remove any symbols\nExplicitly no LTO, disables thin-LTO.\nHow Cargo processes the <code>panic</code> setting or profiles.\nThe <code>panic</code> setting.\nProfile settings used to determine which compiler flags to …\nAn object used for handling the profile hierarchy.\nThe root profile (dev/release).\nCollection of all profiles.\nIndicates that this unit will read its <code>profile</code> setting and …\nA debuginfo level that is fixed and will not change.\nA strip option that is fixed and will not change.\nThe setting for choosing which symbols to strip.\nFlags used in creating <code>Unit</code>s to indicate the purpose for …\nCreates a <code>ProfileMaker</code>, and inserts it into <code>self.by_name</code>.\nInitialize <code>by_name</code> with the two “root” profiles, <code>dev</code>, …\nThis is only set for artifact dependencies which have their\nThis returns the base profile. This is currently used for …\nThe profile makers. Key is the profile name.\nCompares all fields except <code>name</code>, which doesn’t affect …\nThe starting, hard-coded defaults for the profile.\nReturns a built-in <code>dev</code> profile.\nReturns a built-in <code>release</code> profile.\nMap of profile name to directory name for that profile.\nForce the deferred, preferred, debuginfo level to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper for fetching a profile from config.\nGets the directory name for a profile, like <code>debug</code> or …\nRetrieves the profile for a target. <code>is_member</code> is whether …\nGenerates a new <code>Profile</code>.\nReturns the profile maker for the given profile name.\nThe profile for <em>running</em> a <code>build.rs</code> script is only used for …\nA target for <code>build.rs</code> or any of its dependencies, or a …\nA target for a build dependency or proc-macro (or any of …\nIncremental compilation can be overridden globally via:\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe main way to interact with this debuginfo level, …\nThe main way to interact with this strip option, turning …\nReturns <code>true</code> if this unit is for a build script or any of …\nReturns <code>true</code> if a string is a toggle that turns an option …\nReturns true if any debuginfo will be generated. Helper …\nWe might contain a parent artifact compile kind for …\nTakes the manifest profiles, and overlays the config …\nMerge the given TOML profile into the given <code>Profile</code>.\nMerge package and build overrides from the given TOML …\nCreates a new <code>ProfileMaker</code>.\nA unit for a compiler plugin or their dependencies.\nA unit for a custom build script or proc-macro or its …\nThis is a special case for unit tests of a proc-macro.\nA unit for a normal target/dependency (i.e., not custom …\nA unit for a test/bench target or their dependencies.\nThe original profiles written by the user in the manifest …\nReturns how <code>panic</code> settings should be handled for this …\nHow Cargo processes the <code>panic</code> setting or profiles.\nReturns the hard-coded directory names for built-in …\nReturns the built-in profiles (not including dev/release, …\nBuild a <code>ProfileMaker</code> by recursively following the <code>inherits</code> …\nThe profile the user requested to use.\nThe compile kind of the root unit for which artifact …\nThe host target for rustc being used by this <code>Profiles</code>.\nReset to stripping debuginfo.\nThe TOML profile defined in <code>Cargo.toml</code> or config.\nUsed to check for overrides for non-existing packages.\nValidate that a package does not match multiple package …\nCheck for any profile override specs that do not match any …\nReset to the lowest level: no debuginfo.\nSet the artifact compile target for use in features using …\nSet the artifact compile target as determined by a …\nReturns a new copy updated based on the target dependency.\nKinds of sources a <code>PackageRegistry</code> has loaded.\nA source that is locked and not going to change.\nA map of all “locked packages” which is filled in when …\nArgument to <code>PackageRegistry::patch</code> which is information …\nA source that is not locked nor a path-override.\nA source from a [path override].\nThis structure represents a registry of known packages. It …\nThis tuple is an argument to <code>PackageRegistry::patch</code>.\nAn abstraction provides a set of methods for querying …\nAdds a source from a path override.\nAdds a source which will be locked. Useful for path …\nAdds a source to the registry.\nAllows a group of package to be available to query even if …\nSomething only used for backwards compatibility with the …\nBlock until all outstanding <code>Poll::Pending</code> requests are …\nremove all residual state from previous lock files.\nThe original <code>Dependency</code> directive, except “locked” so …\nGets the description of a source, to provide useful …\nEnsures the <code>Source</code> of the given <code>SourceId</code> is loaded. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a source is replaced with some other source.\nLoads the <code>Source</code> for a given <code>SourceId</code> to this registry, …\nSee <code>PackageRegistry::lock</code>.\nThis function is used to transform a summary to another …\nLock all patch summaries added via <code>patch</code>, making them …\nThis is constructed via <code>PackageRegistry::register_lock</code>. …\nA list of sources which are considered “path-overrides”…\nThe <code>PackageId</code> that was previously found in a lock file …\nInsert a <code>[patch]</code> section into this registry.\nGets all patches grouped by the source URLs they are going …\nPatches registered during calls to <code>PackageRegistry::patch</code>.\nPatches available for each source.\nWhether patches are locked. That is, they are available to …\nAttempt to find the packages that match a dependency …\nQueries path overrides from this registry.\nGathers the result from <code>Registry::query</code> as a list of …\nRegisters one “locked package” to the registry, for …\nUse for tracking sources that are already loaded into the …\nA helper for selecting the summary, or generating a …\nA group of packages tha allows to use even when yanked.\nThe <code>Cargo.lock</code> structure.\nContains the error value\nContains the success value\nA helper “iterator” used to extract candidates within …\nRepresents a fully-resolved package dependency graph. Each …\nResolver behavior, used to opt-in to new behavior that is …\nError during resolution providing a path of <code>PackageId</code>s.\nOptions for how the resolve should work.\nA version to indicate how a <code>Cargo.lock</code> should be …\nHistorical baseline for when this abstraction was added.\nV1 is the original resolver behavior.\nA more compact format, more amenable to avoiding …\nV2 adds the new feature resolver.\nA format that explicitly lists a <code>version</code> at the top of the …\nV3 changes version preferences\n<code>SourceId</code> URL serialization is aware of URL encoding. For …\nUnstable. Will collect a certain amount of changes and …\nA collection of preferences for particular package …\nAttempts to activate the summary <code>candidate</code> in the context …\nRecursively activates the dependencies for <code>summaries</code>, in …\nChecks that packages are unique when written to lock file.\nChecksum for each package. A SHA256 hash of the <code>.crate</code> …\nThere are 2 sources of facts for the resolver:\nWhether or not dev-dependencies should be included.\nDefinition of how to encode a <code>Resolve</code> into a TOML …\nResolves conditional compilation for <code>features</code> section in …\nFeatures enabled for a given package.\nSet of features requested on the command-line.\nLooks through the states in <code>backtrack_stack</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to find a new conflict that allows a …\nA graph, whose vertices are packages and edges are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n“Unknown” metadata. This is a collection of extra, …\nAttempts to find another candidate to check from this list.\nA map from packages to a set of their public dependencies\nReplacements from the <code>[replace]</code> table.\nBuilds the list of all packages required to build the …\nInverted version of <code>replacements</code>.\n<code>root</code> is optional to allow backward compatibility.\nReturns Some of the largest item in the iterator. Returns …\n<code>[patch]</code> entries that did not match anything, preserved in …\nVersion of the <code>Cargo.lock</code> format, see …\nThis module implements support for preferring some …\nThis is a trie for storing a large number of sets designed …\nOne of the stored sets.\nA map from an element to a subtrie where all the sets in …\nFinds any known set of conflicts, if any, where all …\nFinds any known set of conflicts, if any, which are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds to the cache a conflict of the form: <code>dep</code> is known to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFind the activated version of a crate based on the name, …\nWhen backtracking it can be useful to know how far back to …\nActivate this summary by inserting it into our list of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf the package is active returns the <code>ContextAge</code> when it …\nChecks whether all of <code>parent</code> and the keys of …\nget the package that will be linking to a native library …\na way to look up for a package in activations what …\nlist the features that are activated for each package\nA feature has a direct cycle to itself.\nThe package does not have the requested dependency.\nThe package does not have the requested feature.\nAn error for a requirement.\nSet of feature and dependency requirements for a package.\nFind out what dependencies will be added by activating …\nTakes requested features for a single package from the …\nThe deps map is a mapping of dependency name to list of …\nThe set of features enabled on this package which is later …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueries the <code>registry</code> to return a list of candidates for <code>dep</code>…\na cache of <code>Candidate</code>s that fulfil a <code>Dependency</code> (and …\nReturns the features we ended up using and all …\na cache of <code>Dependency</code>s that are required for a <code>Summary</code>\nall the cases we ended up using a supplied replacement\nThe <code>Cargo.lock</code> structure.\nPretty much equivalent to <code>SourceId</code> with a different …\nEncodes the inner <code>SourceId</code> as a URL.\nWe don’t care about the deserialization of this, as the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>Cargo.lock</code> to a Resolve.\nCreates a <code>EncodableSourceId</code> that always encodes URL params.\n<code>root</code> is optional to allow backward compatibility.\nCreates a <code>EncodableSourceId</code> that doesn’t encode URL …\nContains the error value\nContains the success value\nError during resolution providing a path of <code>PackageId</code>s.\nMaybe the user mistyped the name? Like <code>dep-thing</code> when …\nReturns String representation of dependency chain for a …\nReturns String representation of dependency chain for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a path of packages from the package whose …\nMaybe something is wrong with the available versions\nMap of activated features.\nAny dependency with both artifact and target specified.\nFeatures specified on the command-line.\nFeatures requested on the command-line with flags.\nFeatures specified in a dependency declaration.\nMap of differences.\nOptions for how the feature resolver works.\nThe new feature resolver that <code>resolve</code>s your project.\nFlag to indicate if features are requested for a certain …\nFlag to indicate that target-specific filtering should be …\nFlag to indicate if Cargo is building <em>any</em> dev units …\nBuild dependency or proc-macro.\nNormal or dev dependency.\nThe key used in various places to store features for a …\nFeatures flags requested for a package.\nSet of all activated features for all packages in the …\nActivate a feature within a dependency (<code>dep_name/feat_name</code> …\nActivate a dependency (<code>dep:dep_name</code> syntax).\nActivate a single <code>FeatureValue</code> for a package.\nActivates <code>FeatureValue</code>s on the given package.\nActivate the given feature for the given package, and then …\nOptional dependencies that should be built.\nMap of optional dependencies activated for each package.\nReturns the list of features that are enabled for the …\nMap of features activated for each package.\nVariant of <code>activated_features</code> that returns <code>None</code> if this is …\nThe <code>--all-features</code> flag.\nCompare the activated features to the resolver. Used for …\nIf enabled, compare against old resolver (for testing).\nCompares the result against the original resolver behavior.\nDev dep features will not be activated unless needed.\nBuild deps and proc-macros will not share features with …\n<code>dep_name?/feat_name</code> features that will be activated if …\nReturns the dependencies for a package, filtering out …\nPerforms the process of resolving all features for the …\nFeatures from the <code>--features</code> flag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CliFeatures</code> from the given command-line …\nReturns Vec of <code>FeatureValues</code> from a Dependency definition.\nReturns Vec of <code>FeatureValues</code> from a set of command-line …\nWhether the given package has any proc macro target, …\nWhether the given package is a proc macro lib target.\nTargets that are not in use will not activate features.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the given dependency should be included.\nCreates a new <code>CliFeatures</code> with the given <code>all_features</code> …\nCreates a new <code>FeatureOpts</code> for the given behavior.\nOptions that change how the feature resolver operates.\nKeeps track of which packages have had its dependencies …\nThe platforms to build for, requested by the user.\nRuns the resolution algorithm and returns a new …\nIf this is <code>true</code>, then a non-default <code>feature_key</code> needs to …\nInverse of <code>--no-default-features</code> flag.\nThe <code>features</code> dependency field.\nThe <code>default-features</code> dependency field.\nRepresents a fully-resolved package dependency graph. Each …\nA version to indicate how a <code>Cargo.lock</code> should be …\nHistorical baseline for when this abstraction was added.\nA more compact format, more amenable to avoiding …\nA format that explicitly lists a <code>version</code> at the top of the …\n<code>SourceId</code> URL serialization is aware of URL encoding. For …\nUnstable. Will collect a certain amount of changes and …\nChecksum for each package. A SHA256 hash of the <code>.crate</code> …\nGets the default lockfile version.\nFeatures enabled for a given package.\nThis is only here for legacy support, it will be removed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nA graph, whose vertices are packages and edges are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum version of lockfile made into the stable …\n“Unknown” metadata. This is a collection of extra, …\nResolves one of the paths from the given dependent package …\nA map from packages to a set of their public dependencies\nReplacements from the <code>[replace]</code> table.\nInverted version of <code>replacements</code>.\n<code>[patch]</code> entries that did not match anything, preserved in …\nReturns the version of the encoding that’s being used …\nVersion of the <code>Cargo.lock</code> format, see …\nGets the default lockfile version for the given Rust …\nA key that when stord in a hash map ensures that there is …\nA list of packages that have gotten in the way of …\nAll possible reasons that a package might fail to activate.\nInformation about the dependencies for a crate, a tuple of:\nThe preferred way to store the set of activated features …\nThe <code>links</code> key is being violated. For example one crate in …\nA dependency listed features that weren’t actually …\nA dependency listed a feature for an optional dependency, …\nNote that an <code>OrdSet</code> is used for the remaining dependencies …\nA dependency listed a feature that ended up being a …\nResolver behavior, used to opt-in to new behavior that is …\nOptions for how the resolve should work.\nThere was a semver conflict, for example we tried to …\nA type that represents when cargo treats two Versions as …\nV1 is the original resolver behavior.\nV2 adds the new feature resolver.\nV3 changes version preferences\nthe data is augmented by the insertion time. This insures …\nWhether or not dev-dependencies should be included.\nCreates a <code>ResolveOpts</code> that resolves everything.\nSet of features requested on the command-line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the least number of candidates that any of this …\nProvides an escape hatch for machine with slow CPU for …\na monotonic counter, increased for each new insertion.\nA collection of preferences for particular package …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicate that the given package (specified as a <code>Dependency</code>…\nIndicate that the given package (specified as a <code>PackageId</code>) …\nSort (and filter) the given vector of summaries in-place\nForce color output\nIntelligently guess whether to use color output\nWhether messages should use color output\nForce disable color output\nAn abstraction around console output that remembers …\nA <code>Write</code>able object, either with or without color support\nColor-enabled stdio, with information on whether color …\nThe requested verbosity of output.\nA plain write object without color support\nGets the current color choice.\nRuns the callback if we are not in verbose mode.\nReturns the width of the terminal to use for diagnostics …\nGets a reference to the underlying stderr writer.\nErase from cursor to end of line.\nWhether the shell supports color.\nReturns the width of the terminal in spaces, if any.\nPrints a red ‘error’ message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a shell from a plain writable object, with no …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>needs_clear</code> flag is unset.\nReturns <code>true</code> if stderr is a tty.\nPrints out a message with a status. The status comes …\nFlag that indicates the current line needs to be cleared …\nCreates a new shell (color choice and verbosity), …\nPrints a cyan ‘note’ message.\nGets a reference to the underlying stdout writer.\nWrapper around stdout/stderr. This helps with supporting …\nPrints a message, where the status will have <code>color</code> color, …\nPrints a message to stderr and translates ANSI escape code …\nPrints a message to stdout and translates ANSI escape code …\nPrints the passed in Message to stderr\nReturns the width used by progress bars for the tty.\nUpdates the color choice (always, never, or auto) from a …\nSets whether the next print should clear the current line.\nUpdates the verbosity of the shell.\nShortcut to right-align and color green a status message.\nShortcut to right-align a status message.\nGets stderr as a <code>io::Write</code>.\nGets stdout as a <code>io::Write</code>.\nConverts our color choice to anstream’s version.\nRuns the callback only if we are in verbose mode.\nGets the verbosity of the shell.\nHow verbose messages should be.\nPrints an amber ‘warning’ message.\nWhere the remote source key is defined.\nDefined in the <code>[registries]</code> table or the built-in <code>crates-io</code>…\nDefined in the <code>[source]</code> replacement table.\nUnique identifier for a source of packages.\nA <code>Display</code>able view into a <code>SourceId</code> that will write it as a …\nThe interned version of <code>SourceId</code> to avoid excessive clones …\nGets the <code>SourceId</code> associated with given name of the remote …\nGets the name of the remote registry as defined in the …\nGets the key if it’s from an alternative registry.\nLike <code>Self::as_url</code> but with URL parameters encoded.\nA view of the <code>SourceId</code> that can be <code>Display</code>ed as a URL.\nGets the canonical URL of this source, used for internal …\nThe canonical version of the above url. See <code>CanonicalUrl</code> …\nReturns the <code>SourceId</code> corresponding to the main repository.\nReturns whether to access crates.io over the sparse …\nReturns the <code>SourceId</code> corresponding to the main repository, …\nDisplays the text “crates.io index” for Cargo shell …\nDisplays the name of a registry if it has one. Otherwise …\nCreates a <code>SourceId</code> for a remote registry from the …\nCreates a <code>SourceId</code> from a directory path.\nCreates a <code>SourceId</code> from a Git reference.\nCreates a <code>SourceId</code> from a local registry path.\nCreates a <code>SourceId</code> from a filesystem path.\nCreates a <code>SourceId</code> from a remote registry URL when the …\nCreates a <code>SourceId</code> for a remote registry from the <code>[source]</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a source URL and returns the corresponding ID.\nGets the Git reference if this is a git source, otherwise …\nCheck if the precise data field has bean set to “locked…\nCheck if the precise data field has bean set\nCheck if two sources have the same precise data field\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the remote registry is the standard …\nReturns <code>true</code> if this source from a Git repository.\nCheck if <code>url</code> equals to the overridden crates.io URL.\nReturns <code>true</code> if this source is from a filesystem path.\nReturns <code>true</code> if this source is from a registry (either …\nReturns <code>true</code> if this source is a “remote” registry.\nReturns <code>true</code> if this source is from a sparse registry.\nGets the underlying key.\nThe source kind.\nCreates an implementation of <code>Source</code> corresponding to this …\nReturns the local path if this is a path dependency.\nCreates a <code>SourceId</code> object from the kind and URL.\nFor example, the exact Git revision of the specified …\nCheck if the precise data field stores information for …\nName of the remote registry.\nHashes <code>self</code>.\nGets this source URL.\nThe source URL.\nCreates a new <code>SourceId</code> from this source with the given …\nCreates a new <code>SourceId</code> from this source without a <code>precise</code>.\nCreates a new <code>SourceId</code> from this source with the <code>precise</code> …\nWhen updating a lock file on a version using …\nCreates a new <code>SourceId</code> from this source without a <code>precise</code>.\nInterns the value and returns the wrapped type.\nA feature enabling a dependency with <code>dep:dep_name</code> syntax.\nA feature enabling a feature on a dependency with …\nA feature enabling another feature.\n<code>FeatureValue</code> represents the types of dependencies a …\nIndicates the dependency inferred from the <code>dep</code> syntax that …\nSubset of a <code>Manifest</code>. Contains only the most important …\nChecks features for errors, bailing out a CargoResult:Err …\nReturns the name of the dependency if and only if it was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates the dependency inferred from the <code>dep?</code> syntax …\nIf <code>true</code>, indicates the <code>?</code> syntax is used, which means this …\nIndicates that <code>[workspace]</code> was present and the <code>root</code> field …\nIndicates that <code>[workspace]</code> was present and the members were\nThe core abstraction in Cargo for working with a workspace …\nConfiguration of a workspace in a manifest.\nIntermediate configuration of a workspace root in a …\nAdds a local package registry overlaying a <code>SourceId</code>.\nReturns <code>true</code> if this workspace uses the new CLI features …\nReturns the requested features for the given member. This …\nReturns the current package of this workspace.\nThis path is a path to where the current cargo subcommand …\nWorkspace-level custom metadata\nReturns an iterator over default packages in this workspace\nThe subset of <code>members</code> that are used by the <code>build</code>, <code>check</code>, …\nReturns an iterator over default packages in this workspace\nCreates a “temporary workspace” from one package which …\nAfter the root of a workspace has been located, probes for …\nFinds the root of a workspace for the crate whose manifest …\nFinds the path of the root of the workspace.\nFinds the path of the root of the workspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>GlobalContext</code> this workspace is associated …\nCargo configuration information. See <code>GlobalContext</code>.\nReturns the path of the workspace root based on this …\nIf <code>true</code>, then the resolver will ignore any existing …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nHas an embedded manifest (single-file package)\n<code>true</code> if this is a temporary workspace created for the …\nChecks the path against the <code>excluded</code> list.\nReturns true if the package is a member of the workspace.\nReturns true if the given package_id is a member of the …\nA cache of loaded packages for particular paths which is …\nReturns all the configured local overlays, including the …\nLocal overlay configuration. See <code>crate::sources::overlay</code>.\nReturns the directory where the lockfile is in.\nGet the lowest-common denominator <code>package.rust-version</code> …\nSet of ids of workspace members\nReturns an iterator over all packages in this workspace\nList of members in this workspace with a listing of all …\nReturns a mutable iterator over all packages in this …\nReturns a Vec of <code>(&amp;Package, RequestedFeatures)</code> tuples that …\nNew command-line feature selection behavior with resolver …\nThis is the “old” behavior for command-line feature …\nCreates a new workspace given the target manifest pointed …\nCreates a new Intermediate Workspace Root configuration.\nBuilds a package registry that reflects this workspace …\nA list of packages found in this workspace. Always …\nPreload the provided registry with already loaded packages.\nRequested path of the lockfile (i.e. passed as the cli …\n<code>true</code> if this workspace should enforce optional …\nThe resolver behavior specified with the <code>resolver</code> field.\nIf <code>true</code>, then workspace <code>rust_version</code> would be used in …\nReturns the root path of this workspace.\nReturns the path of the <code>Cargo.toml</code> which is the root of …\nIf this workspace includes more than one crate, this …\nReturns the root Package or <code>VirtualManifest</code>.\nReturns the root <code>[patch]</code> section of this workspace.\nReturns the root <code>[replace]</code> section of this workspace.\nShared target directory for all the packages of this …\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nReturns true if <code>unit</code> should depend on the output of …\nReturns the unstable nightly-only features enabled via …\nValidates a workspace, ensuring that a number of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAll included.\nOpt in all packages.\nSecret Key and subject for Asymmetric tokens.\nFilter to apply to the root package to select which Cargo …\nContains information about how a package should be …\nInclude the library if present\nThe default set of Cargo targets.\nPackages selected by default. Usually means no flag …\nStrongly typed options for the <code>cargo doc</code> command.\nThis is the structure that is serialized and displayed to …\nExclude the library\nIndicates which Cargo targets will be selected to be built.\nOn-disk tracking for which package installed which binary.\nJust a subset of Cargo targets based on names given.\nIndicates whether or not the library target gets included.\nOnly includes a subset of all Cargo targets.\nOpt out of packages passed in.\nFormat of rustdoc <code>--output-format</code>.\nRepresents the selected packages that will be built.\nA sequence of hand-picked packages that will be built. …\nProcess used for fetching a token.\nRegistry settings loaded from config files.\nRepresents either <code>--registry</code> or <code>--index</code> argument, which is …\nThe authentication token.\nInclude the library, fail if not present\nResult for <code>resolve_ws_with_opts</code>.\nRead the <code>paths</code> configuration variable to discover all path …\nConfiguration information for a rustc build\nCore of cargo-add command\nThe entry point for starting the compilation process for …\nImplementation of <code>cargo config</code> subcommand.\nCore of cargo-remove command\nReturns true if the dependency is either git or path, …\nCleans various caches.\nFeature flags requested by the user.\nCompiles!\nOptions to pass through to the compiler\nLike <code>compile</code> but allows specifying a custom <code>Executor</code> that …\nLike <code>compile_with_exec</code> but without warnings from manifest …\nPrepares all required information for the actual …\nMain method for <code>cargo doc</code>.\nWhether to just clean the doc directory\nIf set, doesn’t delete anything.\nExecutes <code>cargo fetch</code>.\nFilter to apply to the root package to select which …\nHigh-level overview of how <code>fix</code> works:\nEntry point for <code>cargo</code> running as a proxy for <code>rustc</code>.\nProvide the lock address when running in proxy mode\nWhether the build process should check the minimum Rust …\nDisplay a list of installed binaries.\nWhether to attempt to open the browser after compiling the …\nSame as <code>rustdoc --output-format</code>\nLoads the manifest, resolves the dependencies of the …\nPackages an entire workspace.\nAbsolute path to the directory for the new package\nPackages to be downloaded.\nExecutes <code>rustc --print &lt;VALUE&gt;</code>.\nPrints lockfile change statuses.\nWhether to clean the release directory\nOperations that interact with the registry web API.\nWhether to clean the directory of a certain build profile\nHigh-level APIs for executing the resolver.\nGets all of the features enabled for a package, plus its …\nDetermines the root directory where installation is done.\nGenerate a toml String of Cargo.lock from a Resolve.\nResolves all dependencies for a package using an optional …\nResolves all dependencies for the workspace using the …\nResolves dependencies for some packages of the workspace, …\nThe features activated per package.\nCompiles and runs benchmarks.\nCompiles and runs tests.\nWhether the <code>--document-private-items</code> flags was specified …\nA list of packages to clean. If empty, everything is …\nA set of packages to build.\nThe specified target will be compiled with all the …\nCrate types to be passed to rustc (single target only)\nExtra arguments to be passed to rustdoc (single target …\nThe narrowed resolve, with the specific features enabled, …\nThe target arch triple to clean, or None for the host arch\nThe target arch triple to fetch dependencies for\nImplementation of <code>cargo tree</code>.\nThe resolve for the entire workspace.\nUpdate manifests with upgraded versions, and write to …\nEnsure the resolve result is written to fisk\nInclude all Cargo targets.\nFlag whether targets can be safely skipped when …\nInformation on what dependencies should be added\nDependency entry operation\nTrack presentation-layer information with the editable …\nAdd dependencies to a manifest\nThe widest set of features compatible with <code>Dependency</code>s …\nThe version of the crate that we pulled <code>available_features</code> …\nSpecify a named base for a path dependency\nSpecify an alternative git branch\nWhen { workspace = true } you cannot define other keys …\nWhen the <code>--optional</code> option is added using <code>cargo add</code>, we …\nCrate name parsing.\nDescribes the crate\nWhether the default feature should be activated\nEditable representation of a <code>[depednencies]</code> entry\nDependencies to add or modify\nAct as if dependencies will be added\nFeature flags to activate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfiguration information for cargo operations\nProvide the existing dependency for the target table\nGit repo for dependency\nWhether the minimum supported Rust version should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOf MSRV-compatible summaries, find the highest version\nWhether dependency is optional\nFile system path for dependency\nLookup available features\nConvert a <code>semver::VersionReq</code> into a rendered …\nWhether dependency is public\nRegistry for looking up dependency version\nDependency key, overriding the package name in <code>crate_spec</code>\nSpecify a specific git rev\nWhich dependency section to add these to\nPackage to add dependencies to\nSpecify a specific git tag\nUser-specified crate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCrate name\nConvert a string to a <code>Crate</code>\nGenerate a dependency entry for this crate specifier\nOptional version requirement\nCleans various caches.\nWhether to just clean the doc directory\nIf set, doesn’t delete anything.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to clean the release directory\nDeletes all of the given paths, showing a progress bar as …\nWhether to clean the directory of a certain build profile\nGlob remove artifacts for the provided <code>package</code>\nRemoves files matching a glob and any of the provided …\nA list of packages to clean. If empty, everything is …\nThe target arch triple to clean, or None for the host arch\nContains information about how a package should be …\nConfiguration information for a rustc build\nFeature flags requested by the user.\nCompiles!\nFilters and their rules to select which Cargo targets will …\nLike <code>compile</code> but allows specifying a custom <code>Executor</code> that …\nLike <code>compile_with_exec</code> but without warnings from manifest …\nPrepares all required information for the actual …\nFilter to apply to the root package to select which …\nReturns the argument unchanged.\nWhether the build process should check the minimum Rust …\nCalls <code>U::from(self)</code>.\nOverride crate types for given units.\nSee <code>Packages</code>.\nExecutes <code>rustc --print &lt;VALUE&gt;</code>.\nThis is used to rebuild the unit graph, sharing host …\nRemoves duplicate <code>CompileMode::Doc</code> units that would cause …\nGets all of the features enabled for a package, plus its …\nWhether the <code>--document-private-items</code> flags was specified …\nA set of packages to build.\nThe specified target will be compiled with all the …\nCrate types to be passed to rustc (single target only)\nExtra arguments to be passed to rustdoc (single target …\nRecursive function for rebuilding the graph.\nAll included.\nFilter to apply to the root package to select which Cargo …\nInclude the library if present\nThe default set of Cargo targets.\nExclude the library\nIndicates which Cargo targets will be selected to be built.\nJust a subset of Cargo targets based on names given.\nIndicates whether or not the library target gets included.\nOnly includes a subset of all Cargo targets.\nInclude the library, fail if not present\nConstructs a filter that includes all test targets.\nChecks if any specified target name contains glob patterns.\nChecks if any specified target name contains glob patterns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a filter from raw command line arguments.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a filter is specific.\nConstructs a filter that includes lib target only.\nChecks if a target definition matches this filter rule.\nIndicates if Cargo needs to build any dev dependency.\nConstructs a filter from underlying primitives.\nConstructs a filter that includes all targets.\nCreates a filter with no rule.\nConstructs a filter that includes the given binary. No …\nSelects targets for “cargo run”. for logic to select …\nInclude all Cargo targets.\nFlag whether targets can be safely skipped when …\nOpt in all packages.\nPackages selected by default. Usually means no flag …\nOpt out of packages passed in.\nRepresents the selected packages that will be built.\nA sequence of hand-picked packages that will be built. …\nBuild <code>glob::Pattern</code> with informative context.\nEmits “package not found” error.\nEmits “glob pattern not found” error.\nReturns the argument unchanged.\nCreates a <code>Packages</code> from flags which are generally …\nGets a list of selected <code>Package</code>s.\nCalls <code>U::from(self)</code>.\nChecks whether a package matches any of a list of glob …\nReturns whether or not the user needs to pass a <code>-p</code> flag to …\nGiven a list opt-in or opt-out package selection strings, …\nConverts selected packages to <code>PackageIdSpec</code>s.\nA proposed target.\nThe context needed for generating root units, which are …\nProposes targets from which to scrape examples for …\nCreate a list of proposed targets given the context in …\nGiven a list of all targets for a package, filters out …\nFilters the set of all possible targets based on the …\nFinds the targets for a specifically named target.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates all the base units for the packages the user has …\nGenerates units specifically for doc-scraping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of proposed targets based on command-line …\nHelper for creating a list of <code>Unit</code> structures\nConverts proposals to units based on each target’s …\nIndicates whether or not all required features <em>must</em> be …\nChecks if the unit list is empty and the user has passed …\nWarns if a target’s required-features references a …\nOptions for <code>cargo config get</code>.\nFor clap.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks for environment variables that might be used.\nStrongly typed options for the <code>cargo doc</code> command.\nFormat of rustdoc <code>--output-format</code>.\nOptions to pass through to the compiler\nMain method for <code>cargo doc</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to attempt to open the browser after compiling the …\nSame as <code>rustdoc --output-format</code>\nExecutes <code>cargo fetch</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe target arch triple to fetch dependencies for\nReturns the argument unchanged.\nReturns the argument unchanged.\nDisplay a list of installed binaries.\nChecks if vers can only be satisfied by exactly one …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves executables that are no longer part of a package …\n<code>IgnoreList</code>\nSee also <code>util::toml::embedded::sanitize_name</code>\nChecks if the path contains any invalid PATH env …\n<code>format_existing</code> is used to format the <code>IgnoreList</code> when the …\nReturn the correctly formatted content of the ignore file …\nFossil-formatted entries.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nmercurial formatted entries\ngit like formatted entries\nInitializes the correct VCS system based on the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconstructor to build a new ignore file\nAbsolute path to the directory for the new package\nAdd a new entry to the ignore list. Requires three …\nAdds the new package member to the [workspace.members] …\nWrites the ignore file to the given directory. If the …\nThis is the structure that is serialized and displayed to …\nArtifact’s crate type, e.g. staticlib, cdylib, bin…\nExecutable name for an artifact binary dependency.\nBuilds the resolve graph as it will be displayed to the …\nEquivalent to <code>{ target = &quot;…&quot; }</code> in an artifact dependency …\nWhat the manifest calls the crate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the manifest, resolves the dependencies of the …\nGenerates a file.\nJust the part of the dependency graph that’s between the …\nGenerates <code>Cargo.lock</code> in some cases (like if there is a …\nGenerates <code>Cargo.toml</code> by rewriting the original.\nAbsolute path to the file on disk to add to the archive.\nManages a temporary local registry that we use to overlay …\nAdds a <code>.cargo_vcs_info.json</code> file if in a (clean) git repo.\nBuilds list of files to archive.\nConstruct <code>Cargo.lock</code> for the package to be published.\nChecks if the package source is in a <em>git</em> DVCS repository. …\nGenerate warnings when packaging Cargo.lock, and the …\nThe contents to add to the archive.\nIndicate whether or not the Git worktree is dirty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetermine which registry the packages are for.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild just the part of the dependency graph that’s …\nPackages an entire workspace.\nPackages an entire workspace.\nPath to the package within repo (empty string if root). / …\nPerforms pre-archiving checks and builds a list of files …\nThe relative path in the archive (not including the …\nString variant of <code>rel_path</code>, for convenience.\nCompresses and packages a list of <code>ArchiveFile</code>s and writes …\nRemove a dependency from a Cargo.toml manifest file.\nDependencies to remove\nWhether or not to actually write the manifest\nReturns the argument unchanged.\nConfiguration information for Cargo operations\nCalls <code>U::from(self)</code>.\nRemove dependencies from a manifest\nWhich dependency section to remove these from\nPackage to remove dependencies from\nThe kind of test.\nA unit that failed to run.\nReturns the CLI args needed to target this unit.\nCreates a <code>ProcessBuilder</code> for executing a single test.\nDisplays human-readable descriptions of the test …\nReturns the error code to use when <em>not</em> using <code>--no-fail-fast</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>CliError</code> when using <code>--no-fail-fast</code> and there …\nDisplays an error on the console about a test failure.\nCompiles and runs benchmarks.\nRuns doc tests.\nCompiles and runs tests.\nRuns the unit and integration tests of a package.\nAll resolved versions of a package name within a <code>SourceId</code>\nFor querying <code>PackageRegistry</code> for alternative versions to …\nGuess if a package upgraded/downgraded\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrints lockfile change statuses.\nUpdate manifests with upgraded versions, and write to …\nTracking information for the set of installed packages.\nTracking information for the set of installed packages.\nTracking information for the installation of a single …\nOn-disk tracking for which package installed which binary.\nIterator of all installed binaries. Items are …\nSet of binary names installed.\nChecks if the given package should be built, and checks if …\nHelper to get the executable names from a filter.\nHelper to convert features to a <code>BTreeSet</code>.\nSet of features explicitly enabled.\nCheck if any executables are already installed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet of binaries installed by a particular package. Returns …\nMap of every installed package.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if this installation is “up to date”, or if …\nCreate an <code>InstallTracker</code> from information on disk.\nMark that a package was installed.\nGet one element from the iterator. Returns None if none …\nForwards compatibility. Unknown keys from future versions …\nForwards compatibility.\nDetermines the <code>PathSource</code> from a <code>SourceId</code>.\nEither “debug” or “release”.\nRemove a package from the tracker.\nRemove a bin after it successfully had been removed in …\nDetermines the root directory where installation is done.\nOutput of <code>rustc -V</code>. None if unknown (when loading from v1).\nSave tracking information to disk.\nGets a Package based on command-line requirements.\nIncorporate any changes from v1 into self. This handles …\nThe installation target. Either the host or the value …\nMap of installed package id to the set of binary names for …\nVersion requested via <code>--version</code>. None if <code>--version</code> not …\n<strong>Internal only.</strong> For passing <code>FixOptions::broken_code</code> through …\n<strong>Internal only.</strong> For passing <code>FixOptions::edition</code> through to …\n<strong>Internal only.</strong> Indicates Cargo is in fix-proxy-mode if …\nVarious command-line options and settings used when <code>cargo</code> …\n<strong>Internal only.</strong> For passing <code>FixOptions::idioms</code> through to …\n<strong>Internal only.</strong> The sysroot path.\nValidates the edition, and sends a message indicating what …\nThe current edition.\nThis is the <code>.rs</code> file that is being fixed.\nMap of file path to some information about modifications …\nThe output from rustc from the first time it was called.\nEntry point for <code>cargo</code> running as a proxy for <code>rustc</code>.\nProvide the lock address when running in proxy mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>true</code> if <code>--edition-idioms</code> is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe output from rustc from the last time it was called.\nOther command-line arguments not reflected by other fields …\nIf <code>--edition</code> is used to migrate to the next edition, this …\nPath to the <code>rustc</code> executable.\nExecutes <code>rustc</code> to apply one round of suggestions to the …\nAttempts to apply fixes to a single crate.\nPath to host sysroot.\nGenerate a toml String of Cargo.lock from a Resolve.\nEnsure the resolve result is written to fisk\nSecret Key and subject for Asymmetric tokens.\nProcess used for fetching a token.\nRegistry settings loaded from config files.\nRepresents either <code>--registry</code> or <code>--index</code> argument, which is …\nThe authentication token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>SourceId</code> for an index or registry setting.\nVery similar to <code>get_source_id</code>, but is used when the …\nIf this set of packages has an unambiguous publish …\nImplementation of <code>cargo info</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the credential is <code>AsymmetricKey</code>.\nReturns <code>true</code> if the credential is <code>None</code>.\nReturns <code>true</code> if the credential is <code>Token</code>.\nInteracts with the registry login API.\nInteracts with the registry logout.\nUse when looking up the auth token, or writing out …\nInteracts with the registry owners API.\nInteracts with the registry publish API.\nReturns the <code>Registry</code> and <code>Source</code> based on command-line and …\nUse when interacting with the source (querying / …\nInteracts with the registry search API.\nInteracts with the registry yank and unyank API.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nState for tracking dependencies during upload.\nThe weight of a package is the number of unpublished …\nGraph of publishable packages where the edges are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPackages confirmed to be available in the registry, …\nGiven a package dependency graph, creates a <code>PublishPlan</code> …\nFormat a collection of packages as a list\nReturns the set of packages that are ready for publishing …\nPoll the registry for any packages that are ready for use.\nFilter for keep using Package ID from previous lockfile.\nResult for <code>resolve_ws_with_opts</code>.\nRead the <code>paths</code> configuration variable to discover all path …")