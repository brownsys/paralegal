searchState.loadedDescShard("run_make_support", 0, "<code>run-make-support</code> is a support library for run-make tests. …\n<code>diff</code> is implemented in terms of the similar library.\nHelpers for checking target information.\nA collection of helpers to construct artifact names, such …\nCollection of assertions and assertion-related helpers.\nHelpers for building names of output artifacts that are …\nConvenience helpers for running binaries and other …\nPath-related helpers.\n<code>diff</code> is implemented in terms of the similar library.\nHelpers for building names of output artifacts that are …\nHelpers for building names of output artifacts that are …\nPanic-on-fail <code>std::env::var</code> and <code>std::env::var_os</code> wrappers.\nPanic-on-fail <code>std::env::var</code> and <code>std::env::var_os</code> wrappers.\nThis module contains external tool dependencies that we …\nPath-related helpers.\nPath-related helpers.\nPath-related helpers.\nPath-related helpers.\nPath-related helpers.\nHelpers for checking target information.\nHelpers for checking target information.\nHelpers for checking target information.\nHelpers for checking target information.\nHelpers for checking target information.\nHelpers for building names of output artifacts that are …\nPath-related helpers.\nPath-related helpers.\nCollection of path-related helpers.\n<code>std::fs</code> wrappers and assorted filesystem-related helpers. …\nConvenience helpers for running binaries and other …\nConvenience helpers for running binaries and other …\nHelpers for scoped test execution where certain properties …\nConvenience helpers for running binaries and other …\nHelpers for building names of output artifacts that are …\nCollection of helpers that try to maintain certain …\nPanic-on-fail <code>std::env::var</code> and <code>std::env::var_os</code> wrappers.\nPath-related helpers.\nPath-related helpers.\nHelpers for building names of output artifacts that are …\nHelpers for checking target information.\nHelpers for scoped test execution where certain properties …\nHelpers for checking target information.\nConstruct the binary (executable) name based on the target.\nConstruct the dynamic library extension based on the …\nConstruct the dynamic library name based on the target.\nConstruct the name of the import library for the dynamic …\nConstruct the name of a rust library (rlib).\nConstruct the static library name based on the target.\nAssert that <code>haystack</code> contains <code>needle</code>.\nAssert that <code>haystack</code> contains the regex pattern <code>needle</code>.\nAssert that <code>haystack</code> contains <code>needle</code> a <code>count</code> number of …\nAssert that all files in <code>dir1</code> exist and have the same …\nAssert that <code>actual</code> is equal to <code>expected</code>.\nAssert that <code>haystack</code> does not contain <code>needle</code>.\nAssert that <code>haystack</code> does not contain the regex pattern …\nThis is a custom command wrapper that simplifies working …\nRepresents the result of an executed process. The various …\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nChecks that <code>stderr</code> contains <code>expected</code>.\nChecks that <code>stderr</code> contains the regex pattern <code>expected</code>.\nChecks that trimmed <code>stderr</code> matches trimmed <code>expected</code>.\nChecks that <code>stderr</code> does not contain <code>unexpected</code>.\nChecks that <code>stderr</code> does not contain the regex pattern …\nChecks that <code>stdout</code> contains <code>expected</code>.\nChecks that <code>stdout</code> contains the regex pattern <code>expected</code>.\nChecks that trimmed <code>stdout</code> matches trimmed <code>expected</code>.\nChecks that <code>stdout</code> does not contain <code>unexpected</code>.\nChecks that <code>stdout</code> does not contain the regex pattern …\nSet the path where the command will be run.\nSpecify an environment variable.\nRemove an environmental variable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInspect what the underlying <code>std::process::Command</code> is up to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nSpecify a stdin input buffer. This is a convenience helper,\nConfiguration for the child process’s standard output …\nSpecify the actual output for the diff from a file.\nSpecify the actual output for the diff from a given text …\nSpecify the expected output for the diff from a file.\nSpecify the expected output for the diff from a given text …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf we have an expected file to write into, and …\nConstruct a bare <code>diff</code> invocation.\nSpecify a regex that should replace text in the “actual…\nCheck if <code>NO_DEBUG_ASSERTIONS</code> is set (usually this may be …\nA wrapper around <code>std::env::set_current_dir</code> which includes …\nBuilds a dynamic lib. The filename is computed in a …\nBuilds a static lib (<code>.lib</code> on Windows MSVC and <code>.a</code> for the …\nBuilds a static lib (<code>.lib</code> on Windows MSVC and <code>.a</code> for the …\nBuilds an optimized static lib (<code>.lib</code> on Windows MSVC and <code>.a</code>…\nA platform-specific C compiler invocation builder. The …\nA specific <code>gcc</code>.\nConstruct a new platform-specific C compiler invocation.\nConstruct a new platform-specific CXX compiler invocation. …\n<code>EXTRACFLAGS</code>\n<code>EXTRACXXFLAGS</code>\nConstruct a gcc invocation.\nA platform-specific C compiler invocation builder. The …\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nConstruct a new platform-specific C compiler invocation.\nSet the path where the command will be run.\nConstruct a new platform-specific CXX compiler invocation. …\nSpecify an environment variable.\nRemove an environmental variable.\nReturns the argument unchanged.\nSpecify path of the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nAdds directories to the list that the linker searches for …\nConstruct a new platform-specific C compiler invocation.\nConstruct a new platform-specific CXX compiler invocation. …\nOptimize the output. Equivalent to <code>-O3</code> for GNU-compatible …\nSpecify <code>-o</code> or <code>-Fe</code>/<code>-Fo</code> depending on platform/compiler.\nSpecify path of the output binary.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard output …\n<code>EXTRACFLAGS</code>\n<code>EXTRACXXFLAGS</code>\nA specific <code>gcc</code>.\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nSet the path where the command will be run.\nSpecify an environment variable.\nRemove an environmental variable.\nReturns the argument unchanged.\nConstruct a gcc invocation.\nSpecify path of the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nAdds directories to the list that the linker searches for …\nConstruct a <code>gcc</code> invocation. This assumes that <em>a</em> suitable …\nOptimize the output at <code>-O3</code>.\nSpecify <code>-o</code>.\nSpecify path of the output binary.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard output …\nReturns a command that can be used to invoke cargo. The …\nA <code>clang</code> invocation builder.\nSpecify architecture.\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nConstruct a new <code>clang</code> invocation. <code>clang</code> is not always …\nSet the path where the command will be run.\nSpecify an environment variable.\nRemove an environmental variable.\nReturns the argument unchanged.\nProvide an input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nSpecify LTO settings.\nConstruct a new <code>clang</code> invocation. <code>clang</code> is not always …\nPass <code>-nostdlib</code> to disable linking the C standard library.\nSpecify the name of the executable. The executable will be …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard output …\nSpecify which target triple clang should target.\nSpecify which ld to use.\n<code>htmldocck</code> is a python script which is used for rustdoc …\nA <code>llvm-ar</code> invocation builder.\nA <code>llvm-bcanalyzer</code> invocation builder.\nA <code>llvm-dis</code> invocation builder.\nA <code>llvm-dwarfdump</code> invocation builder.\nA <code>llvm-filecheck</code> invocation builder.\nA <code>llvm-nm</code> invocation builder.\nA <code>llvm-objcopy</code> invocation builder.\nA <code>llvm-objdump</code> invocation builder.\nA <code>llvm-pdbutil</code> invocation builder.\nA <code>llvm-profdata</code> invocation builder.\nA <code>llvm-readobj</code> invocation builder.\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nSet the path where the command will be run.\nDisassemble all executable sections found in the input …\nDump the contents of <code>section</code> into the file at <code>path</code>.\nPass <code>--dynamic-table</code> to display the dynamic symbol table.\nSpecify the format of the ELF information.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nSpecify an environment variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nRemove an environmental variable.\nExtract archive members back to files.\nPass <code>--file-header</code> to display file headers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvide an input file.\nProvide an input file.\nProvide an input file.\nProvide an input file.\nProvide an input file.\nProvide an input file.\nProvide an input file.\nProvide an input file.\n<code>--input-file</code> option.\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>llvm-ar</code> invocation. This assumes that …\nConstruct a new <code>llvm-bcanalyzer</code> invocation. This assumes …\nGenerate the path to the bin directory of LLVM.\nConstruct a new <code>llvm-dis</code> invocation. This assumes that …\nConstruct a new <code>llvm-dwarfdump</code> invocation. This assumes …\nConstruct a new <code>llvm-filecheck</code> invocation. This assumes …\nConstruct a new <code>llvm-nm</code> invocation. This assumes that …\nConstruct a new <code>llvm-objcopy</code> invocation. This assumes that …\nConstruct a new <code>llvm-objdump</code> invocation. This assumes that …\nConstruct a new <code>llvm-pdbutil</code> invocation. This assumes that …\nConstruct a new <code>llvm-profdata</code> invocation. This assumes …\nConstruct a new <code>llvm-readobj</code> invocation with the <code>GNU</code> …\nTake several profile data files generated by PGO …\nConstruct a new <code>llvm-readobj</code> invocation with the <code>GNU</code> …\nConstruct a new <code>llvm-profdata</code> invocation. This assumes …\nConstruct a new <code>llvm-filecheck</code> invocation. This assumes …\nConstruct a new <code>llvm-objdump</code> invocation. This assumes that …\nConstruct a new <code>llvm-ar</code> invocation. This assumes that …\nConstruct a new <code>llvm-nm</code> invocation. This assumes that …\nConstruct a new <code>llvm-bcanalyzer</code> invocation. This assumes …\nConstruct a new <code>llvm-dwarfdump</code> invocation. This assumes …\nConstruct a new <code>llvm-pdbutil</code> invocation. This assumes that …\nConstruct a new <code>llvm-dis</code> invocation. This assumes that …\nConstruct a new <code>llvm-objcopy</code> invocation. This assumes that …\nAutomatically pass the commonly used arguments <code>rcus</code>, used …\nLike <code>obj_to_ar</code> except creating a thin archive.\nSpecify the output file path.\nProvide an output, then an input file. Bundled in one …\nProvide the patterns that need to be matched.\nPass <code>--program-headers</code> to display program headers.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nRun the command but do not check its exit status. Only use …\nSpecify the section to display.\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nConfiguration for the child process’s standard input …\nProvide a buffer representing standard input containing …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nConfiguration for the child process’s standard output …\nPass <code>--symbols</code> to display the symbol table, including both …\nPrint the table of contents.\nObtain path of python as provided by the <code>PYTHON</code> …\nA <code>rustc</code> invocation builder.\nGeneric command argument provider. Prefer specific helper …\nGeneric command arguments provider. Prefer specific helper …\nConstruct a new <code>rustc</code> aux-build invocation.\nConstruct a bare <code>rustc</code> invocation with no flags set.\nConstruct a plain <code>rustc</code> invocation with no flags set. Note …\nConfigure the compilation environment.\nSpecify number of codegen units\nSpecify the crate name.\nSpecify the crate type.\nSet the path where the command will be run.\nSpecify the edition year.\nSpecify type(s) of output files to generate.\nSpecify an environment variable.\nRemove an environmental variable.\nSpecify error format to use\nSpecify where an external library is located.\nAdd a suffix in each output filename.\n<code>EXTRARSCXXFLAGS</code>\nReturns the argument unchanged.\nSpecify directory path used for incremental cache\nSpecify path to the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nSpecify json messages printed by the compiler\nAdd a directory to the library search path. Equivalent to …\nAdd an extra argument to the linker invocation, via …\nAdd multiple extra arguments to the linker invocation, via …\nSpecify the linker\nSpecify the linker flavor\nThis flag defers LTO optimizations to the linker.\nIncorporate a hashed string to mangled symbols.\nConstruct a new <code>rustc</code> invocation. This will automatically …\nConstruct a new <code>rustc</code> invocation with <code>aux_build</code> preset …\nSpecify default optimization level <code>-O</code> (alias for …\nSpecify a specific optimization level.\nSpecify path to the output directory. Equivalent to `–…\nSpecify path to the output file. Equivalent to `-o`` in …\nSpecify what happens when the code panics.\nSpecify the print request.\nSpecify directory path used for profile generation\nSpecify directory path used for profile usage\nRemap source path prefixes in all output.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConstruct a new <code>rustc</code> invocation. This will automatically …\nAdd a directory to the library search path with a …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nSpecify a stdin input buffer.\nConfiguration for the child process’s standard output …\nOverride the system root. Equivalent to <code>--sysroot</code> in rustc.\nSpecify the target triple, or a path to a custom target …\nNormalize the line number in the stderr output\nGeneric command argument provider. Prefer specific helper …\nGiven a <code>path</code>, pass <code>@{path}</code> to <code>rustdoc</code> as an arg file.\nGeneric command arguments provider. Prefer specific helper …\nConstruct a bare <code>rustdoc</code> invocation.\nConstruct a plain <code>rustdoc</code> invocation with no flags set.\nSpecify the crate name.\nSpecify the crate type.\nSet the path where the command will be run.\nSpecify the edition year.\nSpecify an environment variable.\nRemove an environmental variable.\nSpecify where an external library is located.\nReturns the argument unchanged.\nSpecify path to the input file.\nInspect what the underlying <code>Command</code> is up to the current …\nCalls <code>U::from(self)</code>.\nAdd a directory to the library search path. It corresponds …\nConstruct a <code>rustdoc</code> invocation with <code>-L $(TARGET_RPATH_DIR)</code> …\nSpecify output directory.\nSpecify the output format.\nRun the constructed command and assert that it is …\nRun the constructed command and assert that it does not …\nRun the command but do not check its exit status. Only use …\nConstruct a new <code>rustdoc</code> invocation with …\nConfiguration for the child process’s standard error …\nConfiguration for the child process’s standard input …\nSpecify a stdin input buffer.\nConfiguration for the child process’s standard output …\nSpecify the target triple, or a path to a custom target …\nA wrapper around <code>std::fs::copy</code> which includes the file …\nCopy a directory into another.\nA wrapper around <code>std::fs::create_dir</code> which includes the …\nA wrapper around <code>std::fs::create_dir_all</code> which includes …\nA wrapper around <code>std::fs::File::create</code> which includes the …\nA wrapper around <code>std::fs::metadata</code> which includes the file …\nA wrapper around <code>std::fs::read</code> which includes the file …\nA wrapper around <code>std::fs::read_dir</code> which includes the file …\nHelper for reading entries in a given directory.\nA wrapper around <code>std::fs::read_to_string</code> which includes …\nA wrapper around <code>std::fs::remove_dir</code> which includes the …\nA wrapper around <code>std::fs::remove_dir_all</code> which includes …\nA wrapper around <code>std::fs::remove_file</code> which includes the …\nA wrapper around <code>std::fs::rename</code> which includes the file …\nA wrapper around <code>std::fs::set_permissions</code> which includes …\nA function which prints all file names in the directory <code>dir</code>…\nCreate a new symbolic link to a directory.\nCreate a new symbolic link to a file.\nA wrapper around <code>std::fs::symlink_metadata</code> which includes …\nA wrapper around <code>std::fs::write</code> which includes the file …\nImplement common helpers for command wrappers. This …\nReturn the current working directory.\nReturns true if the filename at <code>path</code> contains <code>needle</code>.\nReturns true if the filename at <code>path</code> is not in <code>expected</code>.\nReturns true if the filename at <code>path</code> has the extension …\nReturns true if the filename at <code>path</code> starts with <code>prefix</code>.\nReturns true if the filename at <code>path</code> ends with <code>suffix</code>.\nReturns true if the filename at <code>path</code> does not contain …\nConstruct a <code>PathBuf</code> relative to the current working …\nHelper for reading entries in a given directory and its …\nBrowse the directory <code>path</code> non-recursively and return all …\nPath to the root <code>rust-lang/rust</code> source checkout.\nA wrapper around <code>std::fs::copy</code> which includes the file …\nCopy a directory into another.\nA wrapper around <code>std::fs::create_dir</code> which includes the …\nA wrapper around <code>std::fs::create_dir_all</code> which includes …\nA wrapper around <code>std::fs::File::create</code> which includes the …\nA wrapper around <code>std::fs::metadata</code> which includes the file …\nA wrapper around <code>std::fs::read</code> which includes the file …\nA wrapper around <code>std::fs::read_dir</code> which includes the file …\nHelper for reading entries in a given directory.\nA wrapper around <code>std::fs::read_to_string</code> which includes …\nA wrapper around <code>std::fs::remove_dir</code> which includes the …\nA wrapper around <code>std::fs::remove_dir_all</code> which includes …\nA wrapper around <code>std::fs::remove_file</code> which includes the …\nA wrapper around <code>std::fs::rename</code> which includes the file …\nA wrapper around <code>std::fs::set_permissions</code> which includes …\nA function which prints all file names in the directory <code>dir</code>…\nCreate a new symbolic link to a directory.\nCreate a new symbolic link to a file.\nA wrapper around <code>std::fs::symlink_metadata</code> which includes …\nA wrapper around <code>std::fs::write</code> which includes the file …\nCreate a new custom <code>Command</code>. This should be preferred to …\nRun a built binary and make sure it succeeds.\nRun a built binary and make sure it fails.\nRun a built binary with one or more argument(s) and make …\nThis function is designed for running commands in a …\nEnsure that the path P is read-only while the test runs, …\nGathers all files in the current working directory that …\nRead the contents of a file that cannot simply be read by …\nRead the contents of a file that cannot simply be read by …\nCheck an object file’s symbols for substrings.\nIterate through the symbols in an object file.\nGet the target OS on Apple operating systems.\nCheck if target uses AIX.\nCheck if target uses macOS.\nCheck if target uses msvc.\nCheck if target is windows-like.\nCheck if <code>component</code> is within <code>LLVM_COMPONENTS</code>\n<code>TARGET</code>\nRun <code>uname</code>. This assumes that <code>uname</code> is available on the …\nIf a given <code>Command</code> failed (as indicated by its …\nSet the runtime library path as needed for running the …")