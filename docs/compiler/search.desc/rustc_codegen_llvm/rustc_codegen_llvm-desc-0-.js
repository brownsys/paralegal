searchState.loadedDescShard("rustc_codegen_llvm", 0, "The Rust compiler.\nRaw content of Fluent resource for this crate, generated …\nSet and unset common attributes on LLVM values.\nCodegen the MIR to the LLVM IR.\nHandles codegen of callees as well as other call-related …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCode that is useful in various codegen modules.\nDebug Info Module\nDeclare various LLVM values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to generate cfg variables and apply features. Must …\nError produced by attempting to adjust a <code>FnAbi</code>, for a “…\nInformation about how to pass an argument to, or return a …\nA compact representation of LLVM attributes (at least …\nSometimes an ABI requires small integers to be extended to …\nPass the argument after casting it. See the <code>CastTarget</code> …\nDescribes the type used for <code>PassMode::Cast</code>.\nPass the argument directly.\nDefault ABI chosen for <code>extern fn</code> declarations without an …\nMetadata describing how the arguments to a native function …\nIgnore the argument.\nPass the argument indirectly via a hidden pointer.\nPass a pair’s elements directly in two arguments.\nFor things unlikely to be called, where reducing register …\n<em>Not</em> a stable ABI, just directly use the Rust types to …\nAn argument passed entirely registers with the same kind …\nTarget architecture doesn’t support “foreign” (i.e. …\nThe first half of a wide pointer.\nThe second half of a wide pointer.\nGet a flags value with all known bits set.\nApply attributes to a function call.\nApply attributes to a function declaration/definition.\nThe type, layout, and information about how each argument …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMarks this function as variadic (accepting a variable …\nIndicates if an unwind may happen across a call to this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPass using one or more consecutive values of the given …\nWhether all set bits in a source flags value are also set …\nThe calling convention of this function.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nChecks if these two <code>PassMode</code> are equal enough to be …\nChecks if these two <code>ArgAttributes</code> are equal enough to be …\nChecks if these two <code>CastTarget</code> are equal enough to be …\nChecks if these two <code>ArgAbi</code> are equal enough to be …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe count of non-variadic arguments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nIndicate that the argument is consecutive, in the sense …\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nPass this argument directly instead. Should NOT be used! …\nPass this argument indirectly, by passing a (thin or wide) …\nSame as <code>make_indirect</code>, but for arguments that are ignored. …\nGets the LLVM type for a place of the original Rust type of\nPass using one or more values of the given type, without …\nThis defines the “default ABI” for that type, that is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPass this argument indirectly, by placing it at a fixed …\nThe minimum size of the pointee, guaranteed to be valid …\nThe intersection of a source flags value with the …\nThe layout, type, and the way a value is returned from …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nStores a direct/indirect value described by this ArgAbi …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe total size of the argument, which can be:\nWhen you only access the range containing valid data, you …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nIf the register is an AArch64 integer register then return …\nIf the register is an AArch64 vector register then return …\nType to use for outputs that are discarded. It doesn’t …\nHelper function to get the LLVM type for a Scalar. …\nFix up an input value to work around LLVM bugs.\nFix up an output value to work around LLVM bugs.\nOutput type to use for llvm_fixup_output.\nConverts a modifier into LLVM’s equivalent modifier.\nConverts a register class to an LLVM constraint code.\nIf the register is an xmm/ymm/zmm register then return its …\nGet the default optimizations attrs for a function.\nGet LLVM attribute for the provided inline heuristic.\nTell LLVM what instrument function to insert.\nHelper for <code>FnAbi::apply_attrs_llfn</code>: Composite function …\nGet the <code>NonLazyBind</code> LLVM attribute, if the codegen options …\nGet LLVM sanitize attributes.\nTell LLVM to emit or not emit the information necessary to …\nA helper class for dealing with static archives\nHelper for adding many files to an archive.\nAdds an arbitrary file to this archive\nCombine the provided files, rlibs, and native libraries …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe keep track of the computed LTO cache keys from the …\nMaps LLVM module identifiers to their corresponding LLVM …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms fat LTO by merging all modules into a single one …\nPerforms thin LTO by performing necessary global analysis …\nPrepare “thin” LTO to get run on these modules.\nResponsible for safely creating and disposing …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCode generation.\nIn what context is a dignostic handler being attached to a …\nLTO/ThinLTO postlink optimization stage.\nPrelink optimization stage.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEmbed the bitcode of an LLVM module for LTO in the LLVM …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEmpty string, to be used where LLVM expects an instruction …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nEmits a call to <code>llvm.instrprof.increment</code>. Used by coverage …\nCalls <code>U::from(self)</code>.\nEmits a call to <code>llvm.instrprof.mcdc.parameters</code>.\nCodegens a reference to a fn/method item, monomorphizing …\nExtension trait for explicit casts to <code>*const c_char</code>.\nA structure representing an active landing pad for the …\nEquivalent to <code>self.as_ptr().cast()</code>, but only casts to …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the LLVM type of a <code>Value</code>.\nThere is one <code>CodegenCx</code> per codegen unit. Each one has its …\nAdd a global value to a list to be stored in the …\nAdd a global value to a list to be stored in the <code>llvm.used</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nStatics that will be placed in the llvm.compiler.used …\nCache of emitted const globals (value -&gt; global)\nCache of constant strings,\nExtra state that is only available when coverage …\nExtra per-CGU codegen state needed when coverage …\nReturns the section name to use when embedding …\nDeclare a C ABI function.\nDeclare an entry Function\nDeclare a Rust function.\nDeclare a global value.\nDeclare a global with an intention to define it.\nDeclare a private global\nReturns the argument unchanged.\nGenerates a new symbol name with the given prefix. This …\nGets declared value by name.\nGets defined or externally defined (AvailableExternally …\nFor LLVM codegen, returns a function-specific <code>Value</code> for a …\nCache instances of monomorphic and polymorphic items\nCalls <code>U::from(self)</code>.\nA counter that is used for generating local symbol names\nLooks up debug source information about a <code>BytePos</code>.\n<code>codegen_static</code> will sometimes create a second global …\nMapping of scalar types to llvm types.\nA wrapper for <code>llvm::LLVMSetMetadata</code>, but it takes <code>Metadata</code> …\nWhether a definition or declaration can be assumed to be …\nList of globals for static variables which need to be …\nx Creates an integer type with the given number of bits, …\nMapping of non-scalar types to llvm types.\nReturn an LLVM type that has at most the required …\nStatics that will be placed in the llvm.used variable See …\nCache generated vtables\nExtra per-CGU context/state needed for coverage …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCoverage data for each instrumented function identified by …\nCalls <code>U::from(self)</code>.\nSafe wrappers for coverage-specific FFI functions.\nLLVM use a temp value to record evaluated mcdc test vector …\nMust match the layout of <code>LLVMRustCoverageBranchRegion</code>.\nMust match the layout of <code>LLVMRustCoverageCodeRegion</code>.\nA reference to an instance of an abstract “counter” …\nCorresponds to struct <code>llvm::coverage::CounterExpression</code>.\nMust match the layout of <code>LLVMRustCounterKind</code>.\nA span of source code coordinates to be embedded in …\nCorresponds to enum …\nMust match the layout of <code>LLVMRustCoverageMCDCBranchRegion</code>.\nMust match the layout of <code>LLVMRustCoverageMCDCDecisionRegion</code>…\nHolds tables of the various region types in one struct.\nA <code>Counter</code> of kind <code>Zero</code>. For this counter kind, the <code>id</code> is …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConstructs a new <code>Counter</code> of kind <code>CounterValueReference</code>.\n1-based ending column of the source code span. High bit …\n1-based ending line of the source code span.\nConstructs a new <code>Counter</code> of kind <code>Expression</code>.\nLocal index into the function’s local-to-global file ID …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if none of this structure’s tables contain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1-based starting column of the source code span.\n1-based starting line of the source code span.\nMust match the layout of <code>LLVMRustMCDCBranchParameters</code>.\nMust match the layout of <code>LLVMRustMCDCDecisionParameters</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHashes some bytes into a 64-bit hash, via LLVM’s …\nReturns LLVM’s <code>coverage::CovMapVersion::CurrentVersion</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConvert this function’s coverage expression data into a …\nConverts this function’s coverage mappings into an …\nReturns the argument unchanged.\nIf <code>None</code>, the corresponding function is unused.\nCalls <code>U::from(self)</code>.\nReturns true for a used (called) function, and false for …\nReturn the source hash, generated from the HIR node …\nAn index into the CGU’s overall list of file paths. The …\nMaps “global” (per-CGU) file ID numbers to their …\nAn index into a function’s list of global file IDs. That …\nMaximum value the index can take.\nMaximum value the index can take.\nMaximum value the index can take, as a <code>u32</code>.\nMaximum value the index can take, as a <code>u32</code>.\nHolds a mapping from “local” (per-function) file IDs …\nZero value of the index.\nZero value of the index.\nEach CGU will normally only emit coverage metadata for the …\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>u32</code>.\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFor each function that was instrumented for coverage, we …\nGenerates and exports the coverage map, which is embedded …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u16</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>u32</code>.\nCreates a new index from a given <code>usize</code>.\nCreates a new index from a given <code>usize</code>.\nGenerates the contents of the covmap record for this CGU, …\nExtracts the value of this index as a <code>usize</code>.\nExtracts the value of this index as a <code>usize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepare sets of definitions that are relevant to deciding …\nThis “raw” table doesn’t include the working dir, so …\nIntermediate coverage metadata for a single function, used …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nPopulates the mapping region tables in the current function…\nReturns the argument unchanged.\nGenerates the contents of the covfun record for this …\nCalls <code>U::from(self)</code>.\nFIXME(Zalathar): Make this the responsibility of the code …\nA context object for maintaining all state needed by the …\nA source code location used to generate debug information.\nThe (1-based) column number.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nInformation about the original source file.\nCreates any deferred debug metadata nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe (1-based) line number.\nProduces DIScope DIEs for each MIR Scope which has …\nAllocates the global variable responsible for the …\nInserts a side-effect free instruction sequence that makes …\nA function that returns an empty list of generic parameter …\nBuilds the debuginfo node for a closure environment.\nCreate debuginfo for <code>dyn SomeTrait</code> types. Currently these …\nCreates a <code>DW_TAG_member</code> entry inside the DIE represented …\nCreates debuginfo for a fixed size array (e.g. <code>[u64; 123]</code>).\nComputes the type parameters for a type, if any, for the …\nCreates debug information for the given global variable.\nCreates debuginfo for built-in pointer-like things:\nCreate debuginfo for <code>[T]</code> and <code>str</code>. These are unsized.\nCreates the debuginfo node for a Rust struct type. Maybe …\nBuilds the DW_TAG_structure_type debuginfo node for a Rust …\nBuild the debuginfo node for a Rust <code>union</code> type.\nBuilds the DW_TAG_member debuginfo nodes for the upvars of …\nGenerates LLVM debuginfo for a vtable.\nCreates debug information for the given vtable, which is …\nCreates an “extension” of an existing <code>DIScope</code> into …\nReturns from the enclosing function if the type debuginfo …\nExtract size and alignment from a TyAndLayout.\nGet the debuginfo node for the given type.\nReturns the <code>DIFlags</code> corresponding to the visibility of the …\nBuild the debuginfo node for a C-style enum, i.e. an enum …\nBuild the struct type for describing a single coroutine …\nBuild the debuginfo node for the struct type describing a …\nBuild a DW_TAG_enumeration_type debuginfo node, with the …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the discriminant value corresponding to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about a single field of the top-level …\nA coroutine debuginfo node looks the same as a that of an …\nIn CPP-like mode, we generate a union with a field for …\nThis is a helper function shared between enums and …\nThis function builds a DW_AT_enumeration_type that …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation needed for building a <code>DW_TAG_variant</code>:\nBuild the debuginfo node for a coroutine environment. It …\nBuilds the DW_TAG_member describing where we can find the …\nBuild the debuginfo node for an enum type. The listing …\nBuild the debuginfo node for <code>DW_TAG_variant</code>:\nBuilds the DW_TAG_variant_part of an enum or coroutine …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ID of a regular type as it shows up at the language …\nThe <code>TypeMap</code> is where the debug context holds the type …\nA unique identifier for anything that we create a …\nThe ID of the artificial type we create for VTables.\nThe ID for the single DW_TAG_variant_part nested inside …\nThe ID for the artificial struct type describing a single …\nThe ID for the additional wrapper struct type describing …\nThis function enables creating debuginfo nodes that can …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a string version of this UniqueTypeId, which can …\nAdds a <code>UniqueTypeId</code> to metadata mapping to the <code>TypeMap</code>. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a stub debuginfo node onto which fields and nested …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDetermines if <code>pointee_ty</code> is slice-like or …\nDeclare a function.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLLVMRustArchiveKind\nLLVMRustAsmDialect\nLLVMAtomicOrdering\nLLVMAtomicRmwBinOp\nMust match the layout of <code>LLVMRustAttributeKind</code>. …\nIn the LLVM-C API, boolean values are passed as …\nLLVM CallingConv::ID. Should we wrap this?\nLLVMRustChecksumKind\nLLVMRustCodeGenOptLevel\nLLVMRustCodeModel\nLLVMDLLStorageClass\nLLVMRustDiagnosticKind\nLLVMRustDiagnosticLevel\nLLVMRustFileType\nLLVMIntPredicate\nSee Module::setModuleInlineAsm.\nCreates a legacy pass manager – only used for final …\nData layout. See Module::getDataLayout.\nTranslation of LLVM’s MachineTypes enum, defined in …\nAdd LLVM module flags.\nReturns a string describing the last error caused by an …\nSee llvm::LLVMTypeKind::getTypeID.\nPrepares inline assembly.\nWrites a module to the specified path. Returns 0 on …\nMust match the layout of <code>LLVMLinkage</code>.\nLLVMRustMemoryEffects\nLLVMMetadataType\nMust match the layout of <code>LLVMRustModuleFlagMergeBehavior</code>.\nLLVMRustOptStage\nLLVMRustPassBuilderOptLevel\nWrapper for a raw enum value returned from LLVM’s C APIs.\nLLVMRealPredicate\nLLVMRelocMode\nLLVMRustSanitizerOptions\nLLVMRustTailCallKind\nLLVMRustThinLTOModule\nLLVMThreadLocalMode\nLLVMTypeKind\nLLVMUnnamedAddr\nMust match the layout of <code>LLVMVisibility</code>.\nWe don’t own or consume a <code>T</code>, but we can produce one.\nA wrapper around LLVM’s archive (.a) code\nLLVM diagnostic reports.\nSafe wrapper around <code>LLVMGetParam</code>, because segfaults are no …\nSafe wrapper for <code>LLVMGetValueName2</code> into a byte slice\nvalue of <code>ordinal</code> only important when <code>ordinal_present</code> is …\nGet the <code>name</code>d comdat from <code>llmod</code> and assign it to <code>llglobal</code>.\nSafe wrapper for <code>LLVMSetValueName2</code> from a byte slice\nLLVMRustDebugEmissionKind\nLLVMRustDebugNameTableKind\nLLVM has other types that we do not wrap here.\nOwns an <code>OperandBundle</code>, and will dispose of it when dropped.\nA wrapper around LLVM’s archive (.a) code\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nLLVM diagnostic reports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafe wrapper around <code>LLVMGetParam</code>, because segfaults are no …\nSafe wrapper for <code>LLVMGetValueName2</code> into a byte slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>name</code>d comdat from <code>llmod</code> and assign it to <code>llglobal</code>.\nSafe wrapper for <code>LLVMSetValueName2</code> from a byte slice\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpens a static archive for read-only purposes. This is …\nLLVM has other types that we do not wrap here.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLLVMRustArchiveKind\nLLVMRustAsmDialect\nLLVMAtomicOrdering\nLLVMAtomicRmwBinOp\nMust match the layout of <code>LLVMRustAttributeKind</code>. …\nIn the LLVM-C API, boolean values are passed as …\nLLVM CallingConv::ID. Should we wrap this?\nLLVMRustChecksumKind\nLLVMRustCodeGenOptLevel\nLLVMRustCodeModel\nLLVMDLLStorageClass\nLLVMRustDiagnosticKind\nLLVMRustDiagnosticLevel\nLLVMRustFileType\nLLVMIntPredicate\nSee Module::setModuleInlineAsm.\nCreates a legacy pass manager – only used for final …\nData layout. See Module::getDataLayout.\nTranslation of LLVM’s MachineTypes enum, defined in …\nAdd LLVM module flags.\nReturns a string describing the last error caused by an …\nSee llvm::LLVMTypeKind::getTypeID.\nPrepares inline assembly.\nPrints the timing information collected by …\nPrints the statistics collected by <code>-Zprint-codegen-stats</code>.\nWrites a module to the specified path. Returns 0 on …\nMust match the layout of <code>LLVMLinkage</code>.\nLLVMRustMemoryEffects\nLLVMMetadataType\nMust match the layout of <code>LLVMRustModuleFlagMergeBehavior</code>.\nOpaque pointee of <code>LLVMOperandBundleRef</code>.\nLLVMRustOptStage\nLLVMRustPassBuilderOptLevel\nWrapper for a raw enum value returned from LLVM’s C APIs.\nLLVMRealPredicate\nLLVMRelocMode\nLLVMRustSanitizerOptions\nLLVMRustTailCallKind\nLLVMRustThinLTOModule\nLLVMThreadLocalMode\nLLVMTypeKind\nLLVMUnnamedAddr\nMust match the layout of <code>LLVMVisibility</code>.\nWe don’t own or consume a <code>T</code>, but we can produce one.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreate an LLVM Attribute with no associated value.\nCreate an LLVM Attribute with these memory effects.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates an integer type with the given number of bits, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nvalue of <code>ordinal</code> only important when <code>ordinal_present</code> is …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nLLVMRustDebugEmissionKind\nLLVMRustDebugNameTableKind\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a feature name for the given <code>+feature</code> or <code>-feature</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the host CPU name, according to LLVM.\nThe list of LLVM features computed from CLI flags (…\nIf the given string is <code>&quot;native&quot;</code>, returns the host CPU name …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to generate cfg variables and apply features. Must …")