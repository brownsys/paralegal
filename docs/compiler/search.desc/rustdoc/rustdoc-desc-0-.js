searchState.loadedDescShard("rustdoc", 0, "This module defines the primary IR used in rustdoc …\nRustdoc’s FileSystem abstraction module.\nRustdoc’s JSON backend\nA macro to create a FxHashMap.\nStandalone markdown rendering.\nContains information about “passes”, used to modify …\nRenders and writes cross-crate info files, like the search …\nThis module analyzes crates to find call sites that can …\nThe Rust AST Visitor. Extracts useful information and …\nWhether to clean generic parameter defaults or not.\nWhen inlining items, we merge their attributes (and all …\nThe representation of a <code>#[doc(cfg(...))]</code> attribute.\nThis is needed to make it more “readable” when …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRemove attributes from <code>normal</code> that should not be inherited …\nThe goal of this function is to return the first <code>Path</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCollect attributes from the whole import chain.\nSupport for inlining external documentation into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis can happen for <code>async fn</code>, e.g. <code>async fn f&lt;&#39;_&gt;(&amp;&#39;_ self)</code>…\nSynthetic type-parameters are inserted after normal ones. …\nReturns <code>None</code> if the type could not be normalized\nSimplification of where-clauses and parameter bounds into …\nThe arguments <em>have</em> to contain an arg for the self type if …\nClean region outlives constraints to where-predicates.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIntersection of a list of configuration requirements, …\nUnion of a list of configuration requirements, i.e., …\nA generic configuration option, e.g., <code>test</code> or …\nPretty-print wrapper for a <code>Cfg</code>. Also indicates what form …\nDenies all configurations.\nNegates a configuration requirement, i.e., <code>not(x)</code>.\nAccepts all configurations.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the configuration consists of just <code>Cfg</code>, <code>Not</code> or <code>All</code>.\nWhether the configuration consists of just <code>Cfg</code> or <code>Not</code>.\nChecks whether the given configuration can be matched in …\nParses a <code>MetaItem</code> into a <code>Cfg</code>.\nParses a <code>MetaItemInner</code> into a <code>Cfg</code>.\nRenders the configuration for long display, as a long HTML …\nRenders the configuration for long display, as a long …\nRenders the configuration for human display, as a short …\nAttempt to simplify this cfg by assuming that <code>assume</code> is …\nInline an <code>impl</code>, inherent or of a trait. The <code>did</code> must be …\nBuilds all inherent implementations of an ADT …\nA trait’s generics clause actually contains all of the …\nRecord an external fully qualified name in the …\nSupertrait bounds for a trait are also listed in the …\nAttempt to inline a definition into this AST.\nRender a macro matcher in a format suitable for displaying …\nFind the source snippet for this token’s Span, reparse …\nMove bounds that are (likely) directly attached to generic …\nA constant (expression) that’s not an item or associated …\nAn array type.\nAn associated constant in a trait impl or a provided one …\nA constraint on an associated item.\nThe kind of associated item constraint.\nAn associated type in a trait impl or a provided one in a …\nThe attributes on an <code>Item</code>, including attributes like …\nIdentifier that is used for auto traits.\nA function pointer: <code>extern &quot;ABI&quot; fn(...) -&gt; ...</code>\nIdentifier that is used for blanket implementations.\nA reference type: <code>&amp;i32</code>, <code>&amp;&#39;a mut Foo</code>\nThe crate currently being documented.\nA “normal” item that uses a <code>DefId</code> for identification.\nA <code>dyn Trait</code> object: <code>dyn for&lt;&#39;a&gt; Trait&lt;&#39;a&gt; + Send + &#39;static</code>\nA constant from a different crate.\nIndicates where an external crate can be found.\n<code>fn</code>s from an extern block\n<code>static</code>s from an extern block\n<code>type</code>s from an extern block\nA type parameter.\nAn <code>impl Trait</code>: <code>impl TraitA + TraitB + ...</code>\nA type that is inferred: <code>_</code>\nAn inferred constant as in <code>[10u8; _]</code>.\nAnything with a source location and set of attributes and, …\nA link that has not yet been rendered.\nThis external crate can be found in the local doc/ folder\n<code>const FOO: u32 = ...;</code>\nA method in a trait impl or a provided method in a trait …\nA named type, which could be a trait.\nA constant that is just a path (i.e., referring to a const …\nA trait reference, which may have higher ranked lifetimes.\nA primitive (aka, builtin) type.\nA primitive (aka, builtin) type.\nA qualified path to an associated item: …\nA raw pointer type: <code>*const i32</code>, <code>*mut i32</code>\nRemote URL root of the external crate\nThe <code>Self</code> type.\nA slice type (does <em>not</em> include the <code>&amp;</code>): <code>[i32]</code>\nSmall wrapper around <code>rustc_span::Span</code> that adds helper …\nAn item that has been stripped by a rustdoc pass\nA tuple type: <code>(i32, &amp;str)</code>.\nA required associated constant in a trait declaration.\nA required associated type in a trait declaration.\nThis is the wrapper around <code>ty::Const</code> for a non-local …\nA required method in a trait declaration meaning it’s …\nRustdoc’s representation of types, mostly based on the …\nThe external crate could not be found.\n<code>use&lt;&#39;a, T&gt;</code> precise-capturing bound syntax\nThis is a more limited form of the standard Struct, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nUse this method to get the DefId of a clean AST node, …\nCombine all doc strings into a single value handling …\nCombine all doc strings into a single value handling …\nWill be <code>None</code> in the case of cross-crate reexports, and may …\nOnly here so that they can be filtered through the rustdoc …\nReturns a <code>FnHeader</code> if <code>self</code> is a function item, otherwise …\nThe url fragment to append to the link\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>header_len</code>: The length of the function header and name. In …\nReturns <code>Some(attr)</code> if the attribute list contains ‘attr…\nReturns <code>true</code> if the attribute list contains a specific <code>word</code>\nThe URL to put in the <code>href</code>\nThis is the <code>LocalDefId</code> of the <code>use</code> statement if the item …\nSome items contain others such as structs (for their …\nInner <code>AdtDef</code> type, ie <code>type TyKind = IrTyKind&lt;Adt, Ty&gt;</code>, to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this is a <code>T::Name</code> path for an associated type.\nChecks if this is a <code>T::Name</code> path for an associated type.\nThis field is used to represent “const” arguments from …\nCheck if two types are “the same” for documentation …\nReturns <code>true</code> if this item does not appear inside an impl …\n<code>type_</code> can come from either the HIR or from metadata. If it …\nInformation about this item that is specific to what kind …\nThe original link written in the markdown\nFind a list of all link names, without finding their href.\nThe link text displayed in the HTML.\nAttempts to find where an external crate is located, given …\nWhether the macro was defined via <code>macro_rules!</code> as opposed …\nThe name of this item. Optional because not every item has …\nWraps a <code>rustc_span::Span</code>. In case this span is the result …\nThe text to display in the HTML\nCombine all doc strings into a single value handling …\nCombine all doc strings into a single value handling …\nThe text the link was original written as.\nThe <code>DefId</code> of the Item whose <strong>HTML Page</strong> contains the item …\nReturns the DefId of the module with <code>rustc_doc_primitive</code> …\nFIXME: compute this field on demand.\nThe item being re-exported.\nReturns the effective stability of the item.\nThe effective stability, filled out by the …\nReturns the sugared return type for an async function.\nThe tooltip.\nReturns a documentation-level item type from the item.\nReturns the visibility of the current item. If the …\nWhen comparing types for equality, it can help to ignore <code>&amp;</code> …\nThe crate’s name, <em>not</em> the name it’s imported as.\nA link to <code>doc.rust-lang.org</code> that includes the channel …\nCheck if the generic argument <code>actual</code> coincides with the …\nFind the nearest parent module of a <code>DefId</code>.\nChecks for the existence of <code>hidden</code> in the attribute below …\nIf <code>res</code> has a documentation page associated, store it in …\nRender a sequence of macro arms in a format suitable for …\nGiven a type Path, resolve it to a Type using the TyCtxt\nA crate or markdown file.\nEither an input crate, markdown file, or nothing (–…\nThe <code>--merge=finalize</code> step does not need an input crate to …\nConfiguration options for rustdoc.\nPath directly to crate-info file.\nConfiguration options for the HTML page-creation process.\nControls merging of cross-crate information\nWhether or not this is a bin crate\nSet of function-call locations to include as examples\nList of <code>cfg</code> flags to hand to the compiler. Always includes …\nList of check cfg flags to hand to the compiler.\nPrints deprecation warnings for deprecated options\nCodegen options to hand to the compiler.\nCodegen options strings to hand to the compiler.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe name of the crate being documented.\nCrate version to note on the sidebar of generated docs.\nA map of the default settings (values are as for DOM …\nWhether to ask rustc to describe the lints it knows.\nWidth of output buffer to truncate errors appropriately.\nDocument items that have <code>doc(hidden)</code>.\nDocument items that have lower than <code>pub</code> visibility.\nEdition used when reading the crate. Defaults to “2015”…\nWhether to create an index page in the root of the output …\nWhether to allow ignoring doctests on a per-target basis …\nHow to format errors and warnings.\nAll commandline args used to invoke the compiler, with …\nIf present, CSS file that contains rules to add to the …\nWhether to give precedence to <code>html_root_url</code> or …\nA map of crate names to the URL to use instead of querying …\nThe list of external crates strings to link against.\nExternal files to insert into generated pages.\nThe list of external crates to link against.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the given command-line for options. If an error …\nIf <code>true</code>, HTML source pages will generate links for items …\nIf <code>true</code>, generate a JSON file in the crate folder instead …\nIf <code>true</code>, HTML source code pages won’t be generated.\nA pre-populated <code>IdMap</code> with the default headings and any …\nPath to crate-info for external crates.\nA file to use as the index page at the root of the output …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether doctests should emit unused externs\nLibrary search paths strings to hand to the compiler.\nLibrary search paths to hand to the compiler.\nWhat level to cap lints at.\nLint information passed over the command-line.\nCreate the input (string or file path)\nAdditional CSS files to link in pages generated from …\nReturns <code>true</code> if the file given as <code>self.input</code> is a Markdown …\nWhether to generate a table of contents on the output file …\nIf present, playground URL to use in the “Run” button …\nThe path to the sysroot. Used during the compilation …\nWhat sorting mode to use for module pages. …\nIf <code>true</code>, Context::init will not emit shared files.\nDo not run doctests, compile them if should_test is active.\nWhether to skip capturing stdout and stderr of tests.\nOutput directory to generate docs into. Defaults to <code>doc</code>.\nThe format that we output when rendering.\nThis field is only used for the JSON output. If it’s set …\nExtracts <code>--extern-html-root-url</code> arguments from <code>matches</code> and …\nReports error if –include-parts-dir / crate-info is not …\nExtracts read_rendered_cci and write_rendered_cci from …\nWhere to write crate-info\nOptional path to persist the doctest executables to, …\nIf present, playground URL to use in the “Run” button …\nWhether or not this is a proc-macro crate\nShould we append to existing cci in the doc root\nWhat sources are being mapped.\nIf present, suffix added to CSS/JavaScript files when …\nIf this option is set to <code>true</code>, rustdoc will only run …\nRuntool to run doctests with\nArguments to pass to the runtool\nConfiguration for scraping examples from the current …\nWhether we should read or write rendered cross-crate info …\nWhether we should run doctests instead of generating docs.\nWhether to run the <code>calculate-doc-coverage</code> pass, which …\nShow the memory layout of types in the docs.\nAn optional path to use as the location of static files. …\nThe target used to compile the crate against.\nList of arguments to pass to the test harness, if running …\nThe path to a rustc-like binary to build tests with. If …\nRun these wrapper instead of rustc directly\nThe working directory in which to run tests.\nList of themes to extend the docs with. Original argument …\nNote: this field is duplicated in <code>RenderOptions</code> because it…\nNote: this field is duplicated in <code>Options</code> because it’s …\nUnstable (<code>-Z</code>) options to pass to the compiler.\nUnstable (<code>-Z</code>) options strings to pass to the compiler.\nShould we write cci to the doc root\nDue to https://github.com/rust-lang/rust/pull/73566, the …\n<code>DefId</code> or parameter index (<code>ty::ParamTy.index</code>) of a …\nThe top-level command-line options struct.\nUsed while populating <code>external_traits</code> to ensure we don’t …\nIndicates whether this run of the compiler is actually …\nThe current set of parameter instantiations for expanding …\nLike <code>tcx.local_def_id_to_hir_id()</code>, but skips calling it on …\nThis same cache is used throughout rustdoc, including in …\nSpecifications of codegen units / ThinLTO which are forced …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe crate config requested for the session, which may be …\nParse, resolve, and typecheck the given crate.\nInclude the <code>debug_assertions</code> flag in dependency tracking, …\nCall the closure with the given parameters set as the …\nLater on moved through <code>clean::Crate</code> into <code>cache</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAuto-trait or blanket impls processed so far, as …\nTable synthetic type parameter for <code>impl Trait</code> in argument …\nIf <code>Some</code>, enable incremental compilation, using the given …\nUsed by <code>clean::inline</code> to tell if an item has already been …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the JSON output format is enabled for …\n<code>true</code> if we’re emitting JSON blobs about each artifact …\n<code>true</code> if we’re emitting a JSON job containing a …\n<code>true</code> if we’re emitting a JSON blob containing the unused …\nEffective logical environment used by <code>env!</code>/<code>option_env!</code> …\nCreates a new <code>DiagCtxt</code> that can be used to emit warnings …\nUsed by <code>calculate_doc_coverage</code>.\nUsed for normalization.\nBase directory containing the <code>src/</code> for the Rust standard …\nRemap source path prefixes in all output (messages, object …\nThe options given to rustdoc that could be relevant to a …\nWhether name resolver should resolve documentation links.\nkeep this in sync with the event filter names in …\nUsed by <code>strip_private</code>.\no/w tests have closure@path\nWe default to 1 here since we want to behave like a …\nControl path trimming.\nIndicates how the compiler should treat unstable features.\nThis name is kind of confusing: Most unstable options …\nSet by the <code>Config::hash_untracked_state</code> callback for custom\nThe (potentially remapped) working directory\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe test failed to compile.\nThe test binary was unable to be executed.\nThe test binary exited with a non-zero exit code.\nOptions that apply to all doctests in a crate or Markdown …\nThe test failed to compile (as expected) but the compiler …\nInformation needed for running a bundle of doctests.\nA doctest scraped from the code, ready to be turned into a …\nDocumentation test failure modes.\nThe test is marked <code>compile_fail</code> but compiled successfully.\nThe test is marked <code>should_panic</code> but the test binary …\nPath to file containing arguments for the invocation of …\nAdditional crate-level attributes to add to doctests.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nName of the crate (for regular <code>rustdoc</code>) or Markdown file …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether inserting extra indent spaces in code block, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLint level of the unused_crate_dependencies lint\nLogic for transforming the raw code given by the user into …\nConverts a path intended to use as a command to absolute …\nDoctest functionality used only for doctests in <code>.md</code> …\nWhether to disable the default <code>extern crate my_crate;</code> when …\nExecute a <code>RunnableDoctest</code>.\nDoctest functionality used only for doctests in <code>.rs</code> source …\nList of unused externs by their names.\nThis struct contains information about the doctest itself …\nReturns <code>Some</code> if the attribute is complete and <code>Some(true)</code> …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransforms a test into code that can be compiled into a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is a merged doctest, it will be put into …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns any tests/code examples in the markdown file …\nConvenient type to merge compatible doctests into one.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nPush new doctest content into <code>output</code>. Returns the test ID …\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContent that will be included inline between the content …\nContent that will be included inline between <code>&lt;body&gt;</code> and …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nContent that will be included inline in the <code>&lt;head&gt;</code> section …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndon’t override!\ndon’t override!\nMetadata about implementations for a type or trait.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThis function is used to extract a <code>DefId</code> to be used as a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nItem types.\nThis cache is used to store information about the …\nThis struct is used to wrap the <code>cache</code> and <code>tcx</code> in order to …\nInformation about trait and type parents is tracked while …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe version of the crate being documented, if given from …\nWhether to document hidden items. This is stored in <code>Cache</code> …\nWhether to document private items. This is stored in <code>Cache</code> …\nMaps local <code>DefId</code>s of exported types to fully qualified …\nCache of where external crate documentation can be found.\nSimilar to <code>paths</code>, but only holds external paths. This is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWe have a parent, but we don’t know where they’re …\nCfg that have been hidden via #![doc(cfg_hide(…))]\nThis field is used to prevent duplicated impl blocks.\nWhen rendering traits, it’s often useful to be able to …\nMaps a type ID to all known implementations for that type. …\nContains the list of <code>DefId</code>s which have been inlined. It is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll intra-doc links resolved so far.\nCrates marked with <code>#[doc(masked)]</code>.\nMaintains a mapping of local crate <code>DefId</code>s to the fully …\nPopulates the <code>Cache</code> with more data. The returned <code>Crate</code> …\nCache of where documentation for primitives can be found.\nThis map contains information about all known traits of …\nItem type. Corresponds to <code>clean::ItemEnum</code> variants.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nDepending on the parent kind, some variants have a …\nCalls <code>U::from(self)</code>.\nAllows for different backends to rustdoc to be used with …\nThis associated type is the type where the current module …\nWhether to call <code>item</code> recursively for modules\nPost processing hook for cleanup and dumping output to …\nGives a description of the renderer. Used for performance …\nSets up any state required for the renderer. When this is …\nRenders a single non-module item. This means no recursive …\nRenders a module (should not handle recursing into …\nRuns after recursively rendering all sub-items of a module.\nUsed to reset current module’s information.\nMain method for rendering a crate.\nThis method is called right before call <code>Self::item</code>. This …\nHTML escaping.\nHTML formatting module\nBasic syntax highlighting functionality.\nSee <code>HtmlWithLimit</code>.\nMarkdown formatting for rustdoc.\nRustdoc’s HTML rendering module.\nStatic files bundled with documentation output.\nTable-of-contents creation.\nWrapper struct which will emit the HTML-escaped version of …\nWrapper struct which will emit the HTML-escaped version of …\nWrapper struct which will emit the HTML-escaped version of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis item is known to rustdoc, but from a crate that does …\nThis can only happen for non-local items when …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function is to get the external macro path because …\nBoth paths should only be modules. This is because modules …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Generics from which to emit a where-clause.The number …\nUsed to render a <code>clean::Path</code>.\nHow a span of text is classified. Mostly corresponds to …\nProcesses program tokens, classifying strings of text by …\nDecorations are represented as a map from CSS class to …\nCustom spans inserted into the source. Eg –…\nThis type is needed in case we want to render links on …\n<code>Ident</code> isn’t rendered in the HTML but we still need it …\nThis iterator comes from the same idea than “Peekable” …\nKeywords that do pointer/reference stuff.\nThis type is used as a conveniency to prevent having to …\nSingle step of highlighting. This will classify <code>token</code>, but …\nReturns the css class expected by rustdoc for each <code>Class</code>.\nCheck if two <code>Class</code> can be merged together. In the …\nIt contains the closing tag and the associated <code>Class</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n<code>current_class</code> and <code>pending_elems</code> are used to group HTML …\nThis field is used to calculate precise local URLs.\nWhen leaving, we need to flush all pending data to not …\nIf <code>self</code> contains a <code>Span</code>, it’ll be replaced with <code>DUMMY_SP</code> …\nCalled when we start processing a span of text that should …\nCalled at the end of a span of highlighted text.\nThis span contains the current file we’re going through.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConcatenate colons and idents as one when possible.\nClassifies into identifier class; returns <code>None</code> if this is …\nIn case this is an item which can be converted into a link …\nExhausts the <code>Classifier</code> writing the output into <code>sink</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIt is only looking at the variant, not the variant content.\nTakes as argument the source code to HTML-ify, the rust …\nConvenient wrapper to create a <code>Span</code> from a position in the …\nWraps the tokens iteration to ensure that the <code>byte_pos</code> is …\nReturns the next item after the current one. It doesn’t …\nReturns the next item after the last one peeked. It doesn…\nThis position is reinitialized when using <code>next</code>. It is used …\nWe need to keep the <code>Class</code> for each element because it …\nThis is used because we don’t automatically generate the …\nHighlights <code>src</code> as an inline example, returning the HTML …\nThis field is used to know “how far” from the top of …\nCalled for a span of text. If the text should be …\nThis function writes <code>text</code> into <code>out</code> with some modifications …\nConvert the given <code>src</code> source code into HTML by adding …\nWrite all the pending elements sharing a same (or at …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe given user css file which allow to customize the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, then scrape-examples.js will be included in the …\nA buffer that allows generating HTML with a length limit.\nClose all unclosed tags.\nClose the most recently opened HTML tag.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nFinish using the buffer and get the written output. This …\nWrite all queued tags and add them to the <code>unclosed_tags</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new buffer, with a limit of <code>length_limit</code>.\nOpen an HTML tag.\nWrite some plain text to the buffer, escaping as needed.\nA list of tags that have been requested to be opened via …\nA list of all tags that have been opened but not yet …\nAdds syntax highlighting and playground Run buttons to …\nNormally, markdown link warnings point only at the …\nMake headings links with anchor IDs and build up TOC.\nControls whether a line will be hidden or shown in HTML …\nMake headings links with anchor IDs and build up TOC.\nWhen <code>to_string</code> is called, this struct will emit the HTML …\nA tuple struct like <code>Markdown</code> that renders the markdown …\nA tuple struct like <code>Markdown</code> that renders only the first …\nA struct like <code>Markdown</code> that renders the markdown with a …\nA newtype that represents a relative line number in …\nExtracts just the first paragraph.\nWrap HTML tables into <code>&lt;div&gt;</code> to prevent having the doc …\nThis is the parser for fenced codeblocks attributes. It …\nIn some cases, it’s not possible to point at the …\nReturns <code>false</code> if an error was emitted.\nThe range in the markdown that the code within the code …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDefault edition to use when parsing doctests (to add a …\nWhether to allow the use of explicit error codes in …\nMarkdown footnote handling.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod to handle <code>existing_footnotes</code> increment …\nOffset at which we render headings. E.g. if …\nThe current list of used header IDs.\nExtracts the inner range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of link replacements.\nOptions for rendering Markdown in the main body of …\nRenders a subset of Markdown in the first paragraph of the …\nSee struct docs.\nSee struct docs.\nRenders the first paragraph of the provided markdown as …\nThe range in the markdown that the code block occupies. …\nReturns a range of bytes for each code block in the …\nRenders a shortened first paragraph of the given Markdown …\nReturns <code>false</code> if an error was emitted.\nConvert chars from a title for an id.\nConvert markdown to (summary, remaining) HTML.\nOptions for rendering Markdown in summaries (e.g., in …\nThe definition of a single footnote.\nMoves all footnote definitions to the end and add back …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe number that appears in the footnote reference and list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies whether rendering directly implemented trait …\nA message describing the deprecation of this item\nStruct representing one entry in the JS search index. …\nFull type of functions/methods in the search index.\nFor different handling of associated items from the Deref …\nA type used for the search index.\nThe feature corresponding to an unstable item, and …\nBuild a (possibly empty) <code>href</code> attribute (a key-value pair) …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns a list of all paths used in the type. This is used …\nAdd extra information about an item such as:\nWrites a documentation block containing only the first …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the list of implementations for the primitive …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe path to the theme\nGenerates the HTML for example call locations generated …\nRender md_text as markdown.\nWrites a span containing the versions at which an item …\nRender the stability, deprecation and portability …\nWhether or not to show methods.\nRustdoc writes aut two kinds of shared files:\nMajor driving force in all rustdoc rendering. This …\nThis struct contains the information that needs to be …\nShared mutable state used in <code>Context</code> and elsewhere.\nConstruct a map of items shown in the sidebar to a …\nThe <code>Cache</code> used during rendering.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe directories that have already been created in this doc …\nCurrent hierarchy of components leading down to what’s …\nTracks section IDs for <code>Deref</code> targets so they match in both …\nThe current destination folder of where HTML artifacts …\nStorage for the errors produced while generating …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe fs handle we are working with.\nThe map used to ensure all generated ‘id=’ attributes …\nThis flag indicates whether source links should be …\nContains information that needs to be saved and reset …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField used during rendering, to know if we’re inside an …\nThe base-URL of the issue tracker for when an item has …\nThis describes the layout of each page, and is not …\nThe local file sources we’ve emitted and their …\nThis flag indicates whether listings of modules (in the …\n<code>None</code> by default, depends on the <code>generate-redirect-map</code> …\nA flag, which when <code>true</code>, will render pages which redirect …\nSuffix to add on resource files (if suffix is “-v2” …\nString representation of how to get back to the root path …\nShared mutable state.\nControls whether we read / write to cci files in the doc …\nShow the memory layout of types in the docs.\nCorrespondence map used to link types used in the source …\nGenerates a url appropriate for an <code>href</code> attribute back to …\nThe path to the crate root source minus the file name. …\nOptional path string to be used to load static files on …\nAdditional CSS files to be added to the generated docs.\nCollection of all types with notable traits referenced in …\nFor use in JSON.parse(‘{…}’).\nPrerendered json.\nSerializes and sorts\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf you pass in an array, it will not be sorted.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCompare two strings treating multi-digit numbers as single …\nRender the stability, deprecation and portability tags …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a Rinja template struct for rendering items with …\nImplement common methods for item template structs …\nCalls <code>print_where_clause</code> and returns <code>true</code> if a <code>where</code> …\nFor large structs, enums, unions, etc, determine whether …\nIt’ll return false if any variant is not a C-like …\nThe serialized search description sharded version\nBuilds the search index from the collected metadata\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the full list of types when bounds have been …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe point of this function is to lower generics and types …\nlist of entries\nnumber of ones, bits\nlist of (start, len-1)\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA link to an item. Content should not be escaped.\nA sidebar section such as ‘Methods’.\nNested list of links (used only in top-toc)\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRender the heading even if there are no links\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe name of this section, e.g. ‘Methods’ as well as …\nThe id of an anchor within the page (without a <code>#</code> prefix)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe content for the anchor tag and title attr\nThe content for the anchor tag (if different from name)\nOnly create a <code>&lt;section&gt;</code> if there are any blocks which …\nAdds trait implementations into the blocks of links\nRenders the trait implementations for this type\nWritten to last line of file to specify the location of …\nAppend-only templates for sorted, deduplicated lists of …\nAdds this text to the template\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe length of each fragment in the encoded template, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTemplate will insert fragments between <code>before</code> and <code>after</code>\nGenerate this template from arbitary text. Will insert …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndex of the first byte in the template\nThis enum allows us to store two different kinds of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThis function will do at most two things:\nUsed to generate links on items’ definition to go to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds the macro call into the span map. Returns <code>true</code> if the …\nThis function is where we handle <code>hir::Path</code> elements and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinal serialized form of the alias impl\nData for an aliased type.\nThe <code>impl_</code> contains data that’s used to figure out if an …\nWrapper trait for <code>Part&lt;T, U&gt;</code>\nContains pre-rendered contents to insert into the CCI …\nVersion for the format of the crate-info file.\nIdentifies the file format of the cross-crate information\nSource files directory tree\nA piece of one of the shared artifacts for documentation …\nPaths (relative to the doc root) and their pre-merge …\nCollect the list of aliased types and their aliases. …\nMap from DefId-of-aliased-type to its data.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreate all parents\nWrites serialized JSON\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMight return parts that are duplicate with ones in …\nReads <code>crates.js</code>, which seems like the best place to obtain …\nThis is the data stored inside the file. ItemId is used to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead all of the crate info from its location on the …\nReturns a blank template unless we could find one to …\nThis is used to generate the actual filename of this …\nSingleton part, one file\nWrites files that are written directly to the <code>--out-dir</code>, …\ninfo from this crate and the –include-info-json’d …\nWrite the search description shards to disk\nWrites the static files, the style files, and the css …\nHelper struct to render all source code to HTML pages\nTakes a path to a source file and cleans the path to it. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nRoot destination to place all HTML output into\nRenders the given filename into its corresponding HTML …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper struct to render the source code of a file. This …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInsert the provided suffix into a filename just before the …\nA (recursive) table of contents\nProgressive construction of a table of contents.\nThe current hierarchy of parent headings, the levels are …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe levels are strictly decreasing, i.e.\nCollapse the chain until the first heading more important …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts into a true <code>Toc</code> struct.\nPush a level <code>level</code> heading into the appropriate place in …\nThis is just a guess at the average length of a URL part, …\nA builder that allows efficiently and easily constructing …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEstimate the number of bytes in an item’s path, based on …\nGet the final <code>String</code> buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an empty buffer.\nPush a component onto the buffer.\nPush a component onto the buffer, using <code>format!</code>’s …\nPush a component onto the front of the buffer.\nCreate a buffer with one URL component.\nCreate an empty buffer with capacity for the specified …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThese from impls are used to create the JSON types which …\nUsed to distinguish imports of different items with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nA mapping of IDs that contains all local items for this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInserts an item into the index. This should be used rather …\nThe directory where the JSON blob should be written to.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nGet the id’s of all items that are <code>pub use</code>d in the crate.\nCalls <code>U::from(self)</code>.\nThe <code>bare_urls</code> lint detects when a URL is not a hyperlink. …\nThe <code>broken_intra_doc_links</code> lint detects failures in …\nThe <code>invalid_codeblock_attributes</code> lint detects code block …\nThe <code>invalid_html_tags</code> lint detects invalid HTML tags. This …\nThe <code>invalid_rust_codeblocks</code> lint detects Rust code blocks …\nThe <code>missing_crate_level_docs</code> lint detects if documentation …\nThe <code>missing_doc_code_examples</code> lint detects …\nThe <code>private_doc_tests</code> lint detects code samples in docs of …\nThis is a subset of <code>broken_intra_doc_links</code> that warns when …\nThis lint is <strong>warn-by-default</strong>. It detects explicit links …\nThe <code>unescaped_backticks</code> lint detects unescaped backticks (`…\nThis compatibility lint checks for Markdown syntax that …\nThis function is used to setup the lint initialization. By …\nSeparate any lines at the start of the file that begin …\nRender <code>input</code> (e.g., “foo.md”) into an HTML file in …\nThe list of default passes run when <code>--doc-coverage</code> is …\nHow to decide whether to run a conditional pass.\nIn a list of passes, a pass that may or may not need to be …\nThe list of passes run by default.\nThe full list of passes.\nA single pass over the cleaned documentation.\nWhen <code>--document-private-items</code> is passed.\nWhen <code>--document-hidden-items</code> is not passed.\nWhen <code>--document-private-items</code> is not passed.\nCalculates information used for the –show-coverage flag.\nLooks for items missing (or incorrectly having) doctests.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThis module implements RFC 1946: Intra-rustdoc-links\nCollects trait impls for each item in the crate. For …\nReturns the given default set of passes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRuns several rustdoc lints, consolidating them into a …\nPropagates <code>#[doc(cfg(...))]</code> to child items.\nPropagates stability to child items.\nStrip all doc(hidden) items from the output.\nStrips all private import statements (use, extern crate) …\nStrip all private items from the output. Additionally …\nA collection of utility functions for the <code>strip_*</code> passes.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefinition having a unique ID (<code>DefId</code>), corresponds to …\nDisambiguators for a link.\nName resolution failed. We use a dummy <code>Res</code> variant so …\n<code>f()</code>\n<code>struct@</code> or <code>f()</code>\nA local variable or function parameter.\n<code>m!</code>\nUser error: <code>[std#x#y]</code> is not valid\n<code>type@</code>\nAn attribute that is <em>not</em> implemented via macro. E.g., …\n<code>struct@</code>\nA primitive type such as <code>i32</code> or <code>str</code>.\n<code>prim@</code>\nThe <code>Self</code> constructor, along with the [<code>DefId</code>] of the impl …\nThe <code>Self</code> type, as used somewhere other than within a trait.\nThe <code>Self</code> type, as used within a trait.\nA suggestion to show in a diagnostic.\nA tool attribute module; e.g., the <code>rustfmt</code> in …\nThe link failed to resolve. <code>resolution_failure</code> should look …\nA part of a page that isn’t a rust item.\nThis resolved, but with the wrong namespace.\nReport an ambiguity error, where there were multiple …\nAccording to <code>rustc_resolve</code>, these links are ambiguous.\nReport an anchor failure.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConvert a DefId to a Res, where possible.\nReport an error in the link disambiguator.\nUsed for error reporting.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a link, parse and return …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for resolve collisions between a trait and its …\nItem on which the link is resolved, used for resolving <code>Self</code>…\nThe scope the link was resolved in.\nIf part of the link resolved, this has the <code>Res</code>.\nReturns:\nConvert a PrimitiveType to a Ty, where possible.\nReport a link from a public item to a private one.\nGet the section of a link between the backticks, or the …\nRender the fragment, including the leading <code>#</code>.\nReports a diagnostic for an intra-doc link.\nReports a link that failed to resolve.\nResolves a string as a path within a particular namespace. …\nResolve an associated item, returning its containing page…\nLook to see if a resolved item has an associated item …\nThis is the entry point for resolving an intra-doc link.\nConvenience wrapper around <code>doc_link_resolutions</code>.\nResolve a primitive type or value.\nGiven a primitive type, try to resolve an associated item.\nAfter parsing the disambiguator, resolve the main part of …\nReturns true if we should ignore <code>path_str</code> due to it being …\nReturns true if we should ignore <code>link</code> due to it being …\nIn case of an ambiguity or mismatched disambiguator, …\nFind the associated item in the impl <code>impl_id</code> that …\nGiven a type, return all trait impls in scope in <code>module</code> …\nThe remaining unresolved path segments.\nReturns <code>true</code> if a link could be generated from the given …\nGiven a full link, parse it as an enum struct variant.\nCache the resolved links so we can avoid resolving (and …\nThe expected namespace for the resolution, determined from …\nWhat the link resolved to.\nThe item introducing the <code>Self</code> type alias. Can be used in …\nWhether the <code>Self</code> type is disallowed from mentioning …\nIs this within an <code>impl Foo for bar</code>?\nThe trait this <code>Self</code> is a generic parameter for.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetects links that are not linkified, e.g., in Markdown …\nValidates syntax inside Rust code blocks (```rust).\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nDetects invalid HTML (like an unclosed <code>&lt;span&gt;</code>) in doc …\nCalls <code>U::from(self)</code>.\nDetects unescaped backticks (`) in doc comments.\nDetects specific markdown syntax that’s different …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFIXME(ChAoSUnItY): Too many arguments.\nFIXME(ChAoSUnItY): Too many arguments.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCollects all necessary data of link.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA markdown tagged element, which may or may not contain an …\nMissing ` at end.\nA previous inline code node, that looks wrong.\nMissing ` at start.\nThe unescaped backtick.\nReturns whether inserting a backtick at <code>dox[index]</code> will …\nDecrease the index until it is inside or one past the end …\nIncrease the index until it is inside or one past the end …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe full range (span) of the element in the doc string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven a potentially unclosed inline code, attempt to find …\nGiven a potentially unclosed inline code, attempt to find …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSuggest a different start or end of an inline code.\nTry to emit a span suggestion and fall back to help …\nThe ranges where we’re allowed to put backticks. This is …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn case <code>i</code> is a non-hidden impl block, then we special-case …\nStrip items marked <code>#[doc(hidden)]</code>\nStrip private items from the point of view of a crate or …\nThis stripper discards all impls which reference stripped …\nThis stripper discards all private import statements (<code>use</code>, …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVisitor for traversing a crate and finding instances of …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nWhen encountering a <code>&quot;</code> or a <code>&#39;</code>, returns the whole string, …\nCalls <code>U::from(self)</code>.\nThe entry point to parse the CSS rules. Every time we …\nReturns a CSS property name. Ends when encountering a <code>:</code> …\nTry to get the value of a CSS property (the <code>#fff</code> in …\nThis is used to parse inside a CSS <code>{}</code> block. If we …\nSkips a <code>/*</code> comment.\nSkips a line comment (<code>//</code>).\nAllows a type to traverse the cleaned ast of a crate.\nThis is the main entrypoint of <code>DocVisitor</code>.\nDon’t override!\nDon’t override!\nThis module is used to store stuff from Rust’s AST in a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThis method will create a new module and push it onto the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSame as for <code>items</code>.\nAre the current module and all of its parents public?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe key is the item <code>ItemId</code> and the value is: (item, …\nTries to resolve the target of a <code>pub use</code> statement and …\nReturns <code>true</code> if the item is visible, meaning it’s not …\nThis method will go through the given module items in two …\nSimilar to <code>librustc_privacy::EmbargoVisitor</code>, but also takes\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")