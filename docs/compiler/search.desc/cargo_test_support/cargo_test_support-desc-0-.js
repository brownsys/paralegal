searchState.loadedDescShard("cargo_test_support", 0, "Cargo test support.\nAdd a list of arguments as a line\nTest the cargo command\nEnable nightly features for testing\nRun and verify a <code>ProcessBuilder</code>\nA builder object for an external process, similar to …\nA cargo project to run tests against.\nCreate a project to run tests against\nThis is the raw output from the process.\nEstablish a process’s test environment\n(chainable) Adds <code>arg</code> to the args list.\n(chainable) Adds multiple <code>args</code> to the args list.\n(chainable) Replaces the args list with the given <code>args</code>.\nCreate project, relative to <code>paths::root</code>\nGenerate a <code>Cargo.toml</code> with the specified <code>bin.name</code>\nGenerate a <code>Cargo.toml</code> with the specified <code>lib.name</code>\nGenerate a basic <code>Cargo.toml</code>\nPath to a debug binary.\nCreates the project.\nConverts <code>ProcessBuilder</code> into a <code>std::process::Command</code>, and …\nProject’s target dir\nCreates a <code>ProcessBuilder</code> to run cargo.\nPath to the cargo binary\nRun <code>cargo $arg_line</code>, see <code>Execs</code>\nReplacement for <code>#[test]</code>\nOverwrite a file with new content\nRoutines for comparing and diffing output.\nSupport for testing using Docker containers.\nSupport for cross-compile tests with the <code>--target</code> flag.\n(chainable) Sets the current working directory of the …\nEnables environment variable display.\n(chainable) Sets an environment variable for the process.\n(chainable) Unsets an environment variable for the process.\nPath to an example built as a library.\nRuns the process, waiting for completion, and mapping …\nReplaces the current process with the target process.\nExecutes the process, returning the stdio output, or an …\nExecutes a command, passing each line of stdout and stderr …\nRun and verify a process, see <code>Execs</code>\nAdds an executable file to the project.\nAdds a file to the project.\nDeclare an expected value for an assert from a file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopy the test project from a fixed state\nGets the program arguments.\nGets the current working directory for the process.\nGets an environment variable as the process will see it …\nGets all environment variables explicitly set or unset for …\nGets the executable name.\nGit Testing Support\nRun <code>git $arg_line</code>, see <code>ProcessBuilder</code>\nReturns an iterator of paths within <code>Project::root</code> matching …\nSets the <code>make</code> jobserver. See the jobserver crate for more …\nHelpers for testing <code>cargo install</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the local filesystem has low-resolution …\nGenerate a <code>main.rs</code> printing the specified text\nThe list of reasons should be why nightly cargo is needed. …\nEnables nightly features for testing\nCreates a new <code>ProcessBuilder</code> with the given executable …\nCreate project in <code>root</code>\nThe error message for ENOENT.\nLike <code>Command::output</code> but with a better error message.\n<code>panic!</code>, reporting the specified error , see also <code>t!</code>\nAccess common paths and manipulate the filesystem\nRun <code>$bin</code> in the test’s environment, see <code>ProcessBuilder</code>\nCreates a <code>ProcessBuilder</code> to run a program in the project …\n(chainable) Sets the executable for the process.\nGenerates a project layout, see <code>ProjectBuilder</code>\nGenerates a project layout in given directory, see …\nGenerates a project layout inside our fake home dir, see …\nHelpers for testing <code>cargo package</code> / <code>cargo publish</code>\nReturns the contents of a path in the project root\nReturns the contents of <code>Cargo.lock</code>.\nInteract with the <code>TestRegistry</code>\nPath to a release binary.\nSafely run a process after <code>cargo build</code>.\nOverrides the crates.io URL for testing.\nHelper to retry a function <code>n</code> times.\nEnables retrying with an argfile if hitting “command …\nRoot of the project\nRoot of the project\nRuns the process, checks the expected output, and returns …\nThe rustc host such as <code>x86_64-unknown-linux-gnu</code>.\nThe host triple suitable for use in a cargo environment …\nA way for to increase the cut off for all the time based …\nLike <code>Command::status</code> but with a better error message.\nSets a value that will be written to stdin of the process …\nDeclare an expected value from within Rust source\nForward subordinate process stdout/stderr to the terminal. …\nAdds a symlink to a file to the project.\nCreate a symlink to a directory\nUnwrap a <code>Result</code> with a useful panic message\nPath to a debug binary for a specific target triple.\nProject’s debug dir\nProject’s debug dir\nHelper that waits for a thread to finish, up to <code>n</code> tenths …\nHelper that runs some function, and waits up to <code>n</code> tenths …\nCommon executables that can be reused by various tests.\nModifies <code>Cargo.toml</code> to remove all commented lines.\nFile url for root\nVerifies the exit code from the process.\nVerifies that stderr contains the given contiguous lines …\nVerifies that stderr is equal to the given lines.\nVerifies that stderr does not contain the given contiguous …\nVerify that a particular line appears in stderr with and …\nWrites the given lines to stdin.\nVerifies that stdout contains the given contiguous lines …\nVerifies that stdout is equal to the given lines.\nVerifies that stdout does not contain the given contiguous …\nRemoves exit code check for the process.\nWraps an existing command with the provided wrapper, if it …\nA single line string that supports <code>[..]</code> wildcard matching.\nAssertion policy for functional end-to-end tests\nAssertion policy for UI tests\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>impl _ for InMemoryDir</code> for a generic tuple\nExtend <code>impl_from_tuple_for_inmemorydir</code> to generate for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the given string contains the given contiguous …\nChecks that the given string does not contain the given …\nChecks that the given string has a line that contains the …\nNormalizes the output so that it can be compared against …\nNormalizes the expected string so that it can be compared …\nThis makes it easier to write regex replacements that are …\nA builder for configuring a container to run.\nA handle to a running container.\nBuilder for configuring a file to copy into a container.\nThe host directory that forms the basis of the Docker …\nExecutes a program inside a running container.\nAdds a file to be copied into the container.\nFiles to copy over to the image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the container.\nStarts the container.\nThe name of the container.\nDefines a file to add to the container.\nReturns the mapping of container_port-&gt;host_port for ports …\nPort mappings of <code>container_port</code> to <code>host_port</code> for ports …\nReturns the contents of a file inside the container.\nWhether or not the resulting cross binaries can run on the …\nThe alternate target-triple to build with.\nWhether or not the host can run cross-compiled executables.\nThe arch triple of the test-running host.\nA possible alternate target-triple to build with.\nA target-triple that is neither the host nor the target.\nManually construct a <code>Repository</code>\nSee <code>new</code>\n<em>(<code>git2</code>)</em> Add all files in the working directory to the git …\n<em>(<code>git2</code>)</em> Add a git submodule to the repository\nCreate the repository and commit the new files.\nReturns true if gitoxide is globally activated.\n<em>(<code>git2</code>)</em> Commit changes to the git repository\nAdd a file to the repository.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<em>(<code>git2</code>)</em> Initialize a new repository at the given path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Project</code> in a git <code>Repository</code>\nCreate a new <code>Project</code> with access to the <code>Repository</code>\nAdd a file that will be left in the working directory, but …\nCreate a symlink to a directory\nCreate a <code>RepoBuilder</code> to build a new git repository.\n<em>(<code>git2</code>)</em> Create a new tag in the git repository\nUsed by <code>cargo install</code> tests to assert an executable binary …\n<code>$name$EXE</code>\nCommon path and file operations\nSee <code>init_root</code>\nPath to the current test’s <code>$CARGO_HOME</code>\nReturns the argument unchanged.\nSee <code>get_lib_filename</code> for more details\nGet the filename for a library.\nSee <code>get_lib_filename</code> for more details\nPath to the parent directory of all test <code>root</code>s\nThis is used when running cargo is pre-CARGO_TARGET_TMPDIR …\nPath to the current test’s <code>$HOME</code>\nFor test harnesses like <code>crate::cargo_test</code>\nCalls <code>U::from(self)</code>.\nReturns a list of all files and directories underneath the …\nPath to the test’s filesystem scratchpad\nPath to <code>rustc</code>s sysroot\nConvert to <code>Data</code> with modifiers for <code>expected</code> data\nOverride the type this snapshot will be compared against\nInitialize as json or <code>Error</code>\nInitialize as json lines or <code>Error</code>\nReplacement for <code>#[test]</code>\nConvert to <code>Data</code>, applying defaults\nInitialize as <code>format</code> or <code>Error</code>\nInitialize as json or <code>Error</code>\nInitialize as json lines or <code>Error</code>\nInitialize as Term SVG\nRemove default <code>filters</code> from this <code>expected</code> result\nTreat lines and json arrays as unordered\nCheck the <code>cargo publish</code> API call to the alternative test …\nChecks the contents of a <code>.crate</code> file.\nCheck the <code>cargo publish</code> API call\nCheck the <code>cargo publish</code> API call, with file contents\nPublished package dependency builder, see <code>Package::add_dep</code>\nEntry with data that corresponds to <code>tar::EntryType</code>.\nA helper struct that collects the arguments for …\nPublished package builder for <code>TestRegistry</code>\nA file to be created in a package.\nPrepare a local <code>TestRegistry</code> fixture\nRequest to the test http server\nResponse from the test http server\nA local registry fixture\nAuth-token for publishing, see <code>RegistryBuilder::token</code>\nAdds a custom HTTP response for a specific url\nPath to the alternative-registry version of <code>api_path</code>\nPath to the alternative-registry version of <code>dl_path</code>\nSetup a local “alternative” <code>TestRegistry</code>\nPath to the alternative-registry version of <code>registry_path</code>\nURL to the alternative-registry version of <code>registry_url</code>\nSets whether or not to initialize as an alternative …\nCall with <code>true</code> to publish in an “alternative registry”.\nIf set, configures an alternate registry with the given …\nSets whether or not to initialize as an alternative …\nIf set, config.json includes ‘api’\nPath to the local web API uploads\nReturns the path to the compressed package file.\nChange the artifact to be of the given kind, like “bin”…\nSets this registry to require the authentication token for …\nIf set, the registry requires authorization for all …\nInitializes the registry.\nChanges this to <code>[build-dependencies]</code>.\nAdds a build-dependency. Example:\nGenerate a checksum\nWrite the registry in configuration.\nWrite the token in the configuration.\nThe credential provider to configure for this registry.\nCredential provider in configuration\nAPI responders.\nAdds <code>default-features = false</code> if the argument is <code>false</code>.\nConfigures the git index update to be delayed by the given …\nIf nonzero, the git index update to be delayed by the …\nAdds a normal dependency. Example:\nChanges this to <code>[dev-dependencies]</code>.\nAdds a dev-dependency. Example:\nServe the download endpoint\nPath to download <code>.crate</code> files using the web API endpoint.\nSpecifies <code>package.edition</code>\nAdds <code>features = [ ... ]</code> to this dependency.\nIf <code>true</code>, the file is created in the root of the tarfile, …\nAdds an “extra” file that is not rooted within the …\nAdds an entry in the <code>[features]</code> section.\nAdds a dependency with the given feature. Example:\nAdds a file to the package.\nAdds a file with a specific Unix mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOperate the api over http\nIf set, serves the API over http.\nOperate the index over http\nIf set, serves the index over http.\nServe the registry index\nOverride the auto-generated index line\nSetup a local psuedo-crates.io <code>TestRegistry</code>\nReturn an internal server error (HTTP 500)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCauses the JSON line emitted in the index to be invalid, …\nShutdown the server thread and wait for it to stop. <code>Drop</code> …\nCall with <code>true</code> to publish in a “local registry”.\nThe Unix mode for the file. Note that when extracted on …\nCreates a new package builder. Call <code>publish()</code> to finalize …\nThe registry has no api.\nPrevents adding the registry to the configuration.\nPrevents placing a token in the configuration\nNot found response\nHandler for 404 responses.\nRespond OK without doing anything\nChanges this to an optional dependency.\nAdds <code>package = ...</code> to this dependency.\nSpecifies whether or not this is a proc macro.\nChanges this to an public dependency.\nCreates the package and place it in the registry.\nAdds <code>registry = $registry</code> to this dependency.\nAdds a dependency to the alternative registry.\nPath to the local index for psuedo-crates.io.\nSpecifies <code>package.resolver</code>\nThis is a valid PASETO secret key.\nRoute the request\nSpecify a minimal Rust version.\nSets the index schema version for this package.\nAdds a symlink to a path to the package.\nChanges this to <code>[target.$target.dependencies]</code>.\nAdds a platform-specific dependency. Example:\nSets the token value\nThe authorization token for the registry.\nUnauthorized response\nSpecifies whether or not the package is “yanked”.\nReturns the path to an executable that prints its …\nReturns a project which builds a cargo-echo simple …\nReturns the path to an executable that works as a wrapper …\nA wrapper around <code>rustc</code> instead of calling <code>clippy</code>.")