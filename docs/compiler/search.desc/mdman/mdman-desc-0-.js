searchState.loadedDescShard("mdman", 0, "mdman markdown to man converter.\nPulldown-cmark iterator yielding an <code>(event, range)</code> tuple.\nThe output formats supported by mdman.\nMapping of <code>(name, section)</code> of a man page to a URL.\nA man section.\nConverts the handlebars markdown file at the given path …\nThe filename extension for the format.\nReturns the argument unchanged.\nHandlebars template processing.\nCalls <code>U::from(self)</code>.\nCreates a new markdown parser with the given input.\nConverts a man page reference into markdown that is …\nMan-page formatter.\nMarkdown formatter.\nRenders the given markdown to the formatter’s output.\nRenders an option (triggered by <code>{{#option}}</code>).\nRenders the end of a block of options (triggered by …\nRenders the start of a block of options (triggered by …\nText formatter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSwitch to the given font.\nParse and render the first top-level header of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFormats a cell. Word-wraps based on width, and adjusts …\nFormats a row, filling cells with spaces and word-wrapping …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current line being written. Once a line break is …\nProcesses table events and generates a text table.\nSplits the text on whitespace.\nThe base URL used for relative URLs.\nThe current word being written. Once a break is …\nHelper for <code>{{man name section}}</code> expression.\nHelper for <code>{{#option}}</code> block.\nHelper for <code>{{#options}}</code> block.\nProcesses the handlebars template at the given file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not the context is currently inside a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves a variable from the context.\n<code>{{*set var=value}}</code> decorator.\nSets a variable to a value within the context.\nExtracts the text from a header after <code>Tag::Heading</code> has …\nSplits the text <code>foo(1)</code> into “foo” and <code>1</code>.\nRemoves tags from the front and back of a string.")