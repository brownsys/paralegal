#![feature(rustc_private)]
#[macro_use]
extern crate lazy_static;

use paralegal-flow::Symbol;
mod helpers;
use helpers::*;

const CRATE_DIR: &str = "tests/contile-tests";

lazy_static! {
    static ref TEST_CRATE_ANALYZED: bool = *helpers::PARABLE_INSTALLED
        && with_current_directory(CRATE_DIR, || {
            run_paralegal-flow_with_graph_dump_and(["--drop-poll", "--drop-clone"])
        })
        .map_or_else(
            |e| {
                println!("io err {}", e);
                false
            },
            |t| t
        );
}

macro_rules! define_test {
    ($name:ident :  $graph:ident -> $block:block) => {
        define_G_test_template!(TEST_CRATE_ANALYZED, CRATE_DIR, $name : $graph -> $block);
    };
}

define_test!(survive_on_broken: graph -> {
    let source = graph.function_call("mark_sensitive");
    let sink = graph.function_call("try_send");
    assert!(graph.connects_data(&source, &sink));
});
